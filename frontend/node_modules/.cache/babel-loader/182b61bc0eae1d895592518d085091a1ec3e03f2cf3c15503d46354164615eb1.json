{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  name: 'ManagePayHeads',\n  data() {\n    return {\n      payHeads: [{\n        id: 1,\n        name: 'Basic Salary',\n        amount: 30000,\n        type: 'Earnings'\n      }, {\n        id: 2,\n        name: 'Health Insurance',\n        amount: 2000,\n        type: 'Deductions'\n      }\n      // Add more pay head data as needed\n      ],\n      employees: [{\n        id: 1,\n        name: 'John Doe',\n        position: 'Software Engineer',\n        totalDeduction: 2000,\n        totalEarnings: 30000,\n        totalSalary: 28000\n      }, {\n        id: 2,\n        name: 'Jane Smith',\n        position: 'Product Manager',\n        totalDeduction: 1500,\n        totalEarnings: 35000,\n        totalSalary: 33500\n      }\n      // Add more employee data as needed\n      ],\n      newPayHead: {\n        name: '',\n        amount: '',\n        type: 'Earnings'\n      },\n      selectedPayHead: {\n        id: '',\n        name: '',\n        amount: '',\n        type: 'Earnings'\n      },\n      showAddModal: false,\n      showUpdateModal: false,\n      showAddPayheadModal: false,\n      selectedEmployee: null,\n      selectedEmployeePayheads: [],\n      availablePayheads: []\n    };\n  },\n  computed: {\n    totalPayableSalary() {\n      const earnings = this.selectedEmployeePayheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + p.amount, 0);\n      const deductions = this.selectedEmployeePayheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + p.amount, 0);\n      return earnings - deductions;\n    }\n  },\n  methods: {\n    goBack() {\n      this.$router.go(-1);\n    },\n    addPayHead() {\n      if (this.newPayHead.name && this.newPayHead.amount && this.newPayHead.type) {\n        this.payHeads.push({\n          id: Date.now(),\n          name: this.newPayHead.name,\n          amount: this.newPayHead.amount,\n          type: this.newPayHead.type\n        });\n        this.newPayHead.name = '';\n        this.newPayHead.amount = '';\n        this.newPayHead.type = 'Earnings';\n        this.showAddModal = false;\n      }\n    },\n    showUpdatePayHeadModal(payHead) {\n      this.selectedPayHead = {\n        ...payHead\n      };\n      this.showUpdateModal = true;\n    },\n    updatePayHead() {\n      const updatedPayHeadIndex = this.payHeads.findIndex(ph => ph.id === this.selectedPayHead.id);\n      if (updatedPayHeadIndex !== -1) {\n        this.payHeads[updatedPayHeadIndex] = {\n          ...this.selectedPayHead\n        };\n        this.showUpdateModal = false;\n      }\n    },\n    deletePayHead(id) {\n      this.payHeads = this.payHeads.filter(payHead => payHead.id !== id);\n    },\n    openAddPayheadModal(employee) {\n      this.selectedEmployee = employee;\n      this.selectedEmployeePayheads = [];\n      this.availablePayheads = this.payHeads;\n      this.showAddPayheadModal = true;\n    },\n    addPayheadToEmployee(payhead) {\n      const isAlreadyAdded = this.selectedEmployeePayheads.some(p => p.id === payhead.id);\n      if (!isAlreadyAdded) {\n        this.selectedEmployeePayheads.push(payhead);\n      }\n    },\n    removePayheadFromEmployee(payhead) {\n      this.selectedEmployeePayheads = this.selectedEmployeePayheads.filter(p => p.id !== payhead.id);\n    },\n    savePayheads() {\n      const employeeIndex = this.employees.findIndex(e => e.id === this.selectedEmployee.id);\n      if (employeeIndex !== -1) {\n        this.employees[employeeIndex].payheads = [...this.selectedEmployeePayheads];\n      }\n      this.showAddPayheadModal = false;\n    }\n  }\n};","map":{"version":3,"names":["name","data","payHeads","id","amount","type","employees","position","totalDeduction","totalEarnings","totalSalary","newPayHead","selectedPayHead","showAddModal","showUpdateModal","showAddPayheadModal","selectedEmployee","selectedEmployeePayheads","availablePayheads","computed","totalPayableSalary","earnings","filter","p","reduce","sum","deductions","methods","goBack","$router","go","addPayHead","push","Date","now","showUpdatePayHeadModal","payHead","updatePayHead","updatedPayHeadIndex","findIndex","ph","deletePayHead","openAddPayheadModal","employee","addPayheadToEmployee","payhead","isAlreadyAdded","some","removePayheadFromEmployee","savePayheads","employeeIndex","e","payheads"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\ManagePayHeads.vue"],"sourcesContent":["<script>\r\nexport default {\r\n  name: 'ManagePayHeads',\r\n  data() {\r\n    return {\r\n      payHeads: [\r\n        { id: 1, name: 'Basic Salary', amount: 30000, type: 'Earnings' },\r\n        { id: 2, name: 'Health Insurance', amount: 2000, type: 'Deductions' },\r\n        // Add more pay head data as needed\r\n      ],\r\n      employees: [\r\n        { id: 1, name: 'John Doe', position: 'Software Engineer', totalDeduction: 2000, totalEarnings: 30000, totalSalary: 28000 },\r\n        { id: 2, name: 'Jane Smith', position: 'Product Manager', totalDeduction: 1500, totalEarnings: 35000, totalSalary: 33500 },\r\n        // Add more employee data as needed\r\n      ],\r\n      newPayHead: {\r\n        name: '',\r\n        amount: '',\r\n        type: 'Earnings'\r\n      },\r\n      selectedPayHead: {\r\n        id: '',\r\n        name: '',\r\n        amount: '',\r\n        type: 'Earnings'\r\n      },\r\n      showAddModal: false,\r\n      showUpdateModal: false,\r\n      showAddPayheadModal: false,\r\n      selectedEmployee: null,\r\n      selectedEmployeePayheads: [],\r\n      availablePayheads: [],\r\n    };\r\n  },\r\n  computed: {\r\n    totalPayableSalary() {\r\n      const earnings = this.selectedEmployeePayheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + p.amount, 0);\r\n      const deductions = this.selectedEmployeePayheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + p.amount, 0);\r\n      return earnings - deductions;\r\n    }\r\n  },\r\n  methods: {\r\n    goBack() {\r\n      this.$router.go(-1);\r\n    },\r\n    addPayHead() {\r\n      if (this.newPayHead.name && this.newPayHead.amount && this.newPayHead.type) {\r\n        this.payHeads.push({\r\n          id: Date.now(),\r\n          name: this.newPayHead.name,\r\n          amount: this.newPayHead.amount,\r\n          type: this.newPayHead.type,\r\n        });\r\n        this.newPayHead.name = '';\r\n        this.newPayHead.amount = '';\r\n        this.newPayHead.type = 'Earnings';\r\n        this.showAddModal = false;\r\n      }\r\n    },\r\n    showUpdatePayHeadModal(payHead) {\r\n      this.selectedPayHead = { ...payHead };\r\n      this.showUpdateModal = true;\r\n    },\r\n    updatePayHead() {\r\n      const updatedPayHeadIndex = this.payHeads.findIndex(ph => ph.id === this.selectedPayHead.id);\r\n      if (updatedPayHeadIndex !== -1) {\r\n        this.payHeads[updatedPayHeadIndex] = { ...this.selectedPayHead };\r\n        this.showUpdateModal = false;\r\n      }\r\n    },\r\n    deletePayHead(id) {\r\n      this.payHeads = this.payHeads.filter(payHead => payHead.id !== id);\r\n    },\r\n    openAddPayheadModal(employee) {\r\n      this.selectedEmployee = employee;\r\n      this.selectedEmployeePayheads = [];\r\n      this.availablePayheads = this.payHeads;\r\n      this.showAddPayheadModal = true;\r\n    },\r\n    addPayheadToEmployee(payhead) {\r\n      const isAlreadyAdded = this.selectedEmployeePayheads.some(p => p.id === payhead.id);\r\n      if (!isAlreadyAdded) {\r\n        this.selectedEmployeePayheads.push(payhead);\r\n      }\r\n    },\r\n    removePayheadFromEmployee(payhead) {\r\n      this.selectedEmployeePayheads = this.selectedEmployeePayheads.filter(p => p.id !== payhead.id);\r\n    },\r\n    savePayheads() {\r\n      const employeeIndex = this.employees.findIndex(e => e.id === this.selectedEmployee.id);\r\n      if (employeeIndex !== -1) {\r\n        this.employees[employeeIndex].payheads = [...this.selectedEmployeePayheads];\r\n      }\r\n      this.showAddPayheadModal = false;\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}