{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport moment from 'moment';\njsPDF.prototype.autoTable = autoTable.default;\nexport default {\n  name: 'EmployeeRecords',\n  data() {\n    return {\n      employee: null,\n      selectedMonth: new Date().toISOString().slice(0, 7),\n      isGenerating: false,\n      statusMessage: '',\n      errorMessage: '',\n      showRecordModal: false,\n      recordDataUrl: '',\n      iframeError: false,\n      records: {},\n      // Store record URLs locally\n      recordHistory: [],\n      selectedRecord: null,\n      recordGenerationStatus: {},\n      modalFilterPosition: ''\n    };\n  },\n  computed: {\n    sortedRecordHistory() {\n      return [...this.recordHistory].sort((a, b) => new Date(a.salaryMonth) - new Date(b.salaryMonth));\n    },\n    filteredRecordHistory() {\n      return this.sortedRecordHistory.filter(record => !this.modalFilterPosition || record.position === this.modalFilterPosition);\n    },\n    uniqueModalPositions() {\n      return [...new Set(this.recordHistory.map(r => r.position))];\n    }\n  },\n  mounted() {\n    this.fetchEmployeeData();\n  },\n  methods: {\n    async fetchEmployeeData() {\n      try {\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n          this.errorMessage = 'User not logged in. Redirecting to login...';\n          setTimeout(() => {\n            this.$router.push('/login');\n          }, 2000);\n          return;\n        }\n        const response = await axios.get(`http://localhost:7777/api/employees/${userId}/salary`, {\n          params: {\n            month: this.selectedMonth\n          }\n        });\n        if (!response.data) {\n          throw new Error('No employee data returned from server');\n        }\n        this.employee = {\n          ...response.data,\n          positionHistory: response.data.positionHistory || [{\n            position: response.data.position || 'N/A',\n            startDate: response.data.hireDate || new Date(),\n            endDate: null\n          }],\n          name: `${response.data.firstName || ''} ${response.data.lastName || ''}`.trim()\n        };\n        this.recordDataUrl = this.records[`${this.employee.id}_${this.employee.salaryMonth}`] || '';\n      } catch (error) {\n        console.error('Error fetching employee data:', error);\n        this.errorMessage = 'Failed to load employee records. Please check your connection or try again later.';\n        this.employee = null;\n      }\n    },\n    async generateRecord() {\n      if (!this.employee) {\n        this.statusMessage = 'No employee data available to generate record.';\n        setTimeout(() => this.statusMessage = '', 3000);\n        return;\n      }\n      this.isGenerating = true;\n      this.statusMessage = '';\n      try {\n        const recordData = this.createRecordData(this.employee);\n        const pdfBlob = await this.generatePdf(recordData);\n        const url = URL.createObjectURL(pdfBlob);\n        this.records[`${this.employee.id}_${this.employee.salaryMonth}`] = url;\n        this.recordDataUrl = url;\n\n        // Save to backend\n        const pdfBase64 = await this.blobToBase64(pdfBlob);\n        await this.saveEmployeeRecord({\n          employeeId: this.employee.id,\n          empNo: this.employee.empNo,\n          recordData: pdfBase64,\n          salaryMonth: this.employee.salaryMonth,\n          position: this.employee.position,\n          salary: this.employee.salary\n        });\n        this.showSuccessMessage('Record generated and saved successfully!');\n        await this.viewRecordHistory(); // Refresh history after generation\n      } catch (error) {\n        console.error('Error generating record:', error);\n        this.statusMessage = 'Failed to generate record. Please try again.';\n      } finally {\n        this.isGenerating = false;\n        setTimeout(() => this.statusMessage = '', 3000);\n      }\n    },\n    async viewRecordHistory() {\n      if (!this.employee) {\n        this.statusMessage = 'No employee data available to view history.';\n        setTimeout(() => this.statusMessage = '', 3000);\n        return;\n      }\n      this.isGenerating = true;\n      try {\n        // Fetch historical records from the backend\n        const response = await axios.get(`http://localhost:7777/api/employee-records/${this.employee.id}`);\n        const serverRecords = response.data;\n        const today = moment();\n        const hireDate = moment(this.employee.hireDate);\n        if (!hireDate.isValid()) {\n          console.error('Invalid hireDate:', this.employee.hireDate);\n          this.showErrorMessage('Invalid hire date for employee');\n          this.isGenerating = false;\n          return;\n        }\n        const recordHistory = [];\n        let currentMonth = hireDate.clone().startOf('month');\n        while (currentMonth.isSameOrBefore(today, 'month')) {\n          const salaryMonth = currentMonth.format('YYYY-MM');\n          const positionAtTime = this.employee.positionHistory.find(h => moment(h.startDate).isSameOrBefore(salaryMonth, 'month') && (!h.endDate || moment(h.endDate).isSameOrAfter(salaryMonth, 'month')))?.position || this.employee.position;\n          const serverRecord = serverRecords.find(r => r.salaryMonth === salaryMonth);\n          const localUrl = this.records[`${this.employee.id}_${salaryMonth}`] || (serverRecord ? `data:application/pdf;base64,${serverRecord.recordData.split(',')[1]}` : null);\n          recordHistory.push({\n            salaryMonth,\n            position: positionAtTime,\n            recordDataUrl: localUrl || null,\n            employee: {\n              ...this.employee,\n              salaryMonth\n            }\n          });\n          currentMonth.add(1, 'month');\n        }\n        this.recordHistory = recordHistory;\n        this.selectedRecord = this.filteredRecordHistory.find(r => r.recordDataUrl) || null;\n        this.modalFilterPosition = '';\n        this.showRecordModal = true;\n      } catch (error) {\n        console.error('Error fetching record history:', error);\n        this.showErrorMessage('Failed to load record history. Please try again.');\n      } finally {\n        this.isGenerating = false;\n      }\n    },\n    async generateRecordForHistory(record) {\n      if (!record || !record.employee) {\n        console.error('No record or employee data available:', record);\n        this.showErrorMessage('Please select a valid record.');\n        return;\n      }\n      const key = record.salaryMonth;\n      this.recordGenerationStatus[key] = {\n        generating: true\n      };\n      try {\n        const recordData = this.createRecordData(record.employee);\n        const pdfBlob = await this.generatePdf(recordData);\n        const pdfBase64 = await this.blobToBase64(pdfBlob);\n        const url = URL.createObjectURL(pdfBlob);\n        this.records[`${record.employee.id}_${record.salaryMonth}`] = url;\n        record.recordDataUrl = url;\n        this.selectedRecord = record;\n\n        // Save to backend\n        await this.saveEmployeeRecord({\n          employeeId: record.employee.id,\n          empNo: record.employee.empNo,\n          recordData: pdfBase64,\n          salaryMonth: record.salaryMonth,\n          position: record.position,\n          salary: record.employee.salary || this.employee.salary\n        });\n        this.showSuccessMessage(`Record generated and saved for ${record.employee.name} - ${record.salaryMonth}!`);\n      } catch (error) {\n        console.error('Error generating record:', error);\n        console.error('Server response:', error.response?.data);\n        this.showErrorMessage(error.response?.data?.error || 'Failed to generate record. Please try again.');\n      } finally {\n        this.recordGenerationStatus[key] = {\n          generating: false\n        };\n      }\n    },\n    async saveEmployeeRecord(payload) {\n      try {\n        const response = await axios.post('http://localhost:7777/api/employee-records/generate', payload);\n        console.log('Employee record saved:', response.data);\n      } catch (error) {\n        console.error('Error saving employee record:', error);\n        throw error;\n      }\n    },\n    async blobToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    },\n    selectRecord(record) {\n      this.selectedRecord = record.recordDataUrl ? record : null;\n      this.iframeError = false;\n    },\n    async downloadRecord() {\n      if (!this.selectedRecord?.recordDataUrl) return;\n      const response = await fetch(this.selectedRecord.recordDataUrl);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `Record_${this.employee.name}_${this.selectedRecord.salaryMonth}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    },\n    createRecordData(employee) {\n      const recordDate = moment(employee.salaryMonth, 'YYYY-MM').format('MM/DD/YYYY');\n      return {\n        recordDate,\n        id: employee.id,\n        name: employee.name,\n        empNo: employee.empNo || 'N/A',\n        lastName: employee.lastName || 'N/A',\n        middleName: employee.middleName || 'N/A',\n        firstName: employee.firstName || 'N/A',\n        birthDate: employee.birthDate ? moment(employee.birthDate).format('MM/DD/YYYY') : 'N/A',\n        hireDate: employee.hireDate ? moment(employee.hireDate).format('MM/DD/YYYY') : 'N/A',\n        civilStatus: employee.civilStatus || 'SINGLE',\n        dependents: employee.dependents || 0,\n        sss: employee.sss || 'N/A',\n        tin: employee.tin || 'N/A',\n        philhealth: employee.philhealth || 'N/A',\n        hdmf: employee.hdmf || 'N/A',\n        position: employee.position || 'N/A',\n        salaryMonth: employee.salaryMonth\n      };\n    },\n    async generatePdf(recordData) {\n      const doc = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4'\n      });\n      const lineHeight = 8;\n      const leftMargin = 14;\n      function addFormattedText(doc, text, x, y, options = {}) {\n        doc.setFontSize(options.fontSize || 12);\n        doc.setFont(undefined, options.fontStyle || 'normal');\n        doc.setTextColor(options.textColor ? options.textColor[0] : 0, options.textColor ? options.textColor[1] : 0, options.textColor ? options.textColor[2] : 0);\n        doc.text(text, x, y, {\n          align: options.align || 'left'\n        });\n      }\n      addFormattedText(doc, 'RIGHTJOB Solutions', leftMargin, 15, {\n        fontSize: 16,\n        fontStyle: 'bold',\n        textColor: [0, 128, 0]\n      });\n      addFormattedText(doc, 'EMPLOYEE RECORD', doc.internal.pageSize.getWidth() / 2, 15, {\n        fontSize: 18,\n        align: 'center'\n      });\n      addFormattedText(doc, 'Record Date', 140, 15, {\n        fontSize: 12\n      });\n      addFormattedText(doc, recordData.recordDate, 170, 15, {\n        fontSize: 12\n      });\n      doc.line(leftMargin, 20, doc.internal.pageSize.getWidth() - leftMargin, 20);\n      let y = 30;\n      addFormattedText(doc, 'Personal Information', leftMargin, 25, {\n        fontSize: 14,\n        fontStyle: 'bold'\n      });\n      addFormattedText(doc, 'Emp No.', leftMargin, y);\n      addFormattedText(doc, recordData.empNo, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Last Name', leftMargin, y);\n      addFormattedText(doc, recordData.lastName, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Middle Name', leftMargin, y);\n      addFormattedText(doc, recordData.middleName, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'First Name', leftMargin, y);\n      addFormattedText(doc, recordData.firstName, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Birth Date', leftMargin, y);\n      addFormattedText(doc, recordData.birthDate, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Hire Date', leftMargin, y);\n      addFormattedText(doc, recordData.hireDate, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Position', leftMargin, y);\n      addFormattedText(doc, recordData.position, leftMargin + 40, y);\n      y = 30;\n      addFormattedText(doc, 'Civil Status', 120, y);\n      addFormattedText(doc, recordData.civilStatus, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Dependents', 120, y);\n      addFormattedText(doc, recordData.dependents.toString(), 150, y);\n      y += lineHeight * 2;\n      addFormattedText(doc, 'SSS', 120, y);\n      addFormattedText(doc, recordData.sss, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'TIN', 120, y);\n      addFormattedText(doc, recordData.tin, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Philhealth', 120, y);\n      addFormattedText(doc, recordData.philhealth, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'HDMF', 120, y);\n      addFormattedText(doc, recordData.hdmf, 150, y);\n      addFormattedText(doc, 'This is a computer-generated employee record, no signature required.', doc.internal.pageSize.getWidth() / 2, 270, {\n        fontSize: 10,\n        align: 'center'\n      });\n      return doc.output('blob');\n    },\n    onIframeLoad() {\n      console.log('iFrame loaded successfully');\n      this.iframeError = false;\n    },\n    onIframeError() {\n      console.error('iFrame failed to load');\n      this.iframeError = true;\n    },\n    showSuccessMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => this.statusMessage = '', 3000);\n    },\n    showErrorMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => this.statusMessage = '', 3000);\n    },\n    formatDate(date) {\n      return moment(date).format('MMM DD, YYYY');\n    }\n  }\n};","map":{"version":3,"names":["axios","jsPDF","autoTable","moment","prototype","default","name","data","employee","selectedMonth","Date","toISOString","slice","isGenerating","statusMessage","errorMessage","showRecordModal","recordDataUrl","iframeError","records","recordHistory","selectedRecord","recordGenerationStatus","modalFilterPosition","computed","sortedRecordHistory","sort","a","b","salaryMonth","filteredRecordHistory","filter","record","position","uniqueModalPositions","Set","map","r","mounted","fetchEmployeeData","methods","userId","localStorage","getItem","setTimeout","$router","push","response","get","params","month","Error","positionHistory","startDate","hireDate","endDate","firstName","lastName","trim","id","error","console","generateRecord","recordData","createRecordData","pdfBlob","generatePdf","url","URL","createObjectURL","pdfBase64","blobToBase64","saveEmployeeRecord","employeeId","empNo","salary","showSuccessMessage","viewRecordHistory","serverRecords","today","isValid","showErrorMessage","currentMonth","clone","startOf","isSameOrBefore","format","positionAtTime","find","h","isSameOrAfter","serverRecord","localUrl","split","add","generateRecordForHistory","key","generating","payload","post","log","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","selectRecord","downloadRecord","fetch","window","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","recordDate","middleName","birthDate","civilStatus","dependents","sss","tin","philhealth","hdmf","doc","orientation","unit","lineHeight","leftMargin","addFormattedText","text","x","y","options","setFontSize","fontSize","setFont","undefined","fontStyle","setTextColor","textColor","align","internal","pageSize","getWidth","line","toString","output","onIframeLoad","onIframeError","message","formatDate","date"],"sources":["C:\\Users\\ASUS\\Desktop\\OJT-PayrollSystem\\OJT-Payroll-System\\frontend\\src\\views\\admind\\EmployeeRecords.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen p-1\">\r\n    <div class=\"max-w-8xl mx-auto\">\r\n      <div class=\"bg-white p-6 rounded-xl shadow-md\">\r\n        <div class=\"flex justify-between items-center mb-6\">\r\n          <h2 class=\"text-2xl font-semibold text-gray-900\">My Employee Records</h2>\r\n          <input\r\n            v-model=\"selectedMonth\"\r\n            type=\"month\"\r\n            class=\"border rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all\"\r\n            @change=\"fetchEmployeeData\"\r\n          />\r\n        </div>\r\n\r\n        <table v-if=\"employee\" class=\"min-w-full border border-gray-300\">\r\n          <thead class=\"bg-gray-200\">\r\n            <tr>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Name</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Position</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Hire Date</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Period</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr class=\"hover:bg-gray-50\">\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.id }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.position }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ formatDate(employee.hireDate) }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.salaryMonth }}</td>\r\n              <td class=\"border px-4 py-2 text-sm\">\r\n                <button \r\n                  @click=\"generateRecord\" \r\n                  class=\"bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-700 transition-all duration-200 mr-2\"\r\n                  :disabled=\"isGenerating\"\r\n                >\r\n                  {{ isGenerating ? 'Generating...' : 'Generate Record' }}\r\n                </button>\r\n                <button \r\n                  @click=\"viewRecordHistory\" \r\n                  class=\"bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-700 transition-all duration-200\"\r\n                  :disabled=\"isGenerating\"\r\n                >\r\n                  View History\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <!-- Loading/Error State -->\r\n        <div v-else class=\"text-center py-8 text-gray-500\">\r\n          {{ errorMessage || 'Loading employee data...' }}\r\n        </div>\r\n\r\n        <!-- Employee Record History Modal -->\r\n        <div\r\n          v-if=\"showRecordModal\"\r\n          class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\"\r\n        >\r\n          <div class=\"bg-white rounded-xl shadow-xl w-full max-w-5xl h-[80vh] flex flex-col\">\r\n            <div class=\"flex items-center justify-between p-4 border-b\">\r\n              <h2 class=\"text-base font-medium text-gray-800 flex items-center gap-1\">\r\n                <span class=\"material-icons text-sm\">history</span>\r\n                Record History - {{ employee?.name }}\r\n              </h2>\r\n              <button\r\n                @click=\"showRecordModal = false\"\r\n                class=\"p-1 hover:bg-gray-100 rounded-full\"\r\n              >\r\n                <span class=\"material-icons text-sm\">close</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"flex flex-1 overflow-hidden\">\r\n              <div class=\"w-1/2 p-4 overflow-y-auto border-r\">\r\n                <div class=\"mb-4\">\r\n                  <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Position History</h3>\r\n                  <ul class=\"text-sm text-gray-600\">\r\n                    <li v-for=\"history in employee.positionHistory\" :key=\"history.startDate\" class=\"mb-1\">\r\n                      {{ history.position }} ({{ formatDate(history.startDate) }} - {{ history.endDate ? formatDate(history.endDate) : 'Present' }})\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div class=\"mb-4\">\r\n                  <label class=\"text-sm font-medium text-gray-700\">Filter by Position:</label>\r\n                  <select\r\n                    v-model=\"modalFilterPosition\"\r\n                    class=\"w-full py-2 px-3 text-sm rounded-md border border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent mt-1\"\r\n                  >\r\n                    <option value=\"\">All Positions</option>\r\n                    <option v-for=\"pos in uniqueModalPositions\" :key=\"pos\" :value=\"pos\">{{ pos }}</option>\r\n                  </select>\r\n                </div>\r\n                <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Record Periods</h3>\r\n                <table class=\"min-w-full divide-y divide-gray-200\">\r\n                  <thead class=\"bg-gray-200 sticky top-0\">\r\n                    <tr>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Period</th>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Position</th>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Action</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody class=\"divide-y divide-gray-200\">\r\n                    <tr\r\n                      v-for=\"record in filteredRecordHistory\"\r\n                      :key=\"record.salaryMonth\"\r\n                      class=\"hover:bg-gray-50 cursor-pointer\"\r\n                      :class=\"{ 'bg-blue-100': selectedRecord?.salaryMonth === record.salaryMonth }\"\r\n                      @click=\"selectRecord(record)\"\r\n                    >\r\n                      <td class=\"px-4 py-2 text-sm text-gray-900\">{{ record.salaryMonth }}</td>\r\n                      <td class=\"px-4 py-2 text-sm text-gray-500\">{{ record.position }}</td>\r\n                      <td class=\"px-4 py-2\">\r\n                        <button\r\n                          @click.stop=\"generateRecordForHistory(record)\"\r\n                          class=\"inline-flex items-center gap-1 px-3 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-700\"\r\n                          :disabled=\"recordGenerationStatus[record.salaryMonth]?.generating\"\r\n                        >\r\n                          <span class=\"material-icons text-sm\">description</span>\r\n                          {{ recordGenerationStatus[record.salaryMonth]?.generating ? 'Generating...' : 'Generate' }}\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                    <tr v-if=\"filteredRecordHistory.length === 0\">\r\n                      <td colspan=\"3\" class=\"px-4 py-4 text-center text-sm text-gray-500\">No records available for this position.</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div class=\"w-1/2 p-4 overflow-y-auto\">\r\n                <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Record Preview</h3>\r\n                <div v-if=\"selectedRecord && selectedRecord.recordDataUrl\" class=\"flex flex-col h-full\">\r\n                  <iframe\r\n                    :src=\"selectedRecord.recordDataUrl\"\r\n                    class=\"w-full h-[60vh] rounded border mb-4\"\r\n                    @load=\"onIframeLoad\"\r\n                    @error=\"onIframeError\"\r\n                  ></iframe>\r\n                  <button\r\n                    @click=\"downloadRecord\"\r\n                    class=\"flex items-center justify-center gap-1 bg-blue-500 hover:bg-blue-700 text-white text-sm py-2 px-4 rounded-md\"\r\n                  >\r\n                    <span class=\"material-icons text-sm\">download</span>\r\n                    Download PDF\r\n                  </button>\r\n                  <div\r\n                    v-if=\"iframeError\"\r\n                    class=\"mt-3 p-3 bg-red-50 text-red-700 rounded text-sm flex items-center gap-1\"\r\n                  >\r\n                    <span class=\"material-icons text-sm\">error</span>\r\n                    Error loading record. Please try again.\r\n                  </div>\r\n                </div>\r\n                <div v-else class=\"text-sm text-gray-500 text-center mt-4\">\r\n                  Select a record from the list to preview.\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Status Message -->\r\n        <div \r\n          v-if=\"statusMessage\" \r\n          :class=\"statusMessage.includes('successfully') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\"\r\n          class=\"mt-4 p-3 rounded-lg text-center\"\r\n        >\r\n          {{ statusMessage }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport moment from 'moment';\r\n\r\njsPDF.prototype.autoTable = autoTable.default;\r\n\r\nexport default {\r\n  name: 'EmployeeRecords',\r\n  data() {\r\n    return {\r\n      employee: null,\r\n      selectedMonth: new Date().toISOString().slice(0, 7),\r\n      isGenerating: false,\r\n      statusMessage: '',\r\n      errorMessage: '',\r\n      showRecordModal: false,\r\n      recordDataUrl: '',\r\n      iframeError: false,\r\n      records: {}, // Store record URLs locally\r\n      recordHistory: [],\r\n      selectedRecord: null,\r\n      recordGenerationStatus: {},\r\n      modalFilterPosition: ''\r\n    };\r\n  },\r\n  computed: {\r\n    sortedRecordHistory() {\r\n      return [...this.recordHistory].sort((a, b) => new Date(a.salaryMonth) - new Date(b.salaryMonth));\r\n    },\r\n    filteredRecordHistory() {\r\n      return this.sortedRecordHistory.filter(record => \r\n        !this.modalFilterPosition || record.position === this.modalFilterPosition\r\n      );\r\n    },\r\n    uniqueModalPositions() {\r\n      return [...new Set(this.recordHistory.map(r => r.position))];\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchEmployeeData();\r\n  },\r\n  methods: {\r\n    async fetchEmployeeData() {\r\n      try {\r\n        const userId = localStorage.getItem('userId');\r\n        if (!userId) {\r\n          this.errorMessage = 'User not logged in. Redirecting to login...';\r\n          setTimeout(() => {\r\n            this.$router.push('/login');\r\n          }, 2000);\r\n          return;\r\n        }\r\n\r\n        const response = await axios.get(`http://localhost:7777/api/employees/${userId}/salary`, {\r\n          params: { month: this.selectedMonth }\r\n        });\r\n        if (!response.data) {\r\n          throw new Error('No employee data returned from server');\r\n        }\r\n        this.employee = {\r\n          ...response.data,\r\n          positionHistory: response.data.positionHistory || [\r\n            { position: response.data.position || 'N/A', startDate: response.data.hireDate || new Date(), endDate: null }\r\n          ],\r\n          name: `${response.data.firstName || ''} ${response.data.lastName || ''}`.trim()\r\n        };\r\n        this.recordDataUrl = this.records[`${this.employee.id}_${this.employee.salaryMonth}`] || '';\r\n      } catch (error) {\r\n        console.error('Error fetching employee data:', error);\r\n        this.errorMessage = 'Failed to load employee records. Please check your connection or try again later.';\r\n        this.employee = null;\r\n      }\r\n    },\r\n    async generateRecord() {\r\n      if (!this.employee) {\r\n        this.statusMessage = 'No employee data available to generate record.';\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n        return;\r\n      }\r\n\r\n      this.isGenerating = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        const recordData = this.createRecordData(this.employee);\r\n        const pdfBlob = await this.generatePdf(recordData);\r\n        const url = URL.createObjectURL(pdfBlob);\r\n        this.records[`${this.employee.id}_${this.employee.salaryMonth}`] = url;\r\n        this.recordDataUrl = url;\r\n\r\n        // Save to backend\r\n        const pdfBase64 = await this.blobToBase64(pdfBlob);\r\n        await this.saveEmployeeRecord({\r\n          employeeId: this.employee.id,\r\n          empNo: this.employee.empNo,\r\n          recordData: pdfBase64,\r\n          salaryMonth: this.employee.salaryMonth,\r\n          position: this.employee.position,\r\n          salary: this.employee.salary\r\n        });\r\n\r\n        this.showSuccessMessage('Record generated and saved successfully!');\r\n        await this.viewRecordHistory(); // Refresh history after generation\r\n      } catch (error) {\r\n        console.error('Error generating record:', error);\r\n        this.statusMessage = 'Failed to generate record. Please try again.';\r\n      } finally {\r\n        this.isGenerating = false;\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n      }\r\n    },\r\n    async viewRecordHistory() {\r\n      if (!this.employee) {\r\n        this.statusMessage = 'No employee data available to view history.';\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n        return;\r\n      }\r\n\r\n      this.isGenerating = true;\r\n      try {\r\n        // Fetch historical records from the backend\r\n        const response = await axios.get(`http://localhost:7777/api/employee-records/${this.employee.id}`);\r\n        const serverRecords = response.data;\r\n\r\n        const today = moment();\r\n        const hireDate = moment(this.employee.hireDate);\r\n\r\n        if (!hireDate.isValid()) {\r\n          console.error('Invalid hireDate:', this.employee.hireDate);\r\n          this.showErrorMessage('Invalid hire date for employee');\r\n          this.isGenerating = false;\r\n          return;\r\n        }\r\n\r\n        const recordHistory = [];\r\n        let currentMonth = hireDate.clone().startOf('month');\r\n\r\n        while (currentMonth.isSameOrBefore(today, 'month')) {\r\n          const salaryMonth = currentMonth.format('YYYY-MM');\r\n          const positionAtTime = this.employee.positionHistory.find(h => \r\n            moment(h.startDate).isSameOrBefore(salaryMonth, 'month') && \r\n            (!h.endDate || moment(h.endDate).isSameOrAfter(salaryMonth, 'month'))\r\n          )?.position || this.employee.position;\r\n\r\n          const serverRecord = serverRecords.find(r => r.salaryMonth === salaryMonth);\r\n          const localUrl = this.records[`${this.employee.id}_${salaryMonth}`] || (serverRecord ? `data:application/pdf;base64,${serverRecord.recordData.split(',')[1]}` : null);\r\n\r\n          recordHistory.push({\r\n            salaryMonth,\r\n            position: positionAtTime,\r\n            recordDataUrl: localUrl || null,\r\n            employee: { ...this.employee, salaryMonth }\r\n          });\r\n\r\n          currentMonth.add(1, 'month');\r\n        }\r\n\r\n        this.recordHistory = recordHistory;\r\n        this.selectedRecord = this.filteredRecordHistory.find(r => r.recordDataUrl) || null;\r\n        this.modalFilterPosition = '';\r\n        this.showRecordModal = true;\r\n      } catch (error) {\r\n        console.error('Error fetching record history:', error);\r\n        this.showErrorMessage('Failed to load record history. Please try again.');\r\n      } finally {\r\n        this.isGenerating = false;\r\n      }\r\n    },\r\n    async generateRecordForHistory(record) {\r\n      if (!record || !record.employee) {\r\n        console.error('No record or employee data available:', record);\r\n        this.showErrorMessage('Please select a valid record.');\r\n        return;\r\n      }\r\n\r\n      const key = record.salaryMonth;\r\n      this.recordGenerationStatus[key] = { generating: true };\r\n      try {\r\n        const recordData = this.createRecordData(record.employee);\r\n        const pdfBlob = await this.generatePdf(recordData);\r\n        const pdfBase64 = await this.blobToBase64(pdfBlob);\r\n        const url = URL.createObjectURL(pdfBlob);\r\n        this.records[`${record.employee.id}_${record.salaryMonth}`] = url;\r\n        record.recordDataUrl = url;\r\n        this.selectedRecord = record;\r\n\r\n        // Save to backend\r\n        await this.saveEmployeeRecord({\r\n          employeeId: record.employee.id,\r\n          empNo: record.employee.empNo,\r\n          recordData: pdfBase64,\r\n          salaryMonth: record.salaryMonth,\r\n          position: record.position,\r\n          salary: record.employee.salary || this.employee.salary\r\n        });\r\n\r\n        this.showSuccessMessage(`Record generated and saved for ${record.employee.name} - ${record.salaryMonth}!`);\r\n      } catch (error) {\r\n        console.error('Error generating record:', error);\r\n        console.error('Server response:', error.response?.data);\r\n        this.showErrorMessage(error.response?.data?.error || 'Failed to generate record. Please try again.');\r\n      } finally {\r\n        this.recordGenerationStatus[key] = { generating: false };\r\n      }\r\n    },\r\n    async saveEmployeeRecord(payload) {\r\n      try {\r\n        const response = await axios.post('http://localhost:7777/api/employee-records/generate', payload);\r\n        console.log('Employee record saved:', response.data);\r\n      } catch (error) {\r\n        console.error('Error saving employee record:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    async blobToBase64(blob) {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => resolve(reader.result);\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    },\r\n    selectRecord(record) {\r\n      this.selectedRecord = record.recordDataUrl ? record : null;\r\n      this.iframeError = false;\r\n    },\r\n    async downloadRecord() {\r\n      if (!this.selectedRecord?.recordDataUrl) return;\r\n      const response = await fetch(this.selectedRecord.recordDataUrl);\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `Record_${this.employee.name}_${this.selectedRecord.salaryMonth}.pdf`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n    },\r\n    createRecordData(employee) {\r\n      const recordDate = moment(employee.salaryMonth, 'YYYY-MM').format('MM/DD/YYYY');\r\n      return {\r\n        recordDate,\r\n        id: employee.id,\r\n        name: employee.name,\r\n        empNo: employee.empNo || 'N/A',\r\n        lastName: employee.lastName || 'N/A',\r\n        middleName: employee.middleName || 'N/A',\r\n        firstName: employee.firstName || 'N/A',\r\n        birthDate: employee.birthDate ? moment(employee.birthDate).format('MM/DD/YYYY') : 'N/A',\r\n        hireDate: employee.hireDate ? moment(employee.hireDate).format('MM/DD/YYYY') : 'N/A',\r\n        civilStatus: employee.civilStatus || 'SINGLE',\r\n        dependents: employee.dependents || 0,\r\n        sss: employee.sss || 'N/A',\r\n        tin: employee.tin || 'N/A',\r\n        philhealth: employee.philhealth || 'N/A',\r\n        hdmf: employee.hdmf || 'N/A',\r\n        position: employee.position || 'N/A',\r\n        salaryMonth: employee.salaryMonth\r\n      };\r\n    },\r\n    async generatePdf(recordData) {\r\n      const doc = new jsPDF({\r\n        orientation: 'portrait',\r\n        unit: 'mm',\r\n        format: 'a4'\r\n      });\r\n      const lineHeight = 8;\r\n      const leftMargin = 14;\r\n\r\n      function addFormattedText(doc, text, x, y, options = {}) {\r\n        doc.setFontSize(options.fontSize || 12);\r\n        doc.setFont(undefined, options.fontStyle || 'normal');\r\n        doc.setTextColor(options.textColor ? options.textColor[0] : 0, options.textColor ? options.textColor[1] : 0, options.textColor ? options.textColor[2] : 0);\r\n        doc.text(text, x, y, { align: options.align || 'left' });\r\n      }\r\n\r\n      addFormattedText(doc, 'RIGHTJOB Solutions', leftMargin, 15, { fontSize: 16, fontStyle: 'bold', textColor: [0, 128, 0] });\r\n      addFormattedText(doc, 'EMPLOYEE RECORD', doc.internal.pageSize.getWidth() / 2, 15, { fontSize: 18, align: 'center' });\r\n      addFormattedText(doc, 'Record Date', 140, 15, { fontSize: 12 });\r\n      addFormattedText(doc, recordData.recordDate, 170, 15, { fontSize: 12 });\r\n\r\n      doc.line(leftMargin, 20, doc.internal.pageSize.getWidth() - leftMargin, 20);\r\n\r\n      let y = 30;\r\n      addFormattedText(doc, 'Personal Information', leftMargin, 25, { fontSize: 14, fontStyle: 'bold' });\r\n\r\n      addFormattedText(doc, 'Emp No.', leftMargin, y); addFormattedText(doc, recordData.empNo, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Last Name', leftMargin, y); addFormattedText(doc, recordData.lastName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Middle Name', leftMargin, y); addFormattedText(doc, recordData.middleName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'First Name', leftMargin, y); addFormattedText(doc, recordData.firstName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Birth Date', leftMargin, y); addFormattedText(doc, recordData.birthDate, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Hire Date', leftMargin, y); addFormattedText(doc, recordData.hireDate, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Position', leftMargin, y); addFormattedText(doc, recordData.position, leftMargin + 40, y);\r\n\r\n      y = 30;\r\n      addFormattedText(doc, 'Civil Status', 120, y); addFormattedText(doc, recordData.civilStatus, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'Dependents', 120, y); addFormattedText(doc, recordData.dependents.toString(), 150, y);\r\n      y += lineHeight * 2; addFormattedText(doc, 'SSS', 120, y); addFormattedText(doc, recordData.sss, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'TIN', 120, y); addFormattedText(doc, recordData.tin, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'Philhealth', 120, y); addFormattedText(doc, recordData.philhealth, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'HDMF', 120, y); addFormattedText(doc, recordData.hdmf, 150, y);\r\n\r\n      addFormattedText(doc, 'This is a computer-generated employee record, no signature required.', doc.internal.pageSize.getWidth() / 2, 270, { fontSize: 10, align: 'center' });\r\n\r\n      return doc.output('blob');\r\n    },\r\n    onIframeLoad() {\r\n      console.log('iFrame loaded successfully');\r\n      this.iframeError = false;\r\n    },\r\n    onIframeError() {\r\n      console.error('iFrame failed to load');\r\n      this.iframeError = true;\r\n    },\r\n    showSuccessMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    },\r\n    showErrorMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    },\r\n    formatDate(date) {\r\n      return moment(date).format('MMM DD, YYYY');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Outlined');\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\nbutton:disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.transition-all {\r\n  transition: all 0.2s ease-in-out;\r\n}\r\n\r\n.hover\\:bg-gray-50:hover {\r\n  background-color: #f9fafb;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}