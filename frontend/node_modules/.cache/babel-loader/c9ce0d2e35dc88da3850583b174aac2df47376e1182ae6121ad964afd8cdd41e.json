{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nexport default {\n  name: 'EmployeeSalarySlip',\n  data() {\n    return {\n      employee: null,\n      isGenerating: false,\n      isSending: false,\n      statusMessage: ''\n    };\n  },\n  mounted() {\n    this.fetchEmployeeData();\n  },\n  methods: {\n    async fetchEmployeeData() {\n      try {\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n          this.statusMessage = 'User not logged in. Please log in to view your salary slip.';\n          setTimeout(() => this.statusMessage = '', 3000);\n          this.$router.push('/login');\n          return;\n        }\n        const response = await axios.get(`http://localhost:7777/api/employees/${userId}/salary`);\n        this.employee = response.data || {};\n      } catch (error) {\n        console.error('Error fetching employee data:', error);\n        this.statusMessage = 'Failed to load salary slip. Please try again.';\n        setTimeout(() => this.statusMessage = '', 3000);\n      }\n    },\n    async generatePayslip() {\n      this.isGenerating = true;\n      this.statusMessage = '';\n      try {\n        if (!this.employee) throw new Error('No employee data available');\n\n        // Generate PDF using jsPDF\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text('Salary Slip', 20, 20);\n        doc.setFontSize(12);\n        doc.text(`ID: ${this.employee.id}`, 20, 40);\n        doc.text(`Name: ${this.employee.name}`, 20, 50);\n        doc.text(`Period: ${this.employee.salaryMonth}`, 20, 60);\n        doc.text(`Total Earnings: ₱${this.employee.totalEarnings.toLocaleString()}`, 20, 70);\n        doc.text(`Total Deductions: ₱${this.employee.totalDeductions.toLocaleString()}`, 20, 80);\n        doc.text(`Net Salary: ₱${this.employee.totalSalary.toLocaleString()}`, 20, 90);\n        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 100);\n\n        // Convert PDF to blob\n        const pdfBlob = doc.output('blob');\n        const reader = new FileReader();\n        reader.readAsDataURL(pdfBlob);\n        reader.onloadend = async () => {\n          const base64data = reader.result;\n\n          // Save to localStorage (optional, for employee reference)\n          localStorage.setItem(`payslip_${this.employee.id}_${this.employee.salaryMonth}`, base64data);\n\n          // Trigger download\n          const link = document.createElement('a');\n          link.href = URL.createObjectURL(pdfBlob);\n          link.download = `payslip-${this.employee.name}-${this.employee.salaryMonth}.pdf`;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          // Update backend (optional: mark payslip as generated)\n          await axios.post(`http://localhost:7777/api/payslips/generate`, {\n            employeeId: this.employee.id,\n            payslipData: base64data,\n            salaryMonth: this.employee.salaryMonth\n          });\n          this.statusMessage = 'Payslip generated successfully!';\n        };\n      } catch (error) {\n        console.error('Error generating payslip:', error);\n        this.statusMessage = 'Failed to generate payslip. Please try again.';\n      } finally {\n        this.isGenerating = false;\n        setTimeout(() => this.statusMessage = '', 3000);\n      }\n    },\n    async sendPayslipEmail() {\n      this.isSending = true;\n      this.statusMessage = '';\n      try {\n        if (!this.employee) throw new Error('No employee data available');\n        const payslipKey = `payslip_${this.employee.id}_${this.employee.salaryMonth}`;\n        let payslipData = localStorage.getItem(payslipKey);\n        if (!payslipData) {\n          await this.generatePayslip();\n          payslipData = localStorage.getItem(payslipKey);\n        }\n        const response = await axios.post(`http://localhost:7777/api/payslips/send-email`, {\n          employeeId: this.employee.id,\n          employeeEmail: this.employee.email,\n          payslipData: payslipData,\n          salaryMonth: this.employee.salaryMonth\n        });\n        if (response.status === 200) {\n          this.statusMessage = 'Payslip sent to your email successfully!';\n        }\n      } catch (error) {\n        console.error('Error sending payslip email:', error);\n        this.statusMessage = 'Failed to send payslip email. Please try again.';\n      } finally {\n        this.isSending = false;\n        setTimeout(() => this.statusMessage = '', 3000);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","jsPDF","name","data","employee","isGenerating","isSending","statusMessage","mounted","fetchEmployeeData","methods","userId","localStorage","getItem","setTimeout","$router","push","response","get","error","console","generatePayslip","Error","doc","setFontSize","text","id","salaryMonth","totalEarnings","toLocaleString","totalDeductions","totalSalary","Date","toLocaleDateString","pdfBlob","output","reader","FileReader","readAsDataURL","onloadend","base64data","result","setItem","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","post","employeeId","payslipData","sendPayslipEmail","payslipKey","employeeEmail","email","status"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\employee\\EmployeeSalarySlips.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <div class=\"bg-white p-6 rounded-xl shadow-md\">\r\n        <h2 class=\"text-2xl font-semibold mb-6 text-gray-900\">My Salary Slip</h2>\r\n\r\n        <table class=\"min-w-full border border-gray-300\">\r\n          <thead class=\"bg-gray-200\">\r\n            <tr>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Name</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Earnings</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Deductions</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Net Salary</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Period</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-if=\"employee\" class=\"hover:bg-gray-50\">\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.id }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.totalEarnings.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.totalDeductions.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm font-bold text-gray-900\">₱{{ employee.totalSalary.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.salaryMonth }}</td>\r\n              <td class=\"border px-4 py-2 text-sm\">\r\n                <button \r\n                  @click=\"generatePayslip\" \r\n                  class=\"bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-700 transition-all duration-200 mr-2\"\r\n                  :disabled=\"isGenerating\"\r\n                >\r\n                  {{ isGenerating ? 'Generating...' : 'Generate Payslip' }}\r\n                </button>\r\n                <button \r\n                  @click=\"sendPayslipEmail\" \r\n                  class=\"bg-green-500 text-white px-3 py-1 rounded hover:bg-green-700 transition-all duration-200\"\r\n                  :disabled=\"isSending\"\r\n                >\r\n                  {{ isSending ? 'Sending...' : 'Send Email' }}\r\n                </button>\r\n              </td>\r\n            </tr>\r\n            <tr v-else>\r\n              <td colspan=\"7\" class=\"text-center py-4 text-gray-500\">Loading employee data...</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <!-- Status Message -->\r\n        <div \r\n          v-if=\"statusMessage\" \r\n          :class=\"statusMessage.includes('successfully') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\"\r\n          class=\"mt-4 p-3 rounded-lg text-center\"\r\n        >\r\n          {{ statusMessage }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\n\r\nexport default {\r\n  name: 'EmployeeSalarySlip',\r\n  data() {\r\n    return {\r\n      employee: null,\r\n      isGenerating: false,\r\n      isSending: false,\r\n      statusMessage: ''\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchEmployeeData();\r\n  },\r\n  methods: {\r\n    async fetchEmployeeData() {\r\n      try {\r\n        const userId = localStorage.getItem('userId');\r\n        if (!userId) {\r\n          this.statusMessage = 'User not logged in. Please log in to view your salary slip.';\r\n          setTimeout(() => this.statusMessage = '', 3000);\r\n          this.$router.push('/login');\r\n          return;\r\n        }\r\n\r\n        const response = await axios.get(`http://localhost:7777/api/employees/${userId}/salary`);\r\n        this.employee = response.data || {};\r\n      } catch (error) {\r\n        console.error('Error fetching employee data:', error);\r\n        this.statusMessage = 'Failed to load salary slip. Please try again.';\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n      }\r\n    },\r\n    async generatePayslip() {\r\n      this.isGenerating = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        if (!this.employee) throw new Error('No employee data available');\r\n\r\n        // Generate PDF using jsPDF\r\n        const doc = new jsPDF();\r\n        doc.setFontSize(16);\r\n        doc.text('Salary Slip', 20, 20);\r\n        \r\n        doc.setFontSize(12);\r\n        doc.text(`ID: ${this.employee.id}`, 20, 40);\r\n        doc.text(`Name: ${this.employee.name}`, 20, 50);\r\n        doc.text(`Period: ${this.employee.salaryMonth}`, 20, 60);\r\n        doc.text(`Total Earnings: ₱${this.employee.totalEarnings.toLocaleString()}`, 20, 70);\r\n        doc.text(`Total Deductions: ₱${this.employee.totalDeductions.toLocaleString()}`, 20, 80);\r\n        doc.text(`Net Salary: ₱${this.employee.totalSalary.toLocaleString()}`, 20, 90);\r\n        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 100);\r\n\r\n        // Convert PDF to blob\r\n        const pdfBlob = doc.output('blob');\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(pdfBlob);\r\n        reader.onloadend = async () => {\r\n          const base64data = reader.result;\r\n\r\n          // Save to localStorage (optional, for employee reference)\r\n          localStorage.setItem(`payslip_${this.employee.id}_${this.employee.salaryMonth}`, base64data);\r\n\r\n          // Trigger download\r\n          const link = document.createElement('a');\r\n          link.href = URL.createObjectURL(pdfBlob);\r\n          link.download = `payslip-${this.employee.name}-${this.employee.salaryMonth}.pdf`;\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n\r\n          // Update backend (optional: mark payslip as generated)\r\n          await axios.post(`http://localhost:7777/api/payslips/generate`, {\r\n            employeeId: this.employee.id,\r\n            payslipData: base64data,\r\n            salaryMonth: this.employee.salaryMonth\r\n          });\r\n\r\n          this.statusMessage = 'Payslip generated successfully!';\r\n        };\r\n      } catch (error) {\r\n        console.error('Error generating payslip:', error);\r\n        this.statusMessage = 'Failed to generate payslip. Please try again.';\r\n      } finally {\r\n        this.isGenerating = false;\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n      }\r\n    },\r\n    async sendPayslipEmail() {\r\n      this.isSending = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        if (!this.employee) throw new Error('No employee data available');\r\n\r\n        const payslipKey = `payslip_${this.employee.id}_${this.employee.salaryMonth}`;\r\n        let payslipData = localStorage.getItem(payslipKey);\r\n\r\n        if (!payslipData) {\r\n          await this.generatePayslip();\r\n          payslipData = localStorage.getItem(payslipKey);\r\n        }\r\n\r\n        const response = await axios.post(`http://localhost:7777/api/payslips/send-email`, {\r\n          employeeId: this.employee.id,\r\n          employeeEmail: this.employee.email,\r\n          payslipData: payslipData,\r\n          salaryMonth: this.employee.salaryMonth\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.statusMessage = 'Payslip sent to your email successfully!';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending payslip email:', error);\r\n        this.statusMessage = 'Failed to send payslip email. Please try again.';\r\n      } finally {\r\n        this.isSending = false;\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ntable {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\nbutton:disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.transition-all {\r\n  transition: all 0.2s ease-in-out;\r\n}\r\n\r\n.hover\\:bg-gray-50:hover {\r\n  background-color: #f9fafb;\r\n}\r\n</style>"],"mappings":";;;;AA+DA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,KAAK;MACnBC,SAAS,EAAE,KAAK;MAChBC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAME,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;QAC7C,IAAI,CAACF,MAAM,EAAE;UACX,IAAI,CAACJ,aAAY,GAAI,6DAA6D;UAClFO,UAAU,CAAC,MAAM,IAAI,CAACP,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;UAC/C,IAAI,CAACQ,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;UAC3B;QACF;QAEA,MAAMC,QAAO,GAAI,MAAMjB,KAAK,CAACkB,GAAG,CAAC,uCAAuCP,MAAM,SAAS,CAAC;QACxF,IAAI,CAACP,QAAO,GAAIa,QAAQ,CAACd,IAAG,IAAK,CAAC,CAAC;MACrC,EAAE,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,IAAI,CAACZ,aAAY,GAAI,+CAA+C;QACpEO,UAAU,CAAC,MAAM,IAAI,CAACP,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;MACjD;IACF,CAAC;IACD,MAAMc,eAAeA,CAAA,EAAG;MACtB,IAAI,CAAChB,YAAW,GAAI,IAAI;MACxB,IAAI,CAACE,aAAY,GAAI,EAAE;MACvB,IAAI;QACF,IAAI,CAAC,IAAI,CAACH,QAAQ,EAAE,MAAM,IAAIkB,KAAK,CAAC,4BAA4B,CAAC;;QAEjE;QACA,MAAMC,GAAE,GAAI,IAAItB,KAAK,CAAC,CAAC;QACvBsB,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;QACnBD,GAAG,CAACE,IAAI,CAAC,aAAa,EAAE,EAAE,EAAE,EAAE,CAAC;QAE/BF,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC;QACnBD,GAAG,CAACE,IAAI,CAAC,OAAO,IAAI,CAACrB,QAAQ,CAACsB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAC3CH,GAAG,CAACE,IAAI,CAAC,SAAS,IAAI,CAACrB,QAAQ,CAACF,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAC/CqB,GAAG,CAACE,IAAI,CAAC,WAAW,IAAI,CAACrB,QAAQ,CAACuB,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QACxDJ,GAAG,CAACE,IAAI,CAAC,oBAAoB,IAAI,CAACrB,QAAQ,CAACwB,aAAa,CAACC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QACpFN,GAAG,CAACE,IAAI,CAAC,sBAAsB,IAAI,CAACrB,QAAQ,CAAC0B,eAAe,CAACD,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QACxFN,GAAG,CAACE,IAAI,CAAC,gBAAgB,IAAI,CAACrB,QAAQ,CAAC2B,WAAW,CAACF,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QAC9EN,GAAG,CAACE,IAAI,CAAC,iBAAiB,IAAIO,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;;QAErE;QACA,MAAMC,OAAM,GAAIX,GAAG,CAACY,MAAM,CAAC,MAAM,CAAC;QAClC,MAAMC,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,aAAa,CAACJ,OAAO,CAAC;QAC7BE,MAAM,CAACG,SAAQ,GAAI,YAAY;UAC7B,MAAMC,UAAS,GAAIJ,MAAM,CAACK,MAAM;;UAEhC;UACA7B,YAAY,CAAC8B,OAAO,CAAC,WAAW,IAAI,CAACtC,QAAQ,CAACsB,EAAE,IAAI,IAAI,CAACtB,QAAQ,CAACuB,WAAW,EAAE,EAAEa,UAAU,CAAC;;UAE5F;UACA,MAAMG,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;UACxCF,IAAI,CAACG,IAAG,GAAIC,GAAG,CAACC,eAAe,CAACd,OAAO,CAAC;UACxCS,IAAI,CAACM,QAAO,GAAI,WAAW,IAAI,CAAC7C,QAAQ,CAACF,IAAI,IAAI,IAAI,CAACE,QAAQ,CAACuB,WAAW,MAAM;UAChFiB,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,IAAI,CAAC;UAC/BA,IAAI,CAACS,KAAK,CAAC,CAAC;UACZR,QAAQ,CAACM,IAAI,CAACG,WAAW,CAACV,IAAI,CAAC;;UAE/B;UACA,MAAM3C,KAAK,CAACsD,IAAI,CAAC,6CAA6C,EAAE;YAC9DC,UAAU,EAAE,IAAI,CAACnD,QAAQ,CAACsB,EAAE;YAC5B8B,WAAW,EAAEhB,UAAU;YACvBb,WAAW,EAAE,IAAI,CAACvB,QAAQ,CAACuB;UAC7B,CAAC,CAAC;UAEF,IAAI,CAACpB,aAAY,GAAI,iCAAiC;QACxD,CAAC;MACH,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,IAAI,CAACZ,aAAY,GAAI,+CAA+C;MACtE,UAAU;QACR,IAAI,CAACF,YAAW,GAAI,KAAK;QACzBS,UAAU,CAAC,MAAM,IAAI,CAACP,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;MACjD;IACF,CAAC;IACD,MAAMkD,gBAAgBA,CAAA,EAAG;MACvB,IAAI,CAACnD,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACC,aAAY,GAAI,EAAE;MACvB,IAAI;QACF,IAAI,CAAC,IAAI,CAACH,QAAQ,EAAE,MAAM,IAAIkB,KAAK,CAAC,4BAA4B,CAAC;QAEjE,MAAMoC,UAAS,GAAI,WAAW,IAAI,CAACtD,QAAQ,CAACsB,EAAE,IAAI,IAAI,CAACtB,QAAQ,CAACuB,WAAW,EAAE;QAC7E,IAAI6B,WAAU,GAAI5C,YAAY,CAACC,OAAO,CAAC6C,UAAU,CAAC;QAElD,IAAI,CAACF,WAAW,EAAE;UAChB,MAAM,IAAI,CAACnC,eAAe,CAAC,CAAC;UAC5BmC,WAAU,GAAI5C,YAAY,CAACC,OAAO,CAAC6C,UAAU,CAAC;QAChD;QAEA,MAAMzC,QAAO,GAAI,MAAMjB,KAAK,CAACsD,IAAI,CAAC,+CAA+C,EAAE;UACjFC,UAAU,EAAE,IAAI,CAACnD,QAAQ,CAACsB,EAAE;UAC5BiC,aAAa,EAAE,IAAI,CAACvD,QAAQ,CAACwD,KAAK;UAClCJ,WAAW,EAAEA,WAAW;UACxB7B,WAAW,EAAE,IAAI,CAACvB,QAAQ,CAACuB;QAC7B,CAAC,CAAC;QAEF,IAAIV,QAAQ,CAAC4C,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACtD,aAAY,GAAI,0CAA0C;QACjE;MACF,EAAE,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,IAAI,CAACZ,aAAY,GAAI,iDAAiD;MACxE,UAAU;QACR,IAAI,CAACD,SAAQ,GAAI,KAAK;QACtBQ,UAAU,CAAC,MAAM,IAAI,CAACP,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;MACjD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}