{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'SalarySlips',\n  data() {\n    return {\n      employees: [{\n        id: 1,\n        name: 'John Doe',\n        totalEarnings: 50000,\n        totalDeductions: 5000,\n        totalSalary: 45000,\n        salaryMonth: '02/20/2025',\n        email: 'stevenruelo20@gmail.com'\n      }\n      // ... other employees\n      ],\n      searchQuery: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      showDialog: false,\n      isLoading: false,\n      emailStatus: {\n        message: '',\n        isError: false\n      }\n    };\n  },\n  computed: {\n    // ... previous computed properties remain the same\n  },\n  methods: {\n    async generatePayslipHTML(employee) {\n      // Generate HTML content for the payslip\n      return `\n        <html>\n        <head>\n          <style>\n            body { font-family: Arial, sans-serif; }\n            .header { text-align: center; margin-bottom: 20px; }\n            .details { margin: 20px 0; }\n            .table { width: 100%; border-collapse: collapse; }\n            .table th, .table td { border: 1px solid #ddd; padding: 8px; }\n            .total { margin-top: 20px; text-align: right; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Payslip</h1>\n            <p>For the month of ${employee.salaryMonth}</p>\n          </div>\n          <div class=\"details\">\n            <p><strong>Employee Name:</strong> ${employee.name}</p>\n            <p><strong>Email:</strong> ${employee.email}</p>\n          </div>\n          <table class=\"table\">\n            <tr>\n              <th>Description</th>\n              <th>Amount</th>\n            </tr>\n            <tr>\n              <td>Total Earnings</td>\n              <td>P${employee.totalEarnings.toLocaleString()}</td>\n            </tr>\n            <tr>\n              <td>Total Deductions</td>\n              <td>P${employee.totalDeductions.toLocaleString()}</td>\n            </tr>\n            <tr>\n              <td><strong>Net Salary</strong></td>\n              <td><strong>P${employee.totalSalary.toLocaleString()}</strong></td>\n            </tr>\n          </table>\n          <div class=\"total\">\n            <p><strong>Net Pay: P${employee.totalSalary.toLocaleString()}</strong></p>\n          </div>\n        </body>\n        </html>\n      `;\n    },\n    async generateAndSendPayslip(employee) {\n      this.isLoading = true;\n      this.emailStatus.isError = false;\n      this.emailStatus.message = 'Generating and sending payslip...';\n      this.showDialog = true;\n      try {\n        const payslipHTML = await this.generatePayslipHTML(employee);\n\n        // Send email using your backend API\n        const response = await axios.post('/api/send-payslip', {\n          to: employee.email,\n          subject: `Payslip for ${employee.salaryMonth}`,\n          html: payslipHTML,\n          employeeName: employee.name\n        });\n        this.emailStatus.message = `Payslip successfully sent to ${employee.email}`;\n        this.emailStatus.isError = false;\n      } catch (error) {\n        console.error('Error sending payslip:', error);\n        this.emailStatus.message = 'Failed to send payslip. Please try again later.';\n        this.emailStatus.isError = true;\n      } finally {\n        this.isLoading = false;\n      }\n    }\n\n    // ... previous pagination methods remain the same\n  }\n};","map":{"version":3,"names":["axios","name","data","employees","id","totalEarnings","totalDeductions","totalSalary","salaryMonth","email","searchQuery","currentPage","itemsPerPage","showDialog","isLoading","emailStatus","message","isError","computed","methods","generatePayslipHTML","employee","toLocaleString","generateAndSendPayslip","payslipHTML","response","post","to","subject","html","employeeName","error","console"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\admind\\SalarySlips.vue"],"sourcesContent":["<!-- Frontend: SalarySlips.vue -->\r\n<template>\r\n  <!-- Previous template code remains the same until the email sending button -->\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Search Input -->\r\n      <div class=\"flex justify-between items-center mb-4\">\r\n        <input\r\n          v-model=\"searchQuery\"\r\n          type=\"text\"\r\n          placeholder=\"Search Employee...\"\r\n          class=\"border rounded-lg px-4 py-2 w-1/3\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Salary Table -->\r\n      <div class=\"bg-white p-5 rounded-xl shadow-md\">\r\n        <table class=\"min-w-full divide-y divide-gray-200\">\r\n          <!-- ... previous table headers ... -->\r\n          <tbody class=\"bg-white divide-y divide-gray-200\">\r\n            <tr v-for=\"employee in paginatedEmployees\" :key=\"employee.id\">\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P{{ employee.totalEarnings.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P{{ employee.totalDeductions.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P{{ employee.totalSalary.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ employee.salaryMonth }}</td>\r\n              <td class=\"px-6 py-4 text-sm font-medium flex gap-2\">\r\n                <button \r\n                  @click=\"generateAndSendPayslip(employee)\" \r\n                  :disabled=\"isLoading\"\r\n                  class=\"bg-blue-50 text-blue-600 font-semibold py-1.5 px-3 rounded-lg hover:bg-blue-100 transition-all duration-200 flex items-center gap-2 text-xs disabled:opacity-50\"\r\n                >\r\n                  <span class=\"material-icons text-blue-600\" v-if=\"!isLoading\">email</span>\r\n                  <span class=\"material-icons animate-spin text-blue-600\" v-else>refresh</span>\r\n                  {{ isLoading ? 'Sending...' : 'Send Payslip' }}\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <!-- Pagination Controls -->\r\n      <div class=\"flex justify-center items-center mt-4 gap-4\">\r\n        <button \r\n          @click=\"prevPage\"\r\n          :disabled=\"currentPage === 1\"\r\n          class=\"bg-gray-200 p-2 rounded-full hover:bg-gray-300 transition disabled:opacity-50\"\r\n        >\r\n          <span class=\"material-icons\">chevron_left</span>\r\n        </button>\r\n        \r\n        <span class=\"text-gray-700\">Page {{ currentPage }} of {{ totalPages }}</span>\r\n        \r\n        <button \r\n          @click=\"nextPage\"\r\n          :disabled=\"currentPage === totalPages\"\r\n          class=\"bg-gray-200 p-2 rounded-full hover:bg-gray-300 transition disabled:opacity-50\"\r\n        >\r\n          <span class=\"material-icons\">chevron_right</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Status Dialog -->\r\n    <div v-if=\"showDialog\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n      <div class=\"bg-white rounded-lg p-6 max-w-md w-full mx-4\">\r\n        <h3 class=\"text-lg font-medium mb-2\">\r\n          {{ emailStatus.isError ? 'Error' : 'Email Status' }}\r\n        </h3>\r\n        <p class=\"text-gray-600 mb-4\">{{ emailStatus.message }}</p>\r\n        <div class=\"flex justify-end\">\r\n          <button \r\n            @click=\"showDialog = false\"\r\n            class=\"bg-gray-100 px-4 py-2 rounded-lg hover:bg-gray-200 transition\"\r\n          >\r\n            OK\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'SalarySlips',\r\n  data() {\r\n    return {\r\n      employees: [\r\n        { id: 1, name: 'John Doe', totalEarnings: 50000, totalDeductions: 5000, totalSalary: 45000, salaryMonth: '02/20/2025', email: 'stevenruelo20@gmail.com' },\r\n        // ... other employees\r\n      ],\r\n      searchQuery: '',\r\n      currentPage: 1,\r\n      itemsPerPage: 10,\r\n      showDialog: false,\r\n      isLoading: false,\r\n      emailStatus: {\r\n        message: '',\r\n        isError: false\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    // ... previous computed properties remain the same\r\n  },\r\n  methods: {\r\n    async generatePayslipHTML(employee) {\r\n      // Generate HTML content for the payslip\r\n      return `\r\n        <html>\r\n        <head>\r\n          <style>\r\n            body { font-family: Arial, sans-serif; }\r\n            .header { text-align: center; margin-bottom: 20px; }\r\n            .details { margin: 20px 0; }\r\n            .table { width: 100%; border-collapse: collapse; }\r\n            .table th, .table td { border: 1px solid #ddd; padding: 8px; }\r\n            .total { margin-top: 20px; text-align: right; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"header\">\r\n            <h1>Payslip</h1>\r\n            <p>For the month of ${employee.salaryMonth}</p>\r\n          </div>\r\n          <div class=\"details\">\r\n            <p><strong>Employee Name:</strong> ${employee.name}</p>\r\n            <p><strong>Email:</strong> ${employee.email}</p>\r\n          </div>\r\n          <table class=\"table\">\r\n            <tr>\r\n              <th>Description</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n            <tr>\r\n              <td>Total Earnings</td>\r\n              <td>P${employee.totalEarnings.toLocaleString()}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Total Deductions</td>\r\n              <td>P${employee.totalDeductions.toLocaleString()}</td>\r\n            </tr>\r\n            <tr>\r\n              <td><strong>Net Salary</strong></td>\r\n              <td><strong>P${employee.totalSalary.toLocaleString()}</strong></td>\r\n            </tr>\r\n          </table>\r\n          <div class=\"total\">\r\n            <p><strong>Net Pay: P${employee.totalSalary.toLocaleString()}</strong></p>\r\n          </div>\r\n        </body>\r\n        </html>\r\n      `;\r\n    },\r\n\r\n    async generateAndSendPayslip(employee) {\r\n      this.isLoading = true;\r\n      this.emailStatus.isError = false;\r\n      this.emailStatus.message = 'Generating and sending payslip...';\r\n      this.showDialog = true;\r\n\r\n      try {\r\n        const payslipHTML = await this.generatePayslipHTML(employee);\r\n        \r\n        // Send email using your backend API\r\n        const response = await axios.post('/api/send-payslip', {\r\n          to: employee.email,\r\n          subject: `Payslip for ${employee.salaryMonth}`,\r\n          html: payslipHTML,\r\n          employeeName: employee.name\r\n        });\r\n\r\n        this.emailStatus.message = `Payslip successfully sent to ${employee.email}`;\r\n        this.emailStatus.isError = false;\r\n      } catch (error) {\r\n        console.error('Error sending payslip:', error);\r\n        this.emailStatus.message = 'Failed to send payslip. Please try again later.';\r\n        this.emailStatus.isError = true;\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n\r\n    // ... previous pagination methods remain the same\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\r\n</style>"],"mappings":"AAqFA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,CACT;QAAEC,EAAE,EAAE,CAAC;QAAEH,IAAI,EAAE,UAAU;QAAEI,aAAa,EAAE,KAAK;QAAEC,eAAe,EAAE,IAAI;QAAEC,WAAW,EAAE,KAAK;QAAEC,WAAW,EAAE,YAAY;QAAEC,KAAK,EAAE;MAA0B;MACxJ;MAAA,CACD;MACDC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,CAAC;MACdC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAE;QACXC,OAAO,EAAE,EAAE;QACXC,OAAO,EAAE;MACX;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,OAAO,EAAE;IACP,MAAMC,mBAAmBA,CAACC,QAAQ,EAAE;MAClC;MACA,OAAO;;;;;;;;;;;;;;;kCAeqBA,QAAQ,CAACb,WAAW;;;iDAGLa,QAAQ,CAACpB,IAAI;yCACrBoB,QAAQ,CAACZ,KAAK;;;;;;;;;qBASlCY,QAAQ,CAAChB,aAAa,CAACiB,cAAc,CAAC,CAAC;;;;qBAIvCD,QAAQ,CAACf,eAAe,CAACgB,cAAc,CAAC,CAAC;;;;6BAIjCD,QAAQ,CAACd,WAAW,CAACe,cAAc,CAAC,CAAC;;;;mCAI/BD,QAAQ,CAACd,WAAW,CAACe,cAAc,CAAC,CAAC;;;;OAIjE;IACH,CAAC;IAED,MAAMC,sBAAsBA,CAACF,QAAQ,EAAE;MACrC,IAAI,CAACP,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACC,WAAW,CAACE,OAAM,GAAI,KAAK;MAChC,IAAI,CAACF,WAAW,CAACC,OAAM,GAAI,mCAAmC;MAC9D,IAAI,CAACH,UAAS,GAAI,IAAI;MAEtB,IAAI;QACF,MAAMW,WAAU,GAAI,MAAM,IAAI,CAACJ,mBAAmB,CAACC,QAAQ,CAAC;;QAE5D;QACA,MAAMI,QAAO,GAAI,MAAMzB,KAAK,CAAC0B,IAAI,CAAC,mBAAmB,EAAE;UACrDC,EAAE,EAAEN,QAAQ,CAACZ,KAAK;UAClBmB,OAAO,EAAE,eAAeP,QAAQ,CAACb,WAAW,EAAE;UAC9CqB,IAAI,EAAEL,WAAW;UACjBM,YAAY,EAAET,QAAQ,CAACpB;QACzB,CAAC,CAAC;QAEF,IAAI,CAACc,WAAW,CAACC,OAAM,GAAI,gCAAgCK,QAAQ,CAACZ,KAAK,EAAE;QAC3E,IAAI,CAACM,WAAW,CAACE,OAAM,GAAI,KAAK;MAClC,EAAE,OAAOc,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,IAAI,CAAChB,WAAW,CAACC,OAAM,GAAI,iDAAiD;QAC5E,IAAI,CAACD,WAAW,CAACE,OAAM,GAAI,IAAI;MACjC,UAAU;QACR,IAAI,CAACH,SAAQ,GAAI,KAAK;MACxB;IACF;;IAEA;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}