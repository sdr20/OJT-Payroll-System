{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable'; // Use default import for compatibility\nimport moment from 'moment'; // Import moment.js for date formatting\n\n// Extend jsPDF with autoTable plugin\njsPDF.prototype.autoTable = autoTable.default;\nexport default {\n  name: 'EmployeeSalarySlip',\n  data() {\n    return {\n      employee: null,\n      selectedMonth: new Date().toISOString().slice(0, 7),\n      isGenerating: false,\n      statusMessage: '',\n      errorMessage: '',\n      showPayslipModal: false,\n      payslipDataUrl: '',\n      iframeError: false,\n      payslips: {} // Store payslip URLs locally for viewing\n    };\n  },\n  mounted() {\n    this.fetchEmployeeData();\n  },\n  methods: {\n    async fetchEmployeeData() {\n      try {\n        const userId = localStorage.getItem('userId');\n        if (!userId) {\n          this.errorMessage = 'User not logged in. Redirecting to login...';\n          setTimeout(() => {\n            this.$router.push('/login');\n          }, 2000);\n          return;\n        }\n        const response = await axios.get(`http://localhost:7777/api/employees/${userId}/salary`, {\n          params: {\n            month: this.selectedMonth\n          }\n        });\n        if (!response.data) {\n          throw new Error('No salary data returned from server');\n        }\n        this.employee = response.data;\n      } catch (error) {\n        console.error('Error fetching employee data:', error);\n        this.errorMessage = 'Failed to load salary slip. Please check your connection or try again later.';\n        this.employee = null; // Ensure employee stays null to show error state\n      }\n    },\n    async generatePayslip() {\n      if (!this.employee) {\n        this.statusMessage = 'No employee data available to generate payslip.';\n        setTimeout(() => this.statusMessage = '', 3000);\n        return;\n      }\n      this.isGenerating = true;\n      this.statusMessage = '';\n      try {\n        const payslipData = this.createPayslipData(this.employee);\n        const pdfBlob = await this.generatePdf(payslipData);\n        const url = URL.createObjectURL(pdfBlob);\n        this.payslips[`${this.employee.id}_${this.employee.salaryMonth}`] = url;\n        this.payslipDataUrl = url;\n        this.showSuccessMessage('Payslip generated successfully!');\n      } catch (error) {\n        console.error('Error generating payslip:', error);\n        this.statusMessage = 'Failed to generate payslip. Please try again.';\n      } finally {\n        this.isGenerating = false;\n        setTimeout(() => this.statusMessage = '', 3000);\n      }\n    },\n    viewPayslip() {\n      if (!this.payslipDataUrl) {\n        this.statusMessage = 'Please generate the payslip first.';\n        setTimeout(() => this.statusMessage = '', 3000);\n        return;\n      }\n      this.showPayslipModal = true;\n      this.iframeError = false;\n      this.showSuccessMessage(`Viewing payslip for ${this.employee.name} for ${this.employee.salaryMonth}`);\n    },\n    createPayslipData(employee) {\n      const salaryDate = moment(employee.salaryMonth, 'MM/YYYY').format('MM/DD/YYYY');\n      const basicSalary = employee.salary || 0 || 0;\n      const sss = this.calculateSSSContribution(employee.salary) || 0;\n      const philhealth = this.calculatePhilHealthContribution(employee.salary) || 0;\n      const hdmf = this.calculatePagIBIGContribution(employee.salary) || 0;\n      const totalDeductions = sss + philhealth + hdmf + (this.calculateWithholdingTax(employee) || 0) || 0;\n      const netSalary = employee.totalSalary || this.calculateNetSalary(employee) || 0 || 0;\n      return {\n        salaryDate,\n        id: employee.id,\n        name: employee.name,\n        hourlyRate: employee.hourlyRate || employee.salary / (8 * 22) || 0,\n        totalEarnings: employee.totalEarnings || 0,\n        totalDeductions: totalDeductions,\n        totalSalary: netSalary,\n        salaryMonth: employee.salaryMonth,\n        empNo: employee.empNo || 'N/A',\n        lastName: employee.lastName || 'N/A',\n        middleName: employee.middleName || 'N/A',\n        firstName: employee.firstName || 'N/A',\n        birthDate: employee.birthDate ? moment(employee.birthDate).format('MM/DD/YYYY') : 'N/A',\n        hireDate: employee.hireDate ? moment(employee.hireDate).format('MM/DD/YYYY') : 'N/A',\n        civilStatus: employee.civilStatus || 'SINGLE',\n        dependents: employee.dependents || 0,\n        sss: employee.sss || 'N/A',\n        tin: employee.tin || 'N/A',\n        philhealth: employee.philhealth || 'N/A',\n        hdmf: employee.hdmf || 'N/A',\n        position: employee.position || 'N/A',\n        basicSalary: this.formatNumber(basicSalary),\n        sssDeduction: this.formatNumber(sss),\n        philhealthDeduction: this.formatNumber(philhealth),\n        hdmfDeduction: this.formatNumber(hdmf),\n        withholdingTax: this.formatNumber(this.calculateWithholdingTax(employee) || 0),\n        payheads: employee.payheads || [] // Include dynamic payheads\n      };\n    },\n    formatNumber(value) {\n      const num = Number(value) || 0;\n      return num.toFixed(2);\n    },\n    async generatePdf(payslipData) {\n      const doc = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4'\n      });\n      const lineHeight = 8; // Increased vertical spacing for better readability\n      const leftMargin = 14; // Standard left margin\n\n      // Helper function to add formatted text\n      function addFormattedText(doc, text, x, y, options = {}) {\n        doc.setFontSize(options.fontSize || 12); // Default to larger font for readability\n        doc.setFont(undefined, options.fontStyle || 'normal');\n        doc.setTextColor(options.textColor ? options.textColor[0] : 0, options.textColor ? options.textColor[1] : 0, options.textColor ? options.textColor[2] : 0); // Use array for RGB\n        doc.text(text, x, y, {\n          align: options.align || 'left'\n        });\n      }\n\n      // Header: RIGHTJOB Solutions in green, PAYSLIP centered\n      addFormattedText(doc, 'RIGHTJOB Solutions', leftMargin, 15, {\n        fontSize: 16,\n        fontStyle: 'bold',\n        textColor: [0, 128, 0]\n      });\n      addFormattedText(doc, 'PAYSLIP', doc.internal.pageSize.getWidth() / 2, 15, {\n        fontSize: 18,\n        align: 'center'\n      });\n      addFormattedText(doc, 'Salary Date', 140, 15, {\n        fontSize: 12\n      });\n      addFormattedText(doc, payslipData.salaryDate, 170, 15, {\n        fontSize: 12\n      });\n\n      // Line Separator\n      doc.line(leftMargin, 20, doc.internal.pageSize.getWidth() - leftMargin, 20);\n\n      // Personal Information\n      let y = 30;\n      addFormattedText(doc, 'Personal Information', leftMargin, 25, {\n        fontSize: 14,\n        fontStyle: 'bold'\n      });\n\n      // Left Column (Employee Details)\n      addFormattedText(doc, 'Emp No.', leftMargin, y);\n      addFormattedText(doc, payslipData.empNo, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Last Name', leftMargin, y);\n      addFormattedText(doc, payslipData.lastName, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Middle Name', leftMargin, y);\n      addFormattedText(doc, payslipData.middleName, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'First Name', leftMargin, y);\n      addFormattedText(doc, payslipData.firstName, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Birth Date', leftMargin, y);\n      addFormattedText(doc, payslipData.birthDate, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Hire Date', leftMargin, y);\n      addFormattedText(doc, payslipData.hireDate, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Position', leftMargin, y);\n      addFormattedText(doc, payslipData.position, leftMargin + 40, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Basic Salary', leftMargin, y);\n      addFormattedText(doc, `Php${payslipData.basicSalary}`, leftMargin + 40, y);\n\n      // Right Column (Additional Info)\n      y = 30;\n      addFormattedText(doc, 'Civil Status', 120, y);\n      addFormattedText(doc, payslipData.civilStatus, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Dependents', 120, y);\n      addFormattedText(doc, payslipData.dependents.toString(), 150, y);\n      y += lineHeight * 2;\n      addFormattedText(doc, 'SSS', 120, y);\n      addFormattedText(doc, payslipData.sss, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'TIN', 120, y);\n      addFormattedText(doc, payslipData.tin, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'Philhealth', 120, y);\n      addFormattedText(doc, payslipData.philhealth, 150, y);\n      y += lineHeight;\n      addFormattedText(doc, 'HDMF', 120, y);\n      addFormattedText(doc, payslipData.hdmf, 150, y);\n\n      // Update y to start Summary immediately after Personal Information (approx. y = 95)\n      y = 95;\n\n      // Summary (left-aligned)\n      addFormattedText(doc, 'Summary', leftMargin, y, {\n        fontSize: 14,\n        fontStyle: 'bold'\n      });\n      y += lineHeight;\n      addFormattedText(doc, 'Total Deductions', leftMargin, y);\n      addFormattedText(doc, `(Php${payslipData.totalDeductions})`, leftMargin + 50, y);\n      addFormattedText(doc, 'Salary PHP', 120, y);\n      addFormattedText(doc, `Php${payslipData.totalSalary}`, 150, y); // Match SSS, TIN, Philhealth, HDMF alignment\n      y += lineHeight;\n      addFormattedText(doc, 'Total Misc', leftMargin, y);\n      addFormattedText(doc, 'Php0.00', leftMargin + 50, y);\n\n      // Deductions (left-aligned)\n      y += lineHeight + 5;\n      addFormattedText(doc, 'Deductions', leftMargin, y, {\n        fontSize: 14,\n        fontStyle: 'bold'\n      });\n      y += lineHeight;\n      addFormattedText(doc, 'SSS', leftMargin, y);\n      addFormattedText(doc, `Php${payslipData.sssDeduction}`, leftMargin + 50, y);\n      addFormattedText(doc, 'Withholding Tax', 120, y);\n      addFormattedText(doc, `Php${payslipData.withholdingTax}`, 150, y); // Match SSS, TIN, Philhealth, HDMF alignment\n      y += lineHeight;\n      addFormattedText(doc, 'Philhealth', leftMargin, y);\n      addFormattedText(doc, `Php${payslipData.philhealthDeduction}`, leftMargin + 50, y);\n      y += lineHeight;\n      addFormattedText(doc, 'HDMF', leftMargin, y);\n      addFormattedText(doc, `Php${payslipData.hdmfDeduction}`, leftMargin + 50, y);\n\n      // Miscellaneous Computations (dynamic table based on payheads)\n      y += lineHeight + 5;\n      addFormattedText(doc, 'Miscellaneous', leftMargin, y, {\n        fontSize: 14,\n        fontStyle: 'bold'\n      });\n      y += lineHeight;\n      addFormattedText(doc, 'Computations', leftMargin, y);\n      const miscTableData = payslipData.payheads.map(payhead => [payhead.name, payhead.type === 'Earnings' ? `${payhead.amount} day(s)` : '',\n      // Customize description2 based on type\n      `Php${this.formatNumber(payhead.amount)}`]);\n      doc.autoTable({\n        startY: y + 5,\n        head: [['Description', 'description2', 'Amount']],\n        body: miscTableData,\n        theme: 'grid',\n        styles: {\n          fontSize: 12,\n          cellPadding: 3\n        },\n        columnStyles: {\n          0: {\n            cellWidth: 70\n          },\n          // Description column\n          1: {\n            cellWidth: 50\n          },\n          // description2 column (optional for Earnings)\n          2: {\n            cellWidth: 50,\n            halign: 'right'\n          } // Amount column\n        }\n      });\n\n      // Footer\n      addFormattedText(doc, 'This being a computer generated payslip, no signature required.', doc.internal.pageSize.getWidth() / 2, 270, {\n        fontSize: 10,\n        align: 'center'\n      });\n      const pdfBlob = doc.output('blob');\n      return pdfBlob;\n    },\n    onIframeLoad() {\n      console.log('iFrame loaded successfully');\n      this.iframeError = false;\n    },\n    onIframeError() {\n      console.error('iFrame failed to load');\n      this.iframeError = true;\n    },\n    showSuccessMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => this.statusMessage = '', 3000);\n    },\n    showErrorMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => this.statusMessage = '', 3000);\n    },\n    calculateHolidayPay(employee) {\n      const dailyRate = (employee.salary || 0) / 30 || 0;\n      const salaryMonth = this.formatSalaryMonth(this.selectedMonth).split(' ')[0]; // Get month (e.g., \"April\")\n      const regularHolidays = ['01/01/2025', '04/09/2025', '04/17/2025', '04/18/2025', '05/01/2025', '06/12/2025', '08/25/2025', '11/30/2025', '12/25/2025', '12/30/2025'];\n      const specialNonWorkingDays = ['02/08/2025', '04/19/2025', '08/26/2025'];\n      const isRegularHoliday = regularHolidays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('MMMM') === salaryMonth);\n      const isSpecialHoliday = specialNonWorkingDays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('MMMM') === salaryMonth);\n      if (isRegularHoliday) return dailyRate * 2 || 0; // DOLE: 200% for worked regular holiday\n      if (isSpecialHoliday) return dailyRate * 0.3 || 0; // DOLE: 30% premium for special holiday\n      return 0;\n    },\n    calculateOvertimePay(employee) {\n      const hourlyRate = employee.hourlyRate || employee.salary / (8 * 22) || 0 || 0;\n      const regularOTHours = employee.overtimeHours?.regular || 2 || 0;\n      const holidayOTHours = employee.overtimeHours?.holiday || 1 || 0;\n      const regularOTPay = regularOTHours * hourlyRate * 1.25 || 0; // DOLE: 25% OT rate\n      const holidayOTPay = holidayOTHours * hourlyRate * 1.3 || 0; // DOLE: 30% OT on holiday/rest day\n      return regularOTPay + holidayOTPay || 0;\n    },\n    calculateSSSContribution(salary) {\n      const monthlySalaryCredit = Math.min(Math.max(salary || 0, 5000), 35000) || 0; // SSS MSC cap at ₱35,000 in 2025\n      const employeeShareRate = 0.05; // 5% employee share per SSS Circular 2024-06\n      return Math.round(monthlySalaryCredit * employeeShareRate) || 0;\n    },\n    calculatePhilHealthContribution(salary) {\n      const rate = 0.05; // 5% total rate in 2025 per PhilHealth Circular\n      const monthlySalary = Math.min(salary || 0, 100000) || 0; // Cap at ₱100,000\n      return Math.round(monthlySalary * rate / 2) || 0; // 2.5% employee share\n    },\n    calculatePagIBIGContribution(salary) {\n      const rate = 0.02; // 2% employee share per Pag-IBIG Circular 460\n      const cappedSalary = Math.min(salary || 0, 10000) || 0; // Cap at ₱10,000\n      return Math.round(cappedSalary * rate) || 0; // Max ₱200\n    },\n    calculateWithholdingTax(employee) {\n      const nonTaxable = this.calculateNonTaxableIncome(employee);\n      const taxableIncome = (this.calculateTotalEarnings(employee) || 0) - (nonTaxable.totalNonTaxable || 0) || 0;\n      if (taxableIncome <= 20833) return 0;\n      if (taxableIncome <= 33333) return Math.round((taxableIncome - 20833) * 0.15) || 0; // Bracket 2: 15% over ₱20,833\n      if (taxableIncome <= 66667) return Math.round(1875 + (taxableIncome - 33333) * 0.20) || 0; // Bracket 3: ₱1,875 + 20% over ₱33,333\n      if (taxableIncome <= 166667) return Math.round(13541.80 + (taxableIncome - 66667) * 0.25) || 0; // Bracket 4: ₱13,541.80 + 25% over ₱66,667\n      if (taxableIncome <= 666667) return Math.round(90841.80 + (taxableIncome - 166667) * 0.30) || 0; // Bracket 5: ₱90,841.80 + 30% over ₱166,667\n      return Math.round(408841.80 + (taxableIncome - 666667) * 0.35) || 0; // Bracket 6: ₱408,841.80 + 35% over ₱666,667\n    },\n    calculateNonTaxableIncome(employee) {\n      const isMWE = employee.salary / 30 <= 610; // NCR minimum wage for 2025\n      const basicSalaryMWE = isMWE ? employee.salary || 0 : 0;\n      const holidayPayMWE = isMWE ? this.calculateHolidayPay(employee) || 0 : 0;\n      const overtimePayMWE = isMWE ? this.calculateOvertimePay(employee) || 0 : 0;\n      const nightShiftDiffMWE = isMWE ? employee.nightShiftDiff || 0 : 0;\n      const hazardPayMWE = isMWE ? employee.hazardPay || 0 : 0;\n      const thirteenthMonthExempt = Math.min(employee.thirteenthMonthPay || 0, 90000) || 0;\n      const deMinimis = Math.min(employee.deMinimis || 0, 10000) || 0; // De minimis limit for 2025\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0 || 0;\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0 || 0;\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0 || 0;\n      const totalNonTaxable = basicSalaryMWE + holidayPayMWE + overtimePayMWE + nightShiftDiffMWE + hazardPayMWE + thirteenthMonthExempt + deMinimis + sssContribution + philhealthContribution + pagibigContribution;\n      return {\n        basicSalaryMWE: basicSalaryMWE || 0,\n        holidayPayMWE: holidayPayMWE || 0,\n        overtimePayMWE: overtimePayMWE || 0,\n        nightShiftDiffMWE: nightShiftDiffMWE || 0,\n        hazardPayMWE: hazardPayMWE || 0,\n        thirteenthMonthExempt: thirteenthMonthExempt || 0,\n        deMinimis: deMinimis || 0,\n        sssContribution: sssContribution || 0,\n        philhealthContribution: philhealthContribution || 0,\n        pagibigContribution: pagibigContribution || 0,\n        totalNonTaxable: totalNonTaxable || 0\n      };\n    },\n    calculateTotalEarnings(employee) {\n      const baseEarnings = (employee.earnings?.travelExpenses || 0) + (employee.earnings?.otherEarnings || 0);\n      const monthlySalary = employee.salary || 0 || 0; // Ensure salary is a number, default to 0\n      const holidayPay = this.calculateHolidayPay(employee) || 0;\n      const overtimePay = this.calculateOvertimePay(employee) || 0;\n      const payheadEarnings = this.calculatePayheadEarnings(employee.payheads) || 0;\n      return monthlySalary + baseEarnings + holidayPay + overtimePay + payheadEarnings || 0;\n    },\n    calculateNetSalary(employee) {\n      const totalEarnings = this.calculateTotalEarnings(employee) || 0;\n      const totalDeductions = this.calculateTotalDeductions(employee) || 0;\n      return totalEarnings - totalDeductions || 0;\n    },\n    calculateTotalDeductions(employee) {\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0;\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0;\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0;\n      const withholdingTax = this.calculateWithholdingTax(employee) || 0;\n      const payheadDeductions = this.calculatePayheadDeductions(employee.payheads) || 0;\n      return sssContribution + philhealthContribution + pagibigContribution + withholdingTax + payheadDeductions || 0;\n    },\n    calculatePayheadDeductions(payheads) {\n      return payheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\n    },\n    calculatePayheadEarnings(payheads) {\n      return payheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\n    }\n  }\n};","map":{"version":3,"names":["axios","jsPDF","autoTable","moment","prototype","default","name","data","employee","selectedMonth","Date","toISOString","slice","isGenerating","statusMessage","errorMessage","showPayslipModal","payslipDataUrl","iframeError","payslips","mounted","fetchEmployeeData","methods","userId","localStorage","getItem","setTimeout","$router","push","response","get","params","month","Error","error","console","generatePayslip","payslipData","createPayslipData","pdfBlob","generatePdf","url","URL","createObjectURL","id","salaryMonth","showSuccessMessage","viewPayslip","salaryDate","format","basicSalary","salary","sss","calculateSSSContribution","philhealth","calculatePhilHealthContribution","hdmf","calculatePagIBIGContribution","totalDeductions","calculateWithholdingTax","netSalary","totalSalary","calculateNetSalary","hourlyRate","totalEarnings","empNo","lastName","middleName","firstName","birthDate","hireDate","civilStatus","dependents","tin","position","formatNumber","sssDeduction","philhealthDeduction","hdmfDeduction","withholdingTax","payheads","value","num","Number","toFixed","doc","orientation","unit","lineHeight","leftMargin","addFormattedText","text","x","y","options","setFontSize","fontSize","setFont","undefined","fontStyle","setTextColor","textColor","align","internal","pageSize","getWidth","line","toString","miscTableData","map","payhead","type","amount","startY","head","body","theme","styles","cellPadding","columnStyles","cellWidth","halign","output","onIframeLoad","log","onIframeError","message","showErrorMessage","calculateHolidayPay","dailyRate","formatSalaryMonth","split","regularHolidays","specialNonWorkingDays","isRegularHoliday","some","holiday","isSpecialHoliday","calculateOvertimePay","regularOTHours","overtimeHours","regular","holidayOTHours","regularOTPay","holidayOTPay","monthlySalaryCredit","Math","min","max","employeeShareRate","round","rate","monthlySalary","cappedSalary","nonTaxable","calculateNonTaxableIncome","taxableIncome","calculateTotalEarnings","totalNonTaxable","isMWE","basicSalaryMWE","holidayPayMWE","overtimePayMWE","nightShiftDiffMWE","nightShiftDiff","hazardPayMWE","hazardPay","thirteenthMonthExempt","thirteenthMonthPay","deMinimis","sssContribution","philhealthContribution","pagibigContribution","baseEarnings","earnings","travelExpenses","otherEarnings","holidayPay","overtimePay","payheadEarnings","calculatePayheadEarnings","calculateTotalDeductions","payheadDeductions","calculatePayheadDeductions","filter","p","reduce","sum"],"sources":["C:\\Users\\ASUS\\Desktop\\OJT-PayrollSystem\\OJT-Payroll-System\\frontend\\src\\views\\employee\\EmployeeSalarySlips.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <div class=\"bg-white p-6 rounded-xl shadow-md\">\r\n        <div class=\"flex justify-between items-center mb-6\">\r\n          <h2 class=\"text-2xl font-semibold text-gray-900\">My Salary Slip</h2>\r\n          <input\r\n            v-model=\"selectedMonth\"\r\n            type=\"month\"\r\n            class=\"border rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all\"\r\n            @change=\"fetchEmployeeData\"\r\n          />\r\n        </div>\r\n\r\n        <table v-if=\"employee\" class=\"min-w-full border border-gray-300\">\r\n          <thead class=\"bg-gray-200\">\r\n            <tr>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Name</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Hourly Rate</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total Earnings</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total Deductions</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Net Salary</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Period</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr class=\"hover:bg-gray-50\">\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.id }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.hourlyRate.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.totalEarnings.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.totalDeductions.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm font-bold text-gray-900\">₱{{ employee.totalSalary.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.salaryMonth }}</td>\r\n              <td class=\"border px-4 py-2 text-sm\">\r\n                <button \r\n                  @click=\"generatePayslip\" \r\n                  class=\"bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-700 transition-all duration-200 mr-2\"\r\n                  :disabled=\"isGenerating\"\r\n                >\r\n                  {{ isGenerating ? 'Generating...' : 'Generate Payslip' }}\r\n                </button>\r\n                <button \r\n                  @click=\"viewPayslip\" \r\n                  class=\"bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-700 transition-all duration-200\"\r\n                  :disabled=\"!payslipDataUrl || isGenerating\"\r\n                >\r\n                  View Payslip\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <!-- Loading/Error State -->\r\n        <div v-else class=\"text-center py-8 text-gray-500\">\r\n          {{ errorMessage || 'Loading employee data...' }}\r\n        </div>\r\n\r\n        <!-- Payslip Viewer Modal -->\r\n        <div\r\n          v-if=\"showPayslipModal\"\r\n          class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\"\r\n        >\r\n          <div\r\n            class=\"bg-white rounded-xl shadow-xl w-full max-w-4xl m-4 max-h-[90vh] overflow-y-auto\"\r\n          >\r\n            <div class=\"p-6 border-b flex justify-between items-center\">\r\n              <h2 class=\"text-2xl font-bold text-gray-800\">\r\n                Payslip for {{ employee.name }} - {{ employee.salaryMonth }}\r\n              </h2>\r\n              <button\r\n                @click=\"showPayslipModal = false\"\r\n                class=\"text-gray-500 hover:text-gray-700\"\r\n              >\r\n                <span class=\"material-icons-outlined\">close</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"p-6\">\r\n              <iframe\r\n                :src=\"payslipDataUrl\"\r\n                class=\"w-full h-[70vh]\"\r\n                frameborder=\"0\"\r\n                @load=\"onIframeLoad\"\r\n                @error=\"onIframeError\"\r\n              ></iframe>\r\n              <p v-if=\"iframeError\" class=\"text-red-500 text-sm mt-2\">\r\n                Error loading payslip. Please ensure the payslip is generated correctly or try again.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Status Message -->\r\n        <div \r\n          v-if=\"statusMessage\" \r\n          :class=\"statusMessage.includes('successfully') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\"\r\n          class=\"mt-4 p-3 rounded-lg text-center\"\r\n        >\r\n          {{ statusMessage }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable'; // Use default import for compatibility\r\nimport moment from 'moment'; // Import moment.js for date formatting\r\n\r\n// Extend jsPDF with autoTable plugin\r\njsPDF.prototype.autoTable = autoTable.default;\r\n\r\nexport default {\r\n  name: 'EmployeeSalarySlip',\r\n  data() {\r\n    return {\r\n      employee: null,\r\n      selectedMonth: new Date().toISOString().slice(0, 7),\r\n      isGenerating: false,\r\n      statusMessage: '',\r\n      errorMessage: '',\r\n      showPayslipModal: false,\r\n      payslipDataUrl: '',\r\n      iframeError: false,\r\n      payslips: {} // Store payslip URLs locally for viewing\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchEmployeeData();\r\n  },\r\n  methods: {\r\n    async fetchEmployeeData() {\r\n      try {\r\n        const userId = localStorage.getItem('userId');\r\n        if (!userId) {\r\n          this.errorMessage = 'User not logged in. Redirecting to login...';\r\n          setTimeout(() => {\r\n            this.$router.push('/login');\r\n          }, 2000);\r\n          return;\r\n        }\r\n\r\n        const response = await axios.get(`http://localhost:7777/api/employees/${userId}/salary`, {\r\n          params: { month: this.selectedMonth }\r\n        });\r\n        if (!response.data) {\r\n          throw new Error('No salary data returned from server');\r\n        }\r\n        this.employee = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching employee data:', error);\r\n        this.errorMessage = 'Failed to load salary slip. Please check your connection or try again later.';\r\n        this.employee = null; // Ensure employee stays null to show error state\r\n      }\r\n    },\r\n    async generatePayslip() {\r\n      if (!this.employee) {\r\n        this.statusMessage = 'No employee data available to generate payslip.';\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n        return;\r\n      }\r\n\r\n      this.isGenerating = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        const payslipData = this.createPayslipData(this.employee);\r\n        const pdfBlob = await this.generatePdf(payslipData);\r\n        const url = URL.createObjectURL(pdfBlob);\r\n        this.payslips[`${this.employee.id}_${this.employee.salaryMonth}`] = url;\r\n        this.payslipDataUrl = url;\r\n        this.showSuccessMessage('Payslip generated successfully!');\r\n      } catch (error) {\r\n        console.error('Error generating payslip:', error);\r\n        this.statusMessage = 'Failed to generate payslip. Please try again.';\r\n      } finally {\r\n        this.isGenerating = false;\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n      }\r\n    },\r\n    viewPayslip() {\r\n      if (!this.payslipDataUrl) {\r\n        this.statusMessage = 'Please generate the payslip first.';\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n        return;\r\n      }\r\n      this.showPayslipModal = true;\r\n      this.iframeError = false;\r\n      this.showSuccessMessage(`Viewing payslip for ${this.employee.name} for ${this.employee.salaryMonth}`);\r\n    },\r\n    createPayslipData(employee) {\r\n      const salaryDate = moment(employee.salaryMonth, 'MM/YYYY').format('MM/DD/YYYY');\r\n      const basicSalary = (employee.salary || 0) || 0;\r\n      const sss = this.calculateSSSContribution(employee.salary) || 0;\r\n      const philhealth = this.calculatePhilHealthContribution(employee.salary) || 0;\r\n      const hdmf = this.calculatePagIBIGContribution(employee.salary) || 0;\r\n      const totalDeductions = (sss + philhealth + hdmf + (this.calculateWithholdingTax(employee) || 0)) || 0;\r\n      const netSalary = (employee.totalSalary || this.calculateNetSalary(employee) || 0) || 0;\r\n\r\n      return {\r\n        salaryDate,\r\n        id: employee.id,\r\n        name: employee.name,\r\n        hourlyRate: employee.hourlyRate || (employee.salary / (8 * 22)) || 0,\r\n        totalEarnings: employee.totalEarnings || 0,\r\n        totalDeductions: totalDeductions,\r\n        totalSalary: netSalary,\r\n        salaryMonth: employee.salaryMonth,\r\n        empNo: employee.empNo || 'N/A',\r\n        lastName: employee.lastName || 'N/A',\r\n        middleName: employee.middleName || 'N/A',\r\n        firstName: employee.firstName || 'N/A',\r\n        birthDate: employee.birthDate ? moment(employee.birthDate).format('MM/DD/YYYY') : 'N/A',\r\n        hireDate: employee.hireDate ? moment(employee.hireDate).format('MM/DD/YYYY') : 'N/A',\r\n        civilStatus: employee.civilStatus || 'SINGLE',\r\n        dependents: employee.dependents || 0,\r\n        sss: employee.sss || 'N/A',\r\n        tin: employee.tin || 'N/A',\r\n        philhealth: employee.philhealth || 'N/A',\r\n        hdmf: employee.hdmf || 'N/A',\r\n        position: employee.position || 'N/A',\r\n        basicSalary: this.formatNumber(basicSalary),\r\n        sssDeduction: this.formatNumber(sss),\r\n        philhealthDeduction: this.formatNumber(philhealth),\r\n        hdmfDeduction: this.formatNumber(hdmf),\r\n        withholdingTax: this.formatNumber(this.calculateWithholdingTax(employee) || 0),\r\n        payheads: employee.payheads || [] // Include dynamic payheads\r\n      };\r\n    },\r\n    formatNumber(value) {\r\n      const num = Number(value) || 0;\r\n      return num.toFixed(2);\r\n    },\r\n    async generatePdf(payslipData) {\r\n      const doc = new jsPDF({\r\n        orientation: 'portrait',\r\n        unit: 'mm',\r\n        format: 'a4'\r\n      });\r\n      const lineHeight = 8; // Increased vertical spacing for better readability\r\n      const leftMargin = 14; // Standard left margin\r\n\r\n      // Helper function to add formatted text\r\n      function addFormattedText(doc, text, x, y, options = {}) {\r\n        doc.setFontSize(options.fontSize || 12); // Default to larger font for readability\r\n        doc.setFont(undefined, options.fontStyle || 'normal');\r\n        doc.setTextColor(options.textColor ? options.textColor[0] : 0, options.textColor ? options.textColor[1] : 0, options.textColor ? options.textColor[2] : 0); // Use array for RGB\r\n        doc.text(text, x, y, { align: options.align || 'left' });\r\n      }\r\n\r\n      // Header: RIGHTJOB Solutions in green, PAYSLIP centered\r\n      addFormattedText(doc, 'RIGHTJOB Solutions', leftMargin, 15, { fontSize: 16, fontStyle: 'bold', textColor: [0, 128, 0] });\r\n      addFormattedText(doc, 'PAYSLIP', doc.internal.pageSize.getWidth() / 2, 15, { fontSize: 18, align: 'center' });\r\n      addFormattedText(doc, 'Salary Date', 140, 15, { fontSize: 12 });\r\n      addFormattedText(doc, payslipData.salaryDate, 170, 15, { fontSize: 12 });\r\n\r\n      // Line Separator\r\n      doc.line(leftMargin, 20, doc.internal.pageSize.getWidth() - leftMargin, 20);\r\n\r\n      // Personal Information\r\n      let y = 30;\r\n      addFormattedText(doc, 'Personal Information', leftMargin, 25, { fontSize: 14, fontStyle: 'bold' });\r\n\r\n      // Left Column (Employee Details)\r\n      addFormattedText(doc, 'Emp No.', leftMargin, y); addFormattedText(doc, payslipData.empNo, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Last Name', leftMargin, y); addFormattedText(doc, payslipData.lastName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Middle Name', leftMargin, y); addFormattedText(doc, payslipData.middleName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'First Name', leftMargin, y); addFormattedText(doc, payslipData.firstName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Birth Date', leftMargin, y); addFormattedText(doc, payslipData.birthDate, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Hire Date', leftMargin, y); addFormattedText(doc, payslipData.hireDate, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Position', leftMargin, y); addFormattedText(doc, payslipData.position, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Basic Salary', leftMargin, y); addFormattedText(doc, `Php${payslipData.basicSalary}`, leftMargin + 40, y);\r\n\r\n      // Right Column (Additional Info)\r\n      y = 30;\r\n      addFormattedText(doc, 'Civil Status', 120, y); addFormattedText(doc, payslipData.civilStatus, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'Dependents', 120, y); addFormattedText(doc, payslipData.dependents.toString(), 150, y);\r\n      y += lineHeight * 2; addFormattedText(doc, 'SSS', 120, y); addFormattedText(doc, payslipData.sss, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'TIN', 120, y); addFormattedText(doc, payslipData.tin, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'Philhealth', 120, y); addFormattedText(doc, payslipData.philhealth, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'HDMF', 120, y); addFormattedText(doc, payslipData.hdmf, 150, y);\r\n\r\n      // Update y to start Summary immediately after Personal Information (approx. y = 95)\r\n      y = 95;\r\n\r\n      // Summary (left-aligned)\r\n      addFormattedText(doc, 'Summary', leftMargin, y, { fontSize: 14, fontStyle: 'bold' });\r\n      y += lineHeight; addFormattedText(doc, 'Total Deductions', leftMargin, y); addFormattedText(doc, `(Php${payslipData.totalDeductions})`, leftMargin + 50, y);\r\n      addFormattedText(doc, 'Salary PHP', 120, y); addFormattedText(doc, `Php${payslipData.totalSalary}`, 150, y); // Match SSS, TIN, Philhealth, HDMF alignment\r\n      y += lineHeight; addFormattedText(doc, 'Total Misc', leftMargin, y); addFormattedText(doc, 'Php0.00', leftMargin + 50, y);\r\n\r\n      // Deductions (left-aligned)\r\n      y += lineHeight + 5;\r\n      addFormattedText(doc, 'Deductions', leftMargin, y, { fontSize: 14, fontStyle: 'bold' });\r\n      y += lineHeight; addFormattedText(doc, 'SSS', leftMargin, y); addFormattedText(doc, `Php${payslipData.sssDeduction}`, leftMargin + 50, y);\r\n      addFormattedText(doc, 'Withholding Tax', 120, y); addFormattedText(doc, `Php${payslipData.withholdingTax}`, 150, y); // Match SSS, TIN, Philhealth, HDMF alignment\r\n      y += lineHeight; addFormattedText(doc, 'Philhealth', leftMargin, y); addFormattedText(doc, `Php${payslipData.philhealthDeduction}`, leftMargin + 50, y);\r\n      y += lineHeight; addFormattedText(doc, 'HDMF', leftMargin, y); addFormattedText(doc, `Php${payslipData.hdmfDeduction}`, leftMargin + 50, y);\r\n\r\n      // Miscellaneous Computations (dynamic table based on payheads)\r\n      y += lineHeight + 5;\r\n      addFormattedText(doc, 'Miscellaneous', leftMargin, y, { fontSize: 14, fontStyle: 'bold' });\r\n      y += lineHeight; addFormattedText(doc, 'Computations', leftMargin, y);\r\n\r\n      const miscTableData = payslipData.payheads.map(payhead => [\r\n        payhead.name,\r\n        payhead.type === 'Earnings' ? `${payhead.amount} day(s)` : '', // Customize description2 based on type\r\n        `Php${this.formatNumber(payhead.amount)}`\r\n      ]);\r\n\r\n      doc.autoTable({\r\n        startY: y + 5,\r\n        head: [['Description', 'description2', 'Amount']],\r\n        body: miscTableData,\r\n        theme: 'grid',\r\n        styles: { fontSize: 12, cellPadding: 3 },\r\n        columnStyles: {\r\n          0: { cellWidth: 70 }, // Description column\r\n          1: { cellWidth: 50 }, // description2 column (optional for Earnings)\r\n          2: { cellWidth: 50, halign: 'right' } // Amount column\r\n        }\r\n      });\r\n\r\n      // Footer\r\n      addFormattedText(doc, 'This being a computer generated payslip, no signature required.', doc.internal.pageSize.getWidth() / 2, 270, { fontSize: 10, align: 'center' });\r\n\r\n      const pdfBlob = doc.output('blob');\r\n      return pdfBlob;\r\n    },\r\n    onIframeLoad() {\r\n      console.log('iFrame loaded successfully');\r\n      this.iframeError = false;\r\n    },\r\n    onIframeError() {\r\n      console.error('iFrame failed to load');\r\n      this.iframeError = true;\r\n    },\r\n    showSuccessMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    },\r\n    showErrorMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    },\r\n    calculateHolidayPay(employee) {\r\n      const dailyRate = ((employee.salary || 0) / 30) || 0;\r\n      const salaryMonth = this.formatSalaryMonth(this.selectedMonth).split(' ')[0]; // Get month (e.g., \"April\")\r\n      const regularHolidays = [\r\n        '01/01/2025', '04/09/2025', '04/17/2025', '04/18/2025', '05/01/2025',\r\n        '06/12/2025', '08/25/2025', '11/30/2025', '12/25/2025', '12/30/2025'\r\n      ];\r\n      const specialNonWorkingDays = ['02/08/2025', '04/19/2025', '08/26/2025'];\r\n      const isRegularHoliday = regularHolidays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('MMMM') === salaryMonth);\r\n      const isSpecialHoliday = specialNonWorkingDays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('MMMM') === salaryMonth);\r\n      if (isRegularHoliday) return dailyRate * 2 || 0; // DOLE: 200% for worked regular holiday\r\n      if (isSpecialHoliday) return dailyRate * 0.3 || 0; // DOLE: 30% premium for special holiday\r\n      return 0;\r\n    },\r\n    calculateOvertimePay(employee) {\r\n      const hourlyRate = ((employee.hourlyRate || (employee.salary / (8 * 22))) || 0) || 0;\r\n      const regularOTHours = (employee.overtimeHours?.regular || 2) || 0;\r\n      const holidayOTHours = (employee.overtimeHours?.holiday || 1) || 0;\r\n      const regularOTPay = regularOTHours * hourlyRate * 1.25 || 0; // DOLE: 25% OT rate\r\n      const holidayOTPay = holidayOTHours * hourlyRate * 1.3 || 0; // DOLE: 30% OT on holiday/rest day\r\n      return regularOTPay + holidayOTPay || 0;\r\n    },\r\n    calculateSSSContribution(salary) {\r\n      const monthlySalaryCredit = Math.min(Math.max((salary || 0), 5000), 35000) || 0; // SSS MSC cap at ₱35,000 in 2025\r\n      const employeeShareRate = 0.05; // 5% employee share per SSS Circular 2024-06\r\n      return Math.round(monthlySalaryCredit * employeeShareRate) || 0;\r\n    },\r\n    calculatePhilHealthContribution(salary) {\r\n      const rate = 0.05; // 5% total rate in 2025 per PhilHealth Circular\r\n      const monthlySalary = Math.min((salary || 0), 100000) || 0; // Cap at ₱100,000\r\n      return Math.round((monthlySalary * rate) / 2) || 0; // 2.5% employee share\r\n    },\r\n    calculatePagIBIGContribution(salary) {\r\n      const rate = 0.02; // 2% employee share per Pag-IBIG Circular 460\r\n      const cappedSalary = Math.min((salary || 0), 10000) || 0; // Cap at ₱10,000\r\n      return Math.round(cappedSalary * rate) || 0; // Max ₱200\r\n    },\r\n    calculateWithholdingTax(employee) {\r\n      const nonTaxable = this.calculateNonTaxableIncome(employee);\r\n      const taxableIncome = ((this.calculateTotalEarnings(employee) || 0) - (nonTaxable.totalNonTaxable || 0)) || 0;\r\n      if (taxableIncome <= 20833) return 0;\r\n      if (taxableIncome <= 33333) return Math.round((taxableIncome - 20833) * 0.15) || 0; // Bracket 2: 15% over ₱20,833\r\n      if (taxableIncome <= 66667) return Math.round(1875 + (taxableIncome - 33333) * 0.20) || 0; // Bracket 3: ₱1,875 + 20% over ₱33,333\r\n      if (taxableIncome <= 166667) return Math.round(13541.80 + (taxableIncome - 66667) * 0.25) || 0; // Bracket 4: ₱13,541.80 + 25% over ₱66,667\r\n      if (taxableIncome <= 666667) return Math.round(90841.80 + (taxableIncome - 166667) * 0.30) || 0; // Bracket 5: ₱90,841.80 + 30% over ₱166,667\r\n      return Math.round(408841.80 + (taxableIncome - 666667) * 0.35) || 0; // Bracket 6: ₱408,841.80 + 35% over ₱666,667\r\n    },\r\n    calculateNonTaxableIncome(employee) {\r\n      const isMWE = (employee.salary / 30) <= 610; // NCR minimum wage for 2025\r\n      const basicSalaryMWE = isMWE ? (employee.salary || 0) : 0;\r\n      const holidayPayMWE = isMWE ? (this.calculateHolidayPay(employee) || 0) : 0;\r\n      const overtimePayMWE = isMWE ? (this.calculateOvertimePay(employee) || 0) : 0;\r\n      const nightShiftDiffMWE = isMWE ? (employee.nightShiftDiff || 0) : 0;\r\n      const hazardPayMWE = isMWE ? (employee.hazardPay || 0) : 0;\r\n      const thirteenthMonthExempt = Math.min((employee.thirteenthMonthPay || 0), 90000) || 0;\r\n      const deMinimis = Math.min((employee.deMinimis || 0), 10000) || 0; // De minimis limit for 2025\r\n      const sssContribution = (this.calculateSSSContribution(employee.salary) || 0) || 0;\r\n      const philhealthContribution = (this.calculatePhilHealthContribution(employee.salary) || 0) || 0;\r\n      const pagibigContribution = (this.calculatePagIBIGContribution(employee.salary) || 0) || 0;\r\n\r\n      const totalNonTaxable = basicSalaryMWE + holidayPayMWE + overtimePayMWE + nightShiftDiffMWE + hazardPayMWE + thirteenthMonthExempt + deMinimis + sssContribution + philhealthContribution + pagibigContribution;\r\n\r\n      return {\r\n        basicSalaryMWE: basicSalaryMWE || 0,\r\n        holidayPayMWE: holidayPayMWE || 0,\r\n        overtimePayMWE: overtimePayMWE || 0,\r\n        nightShiftDiffMWE: nightShiftDiffMWE || 0,\r\n        hazardPayMWE: hazardPayMWE || 0,\r\n        thirteenthMonthExempt: thirteenthMonthExempt || 0,\r\n        deMinimis: deMinimis || 0,\r\n        sssContribution: sssContribution || 0,\r\n        philhealthContribution: philhealthContribution || 0,\r\n        pagibigContribution: pagibigContribution || 0,\r\n        totalNonTaxable: totalNonTaxable || 0\r\n      };\r\n    },\r\n    calculateTotalEarnings(employee) {\r\n      const baseEarnings = (employee.earnings?.travelExpenses || 0) + (employee.earnings?.otherEarnings || 0);\r\n      const monthlySalary = (employee.salary || 0) || 0; // Ensure salary is a number, default to 0\r\n      const holidayPay = this.calculateHolidayPay(employee) || 0;\r\n      const overtimePay = this.calculateOvertimePay(employee) || 0;\r\n      const payheadEarnings = this.calculatePayheadEarnings(employee.payheads) || 0;\r\n\r\n      return monthlySalary + baseEarnings + holidayPay + overtimePay + payheadEarnings || 0;\r\n    },\r\n    calculateNetSalary(employee) {\r\n      const totalEarnings = this.calculateTotalEarnings(employee) || 0;\r\n      const totalDeductions = this.calculateTotalDeductions(employee) || 0;\r\n\r\n      return totalEarnings - totalDeductions || 0;\r\n    },\r\n    calculateTotalDeductions(employee) {\r\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0;\r\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0;\r\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0;\r\n      const withholdingTax = this.calculateWithholdingTax(employee) || 0;\r\n      const payheadDeductions = this.calculatePayheadDeductions(employee.payheads) || 0;\r\n\r\n      return sssContribution + philhealthContribution + pagibigContribution + withholdingTax + payheadDeductions || 0;\r\n    },\r\n    calculatePayheadDeductions(payheads) {\r\n      return payheads\r\n        .filter(p => p.type === 'Deductions')\r\n        .reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\r\n    },\r\n    calculatePayheadEarnings(payheads) {\r\n      return payheads\r\n        .filter(p => p.type === 'Earnings')\r\n        .reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Outlined');\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\nbutton:disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.transition-all {\r\n  transition: all 0.2s ease-in-out;\r\n}\r\n\r\n.hover\\:bg-gray-50:hover {\r\n  background-color: #f9fafb;\r\n}\r\n</style>"],"mappings":";;;;;;;;AA6GA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,SAAQ,MAAO,iBAAiB,EAAE;AACzC,OAAOC,MAAK,MAAO,QAAQ,EAAE;;AAE7B;AACAF,KAAK,CAACG,SAAS,CAACF,SAAQ,GAAIA,SAAS,CAACG,OAAO;AAE7C,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACnDC,YAAY,EAAE,KAAK;MACnBC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE,EAAE;MAChBC,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE,EAAE;MAClBC,WAAW,EAAE,KAAK;MAClBC,QAAQ,EAAE,CAAC,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAME,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;QAC7C,IAAI,CAACF,MAAM,EAAE;UACX,IAAI,CAACR,YAAW,GAAI,6CAA6C;UACjEW,UAAU,CAAC,MAAM;YACf,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;UAC7B,CAAC,EAAE,IAAI,CAAC;UACR;QACF;QAEA,MAAMC,QAAO,GAAI,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,uCAAuCP,MAAM,SAAS,EAAE;UACvFQ,MAAM,EAAE;YAAEC,KAAK,EAAE,IAAI,CAACvB;UAAc;QACtC,CAAC,CAAC;QACF,IAAI,CAACoB,QAAQ,CAACtB,IAAI,EAAE;UAClB,MAAM,IAAI0B,KAAK,CAAC,qCAAqC,CAAC;QACxD;QACA,IAAI,CAACzB,QAAO,GAAIqB,QAAQ,CAACtB,IAAI;MAC/B,EAAE,OAAO2B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,IAAI,CAACnB,YAAW,GAAI,8EAA8E;QAClG,IAAI,CAACP,QAAO,GAAI,IAAI,EAAE;MACxB;IACF,CAAC;IACD,MAAM4B,eAAeA,CAAA,EAAG;MACtB,IAAI,CAAC,IAAI,CAAC5B,QAAQ,EAAE;QAClB,IAAI,CAACM,aAAY,GAAI,iDAAiD;QACtEY,UAAU,CAAC,MAAM,IAAI,CAACZ,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;QAC/C;MACF;MAEA,IAAI,CAACD,YAAW,GAAI,IAAI;MACxB,IAAI,CAACC,aAAY,GAAI,EAAE;MACvB,IAAI;QACF,MAAMuB,WAAU,GAAI,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAAC9B,QAAQ,CAAC;QACzD,MAAM+B,OAAM,GAAI,MAAM,IAAI,CAACC,WAAW,CAACH,WAAW,CAAC;QACnD,MAAMI,GAAE,GAAIC,GAAG,CAACC,eAAe,CAACJ,OAAO,CAAC;QACxC,IAAI,CAACpB,QAAQ,CAAC,GAAG,IAAI,CAACX,QAAQ,CAACoC,EAAE,IAAI,IAAI,CAACpC,QAAQ,CAACqC,WAAW,EAAE,IAAIJ,GAAG;QACvE,IAAI,CAACxB,cAAa,GAAIwB,GAAG;QACzB,IAAI,CAACK,kBAAkB,CAAC,iCAAiC,CAAC;MAC5D,EAAE,OAAOZ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD,IAAI,CAACpB,aAAY,GAAI,+CAA+C;MACtE,UAAU;QACR,IAAI,CAACD,YAAW,GAAI,KAAK;QACzBa,UAAU,CAAC,MAAM,IAAI,CAACZ,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;MACjD;IACF,CAAC;IACDiC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC,IAAI,CAAC9B,cAAc,EAAE;QACxB,IAAI,CAACH,aAAY,GAAI,oCAAoC;QACzDY,UAAU,CAAC,MAAM,IAAI,CAACZ,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;QAC/C;MACF;MACA,IAAI,CAACE,gBAAe,GAAI,IAAI;MAC5B,IAAI,CAACE,WAAU,GAAI,KAAK;MACxB,IAAI,CAAC4B,kBAAkB,CAAC,uBAAuB,IAAI,CAACtC,QAAQ,CAACF,IAAI,QAAQ,IAAI,CAACE,QAAQ,CAACqC,WAAW,EAAE,CAAC;IACvG,CAAC;IACDP,iBAAiBA,CAAC9B,QAAQ,EAAE;MAC1B,MAAMwC,UAAS,GAAI7C,MAAM,CAACK,QAAQ,CAACqC,WAAW,EAAE,SAAS,CAAC,CAACI,MAAM,CAAC,YAAY,CAAC;MAC/E,MAAMC,WAAU,GAAK1C,QAAQ,CAAC2C,MAAK,IAAK,CAAC,IAAK,CAAC;MAC/C,MAAMC,GAAE,GAAI,IAAI,CAACC,wBAAwB,CAAC7C,QAAQ,CAAC2C,MAAM,KAAK,CAAC;MAC/D,MAAMG,UAAS,GAAI,IAAI,CAACC,+BAA+B,CAAC/C,QAAQ,CAAC2C,MAAM,KAAK,CAAC;MAC7E,MAAMK,IAAG,GAAI,IAAI,CAACC,4BAA4B,CAACjD,QAAQ,CAAC2C,MAAM,KAAK,CAAC;MACpE,MAAMO,eAAc,GAAKN,GAAE,GAAIE,UAAS,GAAIE,IAAG,IAAK,IAAI,CAACG,uBAAuB,CAACnD,QAAQ,KAAK,CAAC,CAAC,IAAK,CAAC;MACtG,MAAMoD,SAAQ,GAAKpD,QAAQ,CAACqD,WAAU,IAAK,IAAI,CAACC,kBAAkB,CAACtD,QAAQ,KAAK,CAAC,IAAK,CAAC;MAEvF,OAAO;QACLwC,UAAU;QACVJ,EAAE,EAAEpC,QAAQ,CAACoC,EAAE;QACftC,IAAI,EAAEE,QAAQ,CAACF,IAAI;QACnByD,UAAU,EAAEvD,QAAQ,CAACuD,UAAS,IAAMvD,QAAQ,CAAC2C,MAAK,IAAK,IAAI,EAAE,CAAC,IAAK,CAAC;QACpEa,aAAa,EAAExD,QAAQ,CAACwD,aAAY,IAAK,CAAC;QAC1CN,eAAe,EAAEA,eAAe;QAChCG,WAAW,EAAED,SAAS;QACtBf,WAAW,EAAErC,QAAQ,CAACqC,WAAW;QACjCoB,KAAK,EAAEzD,QAAQ,CAACyD,KAAI,IAAK,KAAK;QAC9BC,QAAQ,EAAE1D,QAAQ,CAAC0D,QAAO,IAAK,KAAK;QACpCC,UAAU,EAAE3D,QAAQ,CAAC2D,UAAS,IAAK,KAAK;QACxCC,SAAS,EAAE5D,QAAQ,CAAC4D,SAAQ,IAAK,KAAK;QACtCC,SAAS,EAAE7D,QAAQ,CAAC6D,SAAQ,GAAIlE,MAAM,CAACK,QAAQ,CAAC6D,SAAS,CAAC,CAACpB,MAAM,CAAC,YAAY,IAAI,KAAK;QACvFqB,QAAQ,EAAE9D,QAAQ,CAAC8D,QAAO,GAAInE,MAAM,CAACK,QAAQ,CAAC8D,QAAQ,CAAC,CAACrB,MAAM,CAAC,YAAY,IAAI,KAAK;QACpFsB,WAAW,EAAE/D,QAAQ,CAAC+D,WAAU,IAAK,QAAQ;QAC7CC,UAAU,EAAEhE,QAAQ,CAACgE,UAAS,IAAK,CAAC;QACpCpB,GAAG,EAAE5C,QAAQ,CAAC4C,GAAE,IAAK,KAAK;QAC1BqB,GAAG,EAAEjE,QAAQ,CAACiE,GAAE,IAAK,KAAK;QAC1BnB,UAAU,EAAE9C,QAAQ,CAAC8C,UAAS,IAAK,KAAK;QACxCE,IAAI,EAAEhD,QAAQ,CAACgD,IAAG,IAAK,KAAK;QAC5BkB,QAAQ,EAAElE,QAAQ,CAACkE,QAAO,IAAK,KAAK;QACpCxB,WAAW,EAAE,IAAI,CAACyB,YAAY,CAACzB,WAAW,CAAC;QAC3C0B,YAAY,EAAE,IAAI,CAACD,YAAY,CAACvB,GAAG,CAAC;QACpCyB,mBAAmB,EAAE,IAAI,CAACF,YAAY,CAACrB,UAAU,CAAC;QAClDwB,aAAa,EAAE,IAAI,CAACH,YAAY,CAACnB,IAAI,CAAC;QACtCuB,cAAc,EAAE,IAAI,CAACJ,YAAY,CAAC,IAAI,CAAChB,uBAAuB,CAACnD,QAAQ,KAAK,CAAC,CAAC;QAC9EwE,QAAQ,EAAExE,QAAQ,CAACwE,QAAO,IAAK,EAAC,CAAE;MACpC,CAAC;IACH,CAAC;IACDL,YAAYA,CAACM,KAAK,EAAE;MAClB,MAAMC,GAAE,GAAIC,MAAM,CAACF,KAAK,KAAK,CAAC;MAC9B,OAAOC,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC;IACvB,CAAC;IACD,MAAM5C,WAAWA,CAACH,WAAW,EAAE;MAC7B,MAAMgD,GAAE,GAAI,IAAIpF,KAAK,CAAC;QACpBqF,WAAW,EAAE,UAAU;QACvBC,IAAI,EAAE,IAAI;QACVtC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,MAAMuC,UAAS,GAAI,CAAC,EAAE;MACtB,MAAMC,UAAS,GAAI,EAAE,EAAE;;MAEvB;MACA,SAASC,gBAAgBA,CAACL,GAAG,EAAEM,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,OAAM,GAAI,CAAC,CAAC,EAAE;QACvDT,GAAG,CAACU,WAAW,CAACD,OAAO,CAACE,QAAO,IAAK,EAAE,CAAC,EAAE;QACzCX,GAAG,CAACY,OAAO,CAACC,SAAS,EAAEJ,OAAO,CAACK,SAAQ,IAAK,QAAQ,CAAC;QACrDd,GAAG,CAACe,YAAY,CAACN,OAAO,CAACO,SAAQ,GAAIP,OAAO,CAACO,SAAS,CAAC,CAAC,IAAI,CAAC,EAAEP,OAAO,CAACO,SAAQ,GAAIP,OAAO,CAACO,SAAS,CAAC,CAAC,IAAI,CAAC,EAAEP,OAAO,CAACO,SAAQ,GAAIP,OAAO,CAACO,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;QAC5JhB,GAAG,CAACM,IAAI,CAACA,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAE;UAAES,KAAK,EAAER,OAAO,CAACQ,KAAI,IAAK;QAAO,CAAC,CAAC;MAC1D;;MAEA;MACAZ,gBAAgB,CAACL,GAAG,EAAE,oBAAoB,EAAEI,UAAU,EAAE,EAAE,EAAE;QAAEO,QAAQ,EAAE,EAAE;QAAEG,SAAS,EAAE,MAAM;QAAEE,SAAS,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC;MAAE,CAAC,CAAC;MACxHX,gBAAgB,CAACL,GAAG,EAAE,SAAS,EAAEA,GAAG,CAACkB,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE;QAAET,QAAQ,EAAE,EAAE;QAAEM,KAAK,EAAE;MAAS,CAAC,CAAC;MAC7GZ,gBAAgB,CAACL,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,EAAE,EAAE;QAAEW,QAAQ,EAAE;MAAG,CAAC,CAAC;MAC/DN,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACW,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE;QAAEgD,QAAQ,EAAE;MAAG,CAAC,CAAC;;MAExE;MACAX,GAAG,CAACqB,IAAI,CAACjB,UAAU,EAAE,EAAE,EAAEJ,GAAG,CAACkB,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,IAAIhB,UAAU,EAAE,EAAE,CAAC;;MAE3E;MACA,IAAII,CAAA,GAAI,EAAE;MACVH,gBAAgB,CAACL,GAAG,EAAE,sBAAsB,EAAEI,UAAU,EAAE,EAAE,EAAE;QAAEO,QAAQ,EAAE,EAAE;QAAEG,SAAS,EAAE;MAAO,CAAC,CAAC;;MAElG;MACAT,gBAAgB,CAACL,GAAG,EAAE,SAAS,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAAC4B,KAAK,EAAEwB,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MAC7GA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,WAAW,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAAC6B,QAAQ,EAAEuB,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MACnIA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,aAAa,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAAC8B,UAAU,EAAEsB,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MACvIA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAAC+B,SAAS,EAAEqB,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MACrIA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACgC,SAAS,EAAEoB,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MACrIA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,WAAW,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACiC,QAAQ,EAAEmB,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MACnIA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,UAAU,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACqC,QAAQ,EAAEe,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MAClIA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,cAAc,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,MAAMhD,WAAW,CAACa,WAAW,EAAE,EAAEuC,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;;MAEjJ;MACAA,CAAA,GAAI,EAAE;MACNH,gBAAgB,CAACL,GAAG,EAAE,cAAc,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACkC,WAAW,EAAE,GAAG,EAAEsB,CAAC,CAAC;MACrGA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACmC,UAAU,CAACmC,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAEd,CAAC,CAAC;MAC9HA,CAAA,IAAKL,UAAS,GAAI,CAAC;MAAEE,gBAAgB,CAACL,GAAG,EAAE,KAAK,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACe,GAAG,EAAE,GAAG,EAAEyC,CAAC,CAAC;MACzGA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,KAAK,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACoC,GAAG,EAAE,GAAG,EAAEoB,CAAC,CAAC;MACrGA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACiB,UAAU,EAAE,GAAG,EAAEuC,CAAC,CAAC;MACnHA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,MAAM,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAEhD,WAAW,CAACmB,IAAI,EAAE,GAAG,EAAEqC,CAAC,CAAC;;MAEvG;MACAA,CAAA,GAAI,EAAE;;MAEN;MACAH,gBAAgB,CAACL,GAAG,EAAE,SAAS,EAAEI,UAAU,EAAEI,CAAC,EAAE;QAAEG,QAAQ,EAAE,EAAE;QAAEG,SAAS,EAAE;MAAO,CAAC,CAAC;MACpFN,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,kBAAkB,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,OAAOhD,WAAW,CAACqB,eAAe,GAAG,EAAE+B,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MAC3JH,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,MAAMhD,WAAW,CAACwB,WAAW,EAAE,EAAE,GAAG,EAAEgC,CAAC,CAAC,EAAE;MAC7GA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,SAAS,EAAEI,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;;MAEzH;MACAA,CAAA,IAAKL,UAAS,GAAI,CAAC;MACnBE,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAEI,UAAU,EAAEI,CAAC,EAAE;QAAEG,QAAQ,EAAE,EAAE;QAAEG,SAAS,EAAE;MAAO,CAAC,CAAC;MACvFN,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,KAAK,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,MAAMhD,WAAW,CAACuC,YAAY,EAAE,EAAEa,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MACzIH,gBAAgB,CAACL,GAAG,EAAE,iBAAiB,EAAE,GAAG,EAAEQ,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,MAAMhD,WAAW,CAAC0C,cAAc,EAAE,EAAE,GAAG,EAAEc,CAAC,CAAC,EAAE;MACrHA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,YAAY,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,MAAMhD,WAAW,CAACwC,mBAAmB,EAAE,EAAEY,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;MACvJA,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,MAAM,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAAEH,gBAAgB,CAACL,GAAG,EAAE,MAAMhD,WAAW,CAACyC,aAAa,EAAE,EAAEW,UAAS,GAAI,EAAE,EAAEI,CAAC,CAAC;;MAE3I;MACAA,CAAA,IAAKL,UAAS,GAAI,CAAC;MACnBE,gBAAgB,CAACL,GAAG,EAAE,eAAe,EAAEI,UAAU,EAAEI,CAAC,EAAE;QAAEG,QAAQ,EAAE,EAAE;QAAEG,SAAS,EAAE;MAAO,CAAC,CAAC;MAC1FN,CAAA,IAAKL,UAAU;MAAEE,gBAAgB,CAACL,GAAG,EAAE,cAAc,EAAEI,UAAU,EAAEI,CAAC,CAAC;MAErE,MAAMe,aAAY,GAAIvE,WAAW,CAAC2C,QAAQ,CAAC6B,GAAG,CAACC,OAAM,IAAK,CACxDA,OAAO,CAACxG,IAAI,EACZwG,OAAO,CAACC,IAAG,KAAM,UAAS,GAAI,GAAGD,OAAO,CAACE,MAAM,SAAQ,GAAI,EAAE;MAAE;MAC/D,MAAM,IAAI,CAACrC,YAAY,CAACmC,OAAO,CAACE,MAAM,CAAC,EAAC,CACzC,CAAC;MAEF3B,GAAG,CAACnF,SAAS,CAAC;QACZ+G,MAAM,EAAEpB,CAAA,GAAI,CAAC;QACbqB,IAAI,EAAE,CAAC,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QACjDC,IAAI,EAAEP,aAAa;QACnBQ,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE;UAAErB,QAAQ,EAAE,EAAE;UAAEsB,WAAW,EAAE;QAAE,CAAC;QACxCC,YAAY,EAAE;UACZ,CAAC,EAAE;YAAEC,SAAS,EAAE;UAAG,CAAC;UAAE;UACtB,CAAC,EAAE;YAAEA,SAAS,EAAE;UAAG,CAAC;UAAE;UACtB,CAAC,EAAE;YAAEA,SAAS,EAAE,EAAE;YAAEC,MAAM,EAAE;UAAQ,EAAE;QACxC;MACF,CAAC,CAAC;;MAEF;MACA/B,gBAAgB,CAACL,GAAG,EAAE,iEAAiE,EAAEA,GAAG,CAACkB,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE;QAAET,QAAQ,EAAE,EAAE;QAAEM,KAAK,EAAE;MAAS,CAAC,CAAC;MAEtK,MAAM/D,OAAM,GAAI8C,GAAG,CAACqC,MAAM,CAAC,MAAM,CAAC;MAClC,OAAOnF,OAAO;IAChB,CAAC;IACDoF,YAAYA,CAAA,EAAG;MACbxF,OAAO,CAACyF,GAAG,CAAC,4BAA4B,CAAC;MACzC,IAAI,CAAC1G,WAAU,GAAI,KAAK;IAC1B,CAAC;IACD2G,aAAaA,CAAA,EAAG;MACd1F,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAC;MACtC,IAAI,CAAChB,WAAU,GAAI,IAAI;IACzB,CAAC;IACD4B,kBAAkBA,CAACgF,OAAO,EAAE;MAC1B,IAAI,CAAChH,aAAY,GAAIgH,OAAO;MAC5BpG,UAAU,CAAC,MAAM,IAAI,CAACZ,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;IACjD,CAAC;IACDiH,gBAAgBA,CAACD,OAAO,EAAE;MACxB,IAAI,CAAChH,aAAY,GAAIgH,OAAO;MAC5BpG,UAAU,CAAC,MAAM,IAAI,CAACZ,aAAY,GAAI,EAAE,EAAE,IAAI,CAAC;IACjD,CAAC;IACDkH,mBAAmBA,CAACxH,QAAQ,EAAE;MAC5B,MAAMyH,SAAQ,GAAK,CAACzH,QAAQ,CAAC2C,MAAK,IAAK,CAAC,IAAI,EAAE,IAAK,CAAC;MACpD,MAAMN,WAAU,GAAI,IAAI,CAACqF,iBAAiB,CAAC,IAAI,CAACzH,aAAa,CAAC,CAAC0H,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MAC9E,MAAMC,eAAc,GAAI,CACtB,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EACpE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAW,CACpE;MACD,MAAMC,qBAAoB,GAAI,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,CAAC;MACxE,MAAMC,gBAAe,GAAIF,eAAe,CAACG,IAAI,CAACC,OAAM,IAAKrI,MAAM,CAACqI,OAAO,EAAE,YAAY,CAAC,CAACvF,MAAM,CAAC,MAAM,MAAMJ,WAAW,CAAC;MACtH,MAAM4F,gBAAe,GAAIJ,qBAAqB,CAACE,IAAI,CAACC,OAAM,IAAKrI,MAAM,CAACqI,OAAO,EAAE,YAAY,CAAC,CAACvF,MAAM,CAAC,MAAM,MAAMJ,WAAW,CAAC;MAC5H,IAAIyF,gBAAgB,EAAE,OAAOL,SAAQ,GAAI,KAAK,CAAC,EAAE;MACjD,IAAIQ,gBAAgB,EAAE,OAAOR,SAAQ,GAAI,GAAE,IAAK,CAAC,EAAE;MACnD,OAAO,CAAC;IACV,CAAC;IACDS,oBAAoBA,CAAClI,QAAQ,EAAE;MAC7B,MAAMuD,UAAS,GAAMvD,QAAQ,CAACuD,UAAS,IAAMvD,QAAQ,CAAC2C,MAAK,IAAK,IAAI,EAAE,CAAE,IAAK,CAAC,IAAK,CAAC;MACpF,MAAMwF,cAAa,GAAKnI,QAAQ,CAACoI,aAAa,EAAEC,OAAM,IAAK,CAAC,IAAK,CAAC;MAClE,MAAMC,cAAa,GAAKtI,QAAQ,CAACoI,aAAa,EAAEJ,OAAM,IAAK,CAAC,IAAK,CAAC;MAClE,MAAMO,YAAW,GAAIJ,cAAa,GAAI5E,UAAS,GAAI,IAAG,IAAK,CAAC,EAAE;MAC9D,MAAMiF,YAAW,GAAIF,cAAa,GAAI/E,UAAS,GAAI,GAAE,IAAK,CAAC,EAAE;MAC7D,OAAOgF,YAAW,GAAIC,YAAW,IAAK,CAAC;IACzC,CAAC;IACD3F,wBAAwBA,CAACF,MAAM,EAAE;MAC/B,MAAM8F,mBAAkB,GAAIC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAEjG,MAAK,IAAK,CAAC,EAAG,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE;MACjF,MAAMkG,iBAAgB,GAAI,IAAI,EAAE;MAChC,OAAOH,IAAI,CAACI,KAAK,CAACL,mBAAkB,GAAII,iBAAiB,KAAK,CAAC;IACjE,CAAC;IACD9F,+BAA+BA,CAACJ,MAAM,EAAE;MACtC,MAAMoG,IAAG,GAAI,IAAI,EAAE;MACnB,MAAMC,aAAY,GAAIN,IAAI,CAACC,GAAG,CAAEhG,MAAK,IAAK,CAAC,EAAG,MAAM,KAAK,CAAC,EAAE;MAC5D,OAAO+F,IAAI,CAACI,KAAK,CAAEE,aAAY,GAAID,IAAI,GAAI,CAAC,KAAK,CAAC,EAAE;IACtD,CAAC;IACD9F,4BAA4BA,CAACN,MAAM,EAAE;MACnC,MAAMoG,IAAG,GAAI,IAAI,EAAE;MACnB,MAAME,YAAW,GAAIP,IAAI,CAACC,GAAG,CAAEhG,MAAK,IAAK,CAAC,EAAG,KAAK,KAAK,CAAC,EAAE;MAC1D,OAAO+F,IAAI,CAACI,KAAK,CAACG,YAAW,GAAIF,IAAI,KAAK,CAAC,EAAE;IAC/C,CAAC;IACD5F,uBAAuBA,CAACnD,QAAQ,EAAE;MAChC,MAAMkJ,UAAS,GAAI,IAAI,CAACC,yBAAyB,CAACnJ,QAAQ,CAAC;MAC3D,MAAMoJ,aAAY,GAAK,CAAC,IAAI,CAACC,sBAAsB,CAACrJ,QAAQ,KAAK,CAAC,KAAKkJ,UAAU,CAACI,eAAc,IAAK,CAAC,CAAC,IAAK,CAAC;MAC7G,IAAIF,aAAY,IAAK,KAAK,EAAE,OAAO,CAAC;MACpC,IAAIA,aAAY,IAAK,KAAK,EAAE,OAAOV,IAAI,CAACI,KAAK,CAAC,CAACM,aAAY,GAAI,KAAK,IAAI,IAAI,KAAK,CAAC,EAAE;MACpF,IAAIA,aAAY,IAAK,KAAK,EAAE,OAAOV,IAAI,CAACI,KAAK,CAAC,IAAG,GAAI,CAACM,aAAY,GAAI,KAAK,IAAI,IAAI,KAAK,CAAC,EAAE;MAC3F,IAAIA,aAAY,IAAK,MAAM,EAAE,OAAOV,IAAI,CAACI,KAAK,CAAC,QAAO,GAAI,CAACM,aAAY,GAAI,KAAK,IAAI,IAAI,KAAK,CAAC,EAAE;MAChG,IAAIA,aAAY,IAAK,MAAM,EAAE,OAAOV,IAAI,CAACI,KAAK,CAAC,QAAO,GAAI,CAACM,aAAY,GAAI,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;MACjG,OAAOV,IAAI,CAACI,KAAK,CAAC,SAAQ,GAAI,CAACM,aAAY,GAAI,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;IACvE,CAAC;IACDD,yBAAyBA,CAACnJ,QAAQ,EAAE;MAClC,MAAMuJ,KAAI,GAAKvJ,QAAQ,CAAC2C,MAAK,GAAI,EAAE,IAAK,GAAG,EAAE;MAC7C,MAAM6G,cAAa,GAAID,KAAI,GAAKvJ,QAAQ,CAAC2C,MAAK,IAAK,CAAC,GAAI,CAAC;MACzD,MAAM8G,aAAY,GAAIF,KAAI,GAAK,IAAI,CAAC/B,mBAAmB,CAACxH,QAAQ,KAAK,CAAC,GAAI,CAAC;MAC3E,MAAM0J,cAAa,GAAIH,KAAI,GAAK,IAAI,CAACrB,oBAAoB,CAAClI,QAAQ,KAAK,CAAC,GAAI,CAAC;MAC7E,MAAM2J,iBAAgB,GAAIJ,KAAI,GAAKvJ,QAAQ,CAAC4J,cAAa,IAAK,CAAC,GAAI,CAAC;MACpE,MAAMC,YAAW,GAAIN,KAAI,GAAKvJ,QAAQ,CAAC8J,SAAQ,IAAK,CAAC,GAAI,CAAC;MAC1D,MAAMC,qBAAoB,GAAIrB,IAAI,CAACC,GAAG,CAAE3I,QAAQ,CAACgK,kBAAiB,IAAK,CAAC,EAAG,KAAK,KAAK,CAAC;MACtF,MAAMC,SAAQ,GAAIvB,IAAI,CAACC,GAAG,CAAE3I,QAAQ,CAACiK,SAAQ,IAAK,CAAC,EAAG,KAAK,KAAK,CAAC,EAAE;MACnE,MAAMC,eAAc,GAAK,IAAI,CAACrH,wBAAwB,CAAC7C,QAAQ,CAAC2C,MAAM,KAAK,CAAC,IAAK,CAAC;MAClF,MAAMwH,sBAAqB,GAAK,IAAI,CAACpH,+BAA+B,CAAC/C,QAAQ,CAAC2C,MAAM,KAAK,CAAC,IAAK,CAAC;MAChG,MAAMyH,mBAAkB,GAAK,IAAI,CAACnH,4BAA4B,CAACjD,QAAQ,CAAC2C,MAAM,KAAK,CAAC,IAAK,CAAC;MAE1F,MAAM2G,eAAc,GAAIE,cAAa,GAAIC,aAAY,GAAIC,cAAa,GAAIC,iBAAgB,GAAIE,YAAW,GAAIE,qBAAoB,GAAIE,SAAQ,GAAIC,eAAc,GAAIC,sBAAqB,GAAIC,mBAAmB;MAE/M,OAAO;QACLZ,cAAc,EAAEA,cAAa,IAAK,CAAC;QACnCC,aAAa,EAAEA,aAAY,IAAK,CAAC;QACjCC,cAAc,EAAEA,cAAa,IAAK,CAAC;QACnCC,iBAAiB,EAAEA,iBAAgB,IAAK,CAAC;QACzCE,YAAY,EAAEA,YAAW,IAAK,CAAC;QAC/BE,qBAAqB,EAAEA,qBAAoB,IAAK,CAAC;QACjDE,SAAS,EAAEA,SAAQ,IAAK,CAAC;QACzBC,eAAe,EAAEA,eAAc,IAAK,CAAC;QACrCC,sBAAsB,EAAEA,sBAAqB,IAAK,CAAC;QACnDC,mBAAmB,EAAEA,mBAAkB,IAAK,CAAC;QAC7Cd,eAAe,EAAEA,eAAc,IAAK;MACtC,CAAC;IACH,CAAC;IACDD,sBAAsBA,CAACrJ,QAAQ,EAAE;MAC/B,MAAMqK,YAAW,GAAI,CAACrK,QAAQ,CAACsK,QAAQ,EAAEC,cAAa,IAAK,CAAC,KAAKvK,QAAQ,CAACsK,QAAQ,EAAEE,aAAY,IAAK,CAAC,CAAC;MACvG,MAAMxB,aAAY,GAAKhJ,QAAQ,CAAC2C,MAAK,IAAK,CAAC,IAAK,CAAC,EAAE;MACnD,MAAM8H,UAAS,GAAI,IAAI,CAACjD,mBAAmB,CAACxH,QAAQ,KAAK,CAAC;MAC1D,MAAM0K,WAAU,GAAI,IAAI,CAACxC,oBAAoB,CAAClI,QAAQ,KAAK,CAAC;MAC5D,MAAM2K,eAAc,GAAI,IAAI,CAACC,wBAAwB,CAAC5K,QAAQ,CAACwE,QAAQ,KAAK,CAAC;MAE7E,OAAOwE,aAAY,GAAIqB,YAAW,GAAII,UAAS,GAAIC,WAAU,GAAIC,eAAc,IAAK,CAAC;IACvF,CAAC;IACDrH,kBAAkBA,CAACtD,QAAQ,EAAE;MAC3B,MAAMwD,aAAY,GAAI,IAAI,CAAC6F,sBAAsB,CAACrJ,QAAQ,KAAK,CAAC;MAChE,MAAMkD,eAAc,GAAI,IAAI,CAAC2H,wBAAwB,CAAC7K,QAAQ,KAAK,CAAC;MAEpE,OAAOwD,aAAY,GAAIN,eAAc,IAAK,CAAC;IAC7C,CAAC;IACD2H,wBAAwBA,CAAC7K,QAAQ,EAAE;MACjC,MAAMkK,eAAc,GAAI,IAAI,CAACrH,wBAAwB,CAAC7C,QAAQ,CAAC2C,MAAM,KAAK,CAAC;MAC3E,MAAMwH,sBAAqB,GAAI,IAAI,CAACpH,+BAA+B,CAAC/C,QAAQ,CAAC2C,MAAM,KAAK,CAAC;MACzF,MAAMyH,mBAAkB,GAAI,IAAI,CAACnH,4BAA4B,CAACjD,QAAQ,CAAC2C,MAAM,KAAK,CAAC;MACnF,MAAM4B,cAAa,GAAI,IAAI,CAACpB,uBAAuB,CAACnD,QAAQ,KAAK,CAAC;MAClE,MAAM8K,iBAAgB,GAAI,IAAI,CAACC,0BAA0B,CAAC/K,QAAQ,CAACwE,QAAQ,KAAK,CAAC;MAEjF,OAAO0F,eAAc,GAAIC,sBAAqB,GAAIC,mBAAkB,GAAI7F,cAAa,GAAIuG,iBAAgB,IAAK,CAAC;IACjH,CAAC;IACDC,0BAA0BA,CAACvG,QAAQ,EAAE;MACnC,OAAOA,QAAO,CACXwG,MAAM,CAACC,CAAA,IAAKA,CAAC,CAAC1E,IAAG,KAAM,YAAY,EACnC2E,MAAM,CAAC,CAACC,GAAG,EAAEF,CAAC,KAAKE,GAAE,GAAIxG,MAAM,CAACsG,CAAC,CAACzE,MAAK,IAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;IAC5D,CAAC;IACDoE,wBAAwBA,CAACpG,QAAQ,EAAE;MACjC,OAAOA,QAAO,CACXwG,MAAM,CAACC,CAAA,IAAKA,CAAC,CAAC1E,IAAG,KAAM,UAAU,EACjC2E,MAAM,CAAC,CAACC,GAAG,EAAEF,CAAC,KAAKE,GAAE,GAAIxG,MAAM,CAACsG,CAAC,CAACzE,MAAK,IAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;IAC5D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}