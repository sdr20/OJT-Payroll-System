{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from 'axios';\nexport default {\n  name: 'EmployeeRegister',\n  data() {\n    return {\n      username: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n      birthday: '',\n      hireDate: '',\n      position: '',\n      civilStatus: '',\n      contactInfo: '',\n      email: '',\n      sss: '',\n      philhealth: '',\n      hdmf: '',\n      error: null,\n      success: false\n    };\n  },\n  methods: {\n    async register() {\n      try {\n        this.error = null;\n        this.success = false;\n        const response = await axios.post('http://localhost:3000/api/register', {\n          username: this.username,\n          password: this.password,\n          firstName: this.firstName,\n          lastName: this.lastName,\n          birthday: this.birthday,\n          hireDate: this.hireDate,\n          position: this.position,\n          civilStatus: this.civilStatus,\n          contactInfo: this.contactInfo,\n          email: this.email,\n          sss: this.sss,\n          philhealth: this.philhealth,\n          hdmf: this.hdmf\n        });\n        if (response.status === 200) {\n          this.success = true;\n          // Clear form\n          Object.keys(this.$data).forEach(key => {\n            if (typeof this.$data[key] === 'string') {\n              this.$data[key] = '';\n            }\n          });\n          // Redirect to login\n          setTimeout(() => {\n            this.$router.push('/employee-login');\n          }, 1500);\n        }\n      } catch (error) {\n        this.error = error.response?.data?.error || 'Registration failed';\n        console.error('Failed to register:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","username","password","firstName","lastName","birthday","hireDate","position","civilStatus","contactInfo","email","sss","philhealth","hdmf","error","success","methods","register","response","post","status","Object","keys","$data","forEach","key","setTimeout","$router","push","console"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\components\\employeelogin\\EmployeeRegister.vue"],"sourcesContent":["<template>\r\n  <!-- Keep your existing template code -->\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'EmployeeRegister',\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      birthday: '',\r\n      hireDate: '',\r\n      position: '',\r\n      civilStatus: '',\r\n      contactInfo: '',\r\n      email: '',\r\n      sss: '',\r\n      philhealth: '',\r\n      hdmf: '',\r\n      error: null,\r\n      success: false\r\n    };\r\n  },\r\n  methods: {\r\n    async register() {\r\n      try {\r\n        this.error = null;\r\n        this.success = false;\r\n        \r\n        const response = await axios.post('http://localhost:3000/api/register', {\r\n          username: this.username,\r\n          password: this.password,\r\n          firstName: this.firstName,\r\n          lastName: this.lastName,\r\n          birthday: this.birthday,\r\n          hireDate: this.hireDate,\r\n          position: this.position,\r\n          civilStatus: this.civilStatus,\r\n          contactInfo: this.contactInfo,\r\n          email: this.email,\r\n          sss: this.sss,\r\n          philhealth: this.philhealth,\r\n          hdmf: this.hdmf,\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.success = true;\r\n          // Clear form\r\n          Object.keys(this.$data).forEach(key => {\r\n            if (typeof this.$data[key] === 'string') {\r\n              this.$data[key] = '';\r\n            }\r\n          });\r\n          // Redirect to login\r\n          setTimeout(() => {\r\n            this.$router.push('/employee-login');\r\n          }, 1500);\r\n        }\r\n      } catch (error) {\r\n        this.error = error.response?.data?.error || 'Registration failed';\r\n        console.error('Failed to register:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":";;;AAKA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,KAAK,EAAE,EAAE;MACTC,GAAG,EAAE,EAAE;MACPC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAG;MACf,IAAI;QACF,IAAI,CAACH,KAAI,GAAI,IAAI;QACjB,IAAI,CAACC,OAAM,GAAI,KAAK;QAEpB,MAAMG,QAAO,GAAI,MAAMpB,KAAK,CAACqB,IAAI,CAAC,oCAAoC,EAAE;UACtElB,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,SAAS,EAAE,IAAI,CAACA,SAAS;UACzBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BC,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BC,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,GAAG,EAAE,IAAI,CAACA,GAAG;UACbC,UAAU,EAAE,IAAI,CAACA,UAAU;UAC3BC,IAAI,EAAE,IAAI,CAACA;QACb,CAAC,CAAC;QAEF,IAAIK,QAAQ,CAACE,MAAK,KAAM,GAAG,EAAE;UAC3B,IAAI,CAACL,OAAM,GAAI,IAAI;UACnB;UACAM,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,KAAK,CAAC,CAACC,OAAO,CAACC,GAAE,IAAK;YACrC,IAAI,OAAO,IAAI,CAACF,KAAK,CAACE,GAAG,MAAM,QAAQ,EAAE;cACvC,IAAI,CAACF,KAAK,CAACE,GAAG,IAAI,EAAE;YACtB;UACF,CAAC,CAAC;UACF;UACAC,UAAU,CAAC,MAAM;YACf,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;UACtC,CAAC,EAAE,IAAI,CAAC;QACV;MACF,EAAE,OAAOd,KAAK,EAAE;QACd,IAAI,CAACA,KAAI,GAAIA,KAAK,CAACI,QAAQ,EAAElB,IAAI,EAAEc,KAAI,IAAK,qBAAqB;QACjEe,OAAO,CAACf,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}