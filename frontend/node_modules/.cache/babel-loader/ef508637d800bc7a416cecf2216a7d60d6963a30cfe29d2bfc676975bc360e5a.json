{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  name: 'SalarySlips',\n  data() {\n    return {\n      employees: [{\n        id: 1,\n        name: 'John Doe',\n        totalEarnings: 50000,\n        totalDeductions: 5000,\n        totalSalary: 45000,\n        salaryMonth: '02/20/2025',\n        email: 'john.doe@example.com'\n      }, {\n        id: 2,\n        name: 'allen Kalbo',\n        totalEarnings: 60000,\n        totalDeductions: 7000,\n        totalSalary: 53000,\n        salaryMonth: '02/22/2025',\n        email: 'allen.kalbo@example.com'\n      }, {\n        id: 3,\n        name: 'Adrian d Grate',\n        totalEarnings: 52000,\n        totalDeductions: 4000,\n        totalSalary: 48000,\n        salaryMonth: '02/25/2025',\n        email: 'adrian.grate@example.com'\n      }, {\n        id: 4,\n        name: 'Glenn d dragon',\n        totalEarnings: 58000,\n        totalDeductions: 6000,\n        totalSalary: 52000,\n        salaryMonth: '02/28/2025',\n        email: 'glenn.dragon@example.com'\n      }, {\n        id: 5,\n        name: 'Emjay Uzumaki',\n        totalEarnings: 49000,\n        totalDeductions: 3000,\n        totalSalary: 46000,\n        salaryMonth: '02/15/2025',\n        email: 'emjay.uzumaki@example.com'\n      }, {\n        id: 6,\n        name: 'Steven Uchiha',\n        totalEarnings: 62000,\n        totalDeductions: 8000,\n        totalSalary: 54000,\n        salaryMonth: '02/10/2025',\n        email: 'steven.uchiha@example.com'\n      }, {\n        id: 7,\n        name: 'Jake D Bojek',\n        totalEarnings: 56000,\n        totalDeductions: 5000,\n        totalSalary: 51000,\n        salaryMonth: '02/05/2025',\n        email: 'jake.bojek@example.com'\n      }, {\n        id: 8,\n        name: 'Deo D dancer',\n        totalEarnings: 61000,\n        totalDeductions: 7500,\n        totalSalary: 53500,\n        salaryMonth: '02/18/2025',\n        email: 'deo.dancer@example.com'\n      }],\n      searchQuery: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      payslipGenerationStatus: {} // Track payslip generation status\n    };\n  },\n  computed: {\n    filteredEmployees() {\n      return this.employees.filter(employee => employee.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    },\n    totalPages() {\n      return Math.ceil(this.filteredEmployees.length / this.itemsPerPage);\n    },\n    paginatedEmployees() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredEmployees.slice(start, end);\n    }\n  },\n  methods: {\n    async generatePayslip(employee) {\n      try {\n        // Make a request to your server to generate the payslip\n        const response = await axios.post('/api/payslips/generate', {\n          employeeId: employee.id\n        }, {\n          responseType: 'blob' // Important for handling PDF downloads\n        });\n\n        // Create a Blob from the PDF stream\n        const file = new Blob([response.data], {\n          type: 'application/pdf'\n        });\n\n        // Create a temporary URL for the file\n        const fileURL = URL.createObjectURL(file);\n\n        // Create a link element to trigger the download\n        const link = document.createElement('a');\n        link.href = fileURL;\n        link.setAttribute('download', `payslip-${employee.name}-${employee.salaryMonth}.pdf`); // Customize the file name\n        document.body.appendChild(link);\n\n        // Trigger the download\n        link.click();\n\n        // Clean up\n        link.remove();\n        URL.revokeObjectURL(fileURL);\n        alert(`Payslip generated and downloaded for ${employee.name}`);\n      } catch (error) {\n        console.error('Error generating payslip:', error);\n        alert(`Failed to generate payslip for ${employee.name}`);\n      }\n    },\n    async sendPayslipEmail(employee) {\n      try {\n        // Make a request to your server to send the payslip email\n        const response = await axios.post('/api/payslips/send-email', {\n          employeeId: employee.id,\n          employeeEmail: employee.email // Assuming you have the employee's email\n        });\n        console.log(response.data.message);\n        alert(`Payslip email sent to ${employee.name} at ${employee.email}`);\n      } catch (error) {\n        console.error('Error sending payslip email:', error);\n        alert(`Failed to send payslip email to ${employee.name}`);\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","employees","id","totalEarnings","totalDeductions","totalSalary","salaryMonth","email","searchQuery","currentPage","itemsPerPage","payslipGenerationStatus","computed","filteredEmployees","filter","employee","toLowerCase","includes","totalPages","Math","ceil","length","paginatedEmployees","start","end","slice","methods","generatePayslip","response","post","employeeId","responseType","file","Blob","type","fileURL","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","alert","error","console","sendPayslipEmail","employeeEmail","log","message","nextPage","prevPage"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\admind\\SalarySlips.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Search Input -->\r\n      <div class=\"flex justify-between items-center mb-4\">\r\n        <input\r\n          v-model=\"searchQuery\"\r\n          type=\"text\"\r\n          placeholder=\"Search Employee...\"\r\n          class=\"border rounded-lg px-4 py-2 w-1/3\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Salary Table -->\r\n      <div class=\"bg-white p-5 rounded-xl shadow-md\">\r\n        <table class=\"min-w-full divide-y divide-gray-200\">\r\n          <thead class=\"bg-gray-50\">\r\n            <tr>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Employee Name</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total Earnings</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total Deductions</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total Salary</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Salary Month</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"bg-white divide-y divide-gray-200\">\r\n            <tr v-for=\"employee in paginatedEmployees\" :key=\"employee.id\">\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P{{ employee.totalEarnings.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P{{ employee.totalDeductions.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P{{ employee.totalSalary.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ employee.salaryMonth }}</td>\r\n              <td class=\"px-6 py-4 text-sm font-medium flex gap-2\">\r\n                <button @click=\"generatePayslip(employee)\" class=\"bg-green-50 text-green-600 font-semibold py-1.5 px-3 rounded-lg hover:bg-green-100 transition-all duration-200 flex items-center gap-2 text-xs\">\r\n                  <span class=\"material-icons text-green-600\">description</span> Generate\r\n                </button>\r\n                <button @click=\"sendPayslipEmail(employee)\" class=\"bg-blue-50 text-blue-600 font-semibold py-1.5 px-3 rounded-lg hover:bg-blue-100 transition-all duration-200 flex items-center gap-2 text-xs\">\r\n                  <span class=\"material-icons text-blue-600\">email</span> Send Email\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <!-- Pagination Controls -->\r\n      <div class=\"flex justify-center items-center mt-4 gap-4\">\r\n        <button\r\n          @click=\"prevPage\"\r\n          :disabled=\"currentPage === 1\"\r\n          class=\"bg-gray-200 p-2 rounded-full hover:bg-gray-300 transition disabled:opacity-50\"\r\n        >\r\n          <span class=\"material-icons\">chevron_left</span>\r\n        </button>\r\n\r\n        <span class=\"text-gray-700\">Page {{ currentPage }} of {{ totalPages }}</span>\r\n\r\n        <button\r\n          @click=\"nextPage\"\r\n          :disabled=\"currentPage === totalPages\"\r\n          class=\"bg-gray-200 p-2 rounded-full hover:bg-gray-300 transition disabled:opacity-50\"\r\n        >\r\n          <span class=\"material-icons\">chevron_right</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'SalarySlips',\r\n  data() {\r\n    return {\r\n      employees: [\r\n        { id: 1, name: 'John Doe', totalEarnings: 50000, totalDeductions: 5000, totalSalary: 45000, salaryMonth: '02/20/2025', email: 'john.doe@example.com' },\r\n        { id: 2, name: 'allen Kalbo', totalEarnings: 60000, totalDeductions: 7000, totalSalary: 53000, salaryMonth: '02/22/2025', email: 'allen.kalbo@example.com' },\r\n        { id: 3, name: 'Adrian d Grate', totalEarnings: 52000, totalDeductions: 4000, totalSalary: 48000, salaryMonth: '02/25/2025', email: 'adrian.grate@example.com' },\r\n        { id: 4, name: 'Glenn d dragon', totalEarnings: 58000, totalDeductions: 6000, totalSalary: 52000, salaryMonth: '02/28/2025', email: 'glenn.dragon@example.com' },\r\n        { id: 5, name: 'Emjay Uzumaki', totalEarnings: 49000, totalDeductions: 3000, totalSalary: 46000, salaryMonth: '02/15/2025', email: 'emjay.uzumaki@example.com' },\r\n        { id: 6, name: 'Steven Uchiha', totalEarnings: 62000, totalDeductions: 8000, totalSalary: 54000, salaryMonth: '02/10/2025', email: 'steven.uchiha@example.com' },\r\n        { id: 7, name: 'Jake D Bojek', totalEarnings: 56000, totalDeductions: 5000, totalSalary: 51000, salaryMonth: '02/05/2025', email: 'jake.bojek@example.com' },\r\n        { id: 8, name: 'Deo D dancer', totalEarnings: 61000, totalDeductions: 7500, totalSalary: 53500, salaryMonth: '02/18/2025', email: 'deo.dancer@example.com' },\r\n      ],\r\n      searchQuery: '',\r\n      currentPage: 1,\r\n      itemsPerPage: 10,\r\n      payslipGenerationStatus: {}, // Track payslip generation status\r\n    };\r\n  },\r\n  computed: {\r\n    filteredEmployees() {\r\n      return this.employees.filter((employee) =>\r\n        employee.name.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.filteredEmployees.length / this.itemsPerPage);\r\n    },\r\n    paginatedEmployees() {\r\n      const start = (this.currentPage - 1) * this.itemsPerPage;\r\n      const end = start + this.itemsPerPage;\r\n      return this.filteredEmployees.slice(start, end);\r\n    },\r\n  },\r\n  methods: {\r\n    async generatePayslip(employee) {\r\n      try {\r\n        // Make a request to your server to generate the payslip\r\n        const response = await axios.post('/api/payslips/generate', {\r\n          employeeId: employee.id,\r\n        }, {\r\n          responseType: 'blob', // Important for handling PDF downloads\r\n        });\r\n\r\n        // Create a Blob from the PDF stream\r\n        const file = new Blob([response.data], { type: 'application/pdf' });\r\n\r\n        // Create a temporary URL for the file\r\n        const fileURL = URL.createObjectURL(file);\r\n\r\n        // Create a link element to trigger the download\r\n        const link = document.createElement('a');\r\n        link.href = fileURL;\r\n        link.setAttribute('download', `payslip-${employee.name}-${employee.salaryMonth}.pdf`); // Customize the file name\r\n        document.body.appendChild(link);\r\n\r\n        // Trigger the download\r\n        link.click();\r\n\r\n        // Clean up\r\n        link.remove();\r\n        URL.revokeObjectURL(fileURL);\r\n\r\n        alert(`Payslip generated and downloaded for ${employee.name}`);\r\n      } catch (error) {\r\n        console.error('Error generating payslip:', error);\r\n        alert(`Failed to generate payslip for ${employee.name}`);\r\n      }\r\n    },\r\n    async sendPayslipEmail(employee) {\r\n      try {\r\n        // Make a request to your server to send the payslip email\r\n        const response = await axios.post('/api/payslips/send-email', {\r\n          employeeId: employee.id,\r\n          employeeEmail: employee.email // Assuming you have the employee's email\r\n        });\r\n\r\n        console.log(response.data.message);\r\n        alert(`Payslip email sent to ${employee.name} at ${employee.email}`);\r\n      } catch (error) {\r\n        console.error('Error sending payslip email:', error);\r\n        alert(`Failed to send payslip email to ${employee.name}`);\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}