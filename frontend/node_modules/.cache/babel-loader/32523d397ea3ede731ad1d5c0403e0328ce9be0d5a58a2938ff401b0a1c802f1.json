{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nexport default {\n  name: 'SalarySlips',\n  data() {\n    return {\n      employees: [],\n      searchQuery: '',\n      selectedMonth: new Date().toISOString().slice(0, 7),\n      // Default to current month (YYYY-MM)\n      currentPage: 1,\n      itemsPerPage: 5,\n      payslipGenerationStatus: {},\n      isLoading: false,\n      statusMessage: ''\n    };\n  },\n  computed: {\n    filteredEmployees() {\n      return this.employees.filter(employee => employee.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    },\n    totalPages() {\n      return Math.ceil(this.filteredEmployees.length / this.itemsPerPage) || 1;\n    },\n    paginatedEmployees() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredEmployees.slice(start, end);\n    }\n  },\n  created() {\n    this.fetchEmployees();\n  },\n  methods: {\n    async fetchEmployees() {\n      this.isLoading = true;\n      this.statusMessage = '';\n      try {\n        const response = await axios.get('http://localhost:7777/api/employees');\n        this.employees = response.data.map(employee => ({\n          id: employee.id,\n          name: `${employee.firstName} ${employee.lastName}`,\n          totalEarnings: this.calculateTotalEarnings(employee),\n          totalDeductions: this.calculateTotalDeductions(employee),\n          totalSalary: this.calculateNetSalary(employee),\n          salaryMonth: this.formatSalaryMonth(this.selectedMonth),\n          email: employee.email,\n          position: employee.position,\n          rawData: employee // Store raw data for detailed payslip generation\n        })) || [];\n        this.showSuccessMessage('Employees loaded successfully!');\n      } catch (error) {\n        console.error('Error fetching employees:', error);\n        this.showErrorMessage('Failed to load employees. Please try again.');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async refreshData() {\n      await this.fetchEmployees();\n    },\n    calculateTotalEarnings(employee) {\n      const baseEarnings = (employee.earnings?.travelExpenses || 0) + (employee.earnings?.otherEarnings || 0);\n      const payheadEarnings = employee.payheads?.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + p.amount, 0) || 0;\n      return employee.salary + baseEarnings + payheadEarnings;\n    },\n    calculateTotalDeductions(employee) {\n      const baseDeductions = (employee.deductions?.sss || 0) + (employee.deductions?.philhealth || 0) + (employee.deductions?.pagibig || 0);\n      const payheadDeductions = employee.payheads?.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + p.amount, 0) || 0;\n      return baseDeductions + payheadDeductions;\n    },\n    calculateNetSalary(employee) {\n      return this.calculateTotalEarnings(employee) - this.calculateTotalDeductions(employee);\n    },\n    formatSalaryMonth(month) {\n      const [year, monthNum] = month.split('-');\n      return `${monthNum}/01/${year}`; // Format as MM/DD/YYYY starting at 1st of month\n    },\n    async generatePayslip(employee) {\n      this.$set(this.payslipGenerationStatus, employee.id, {\n        generating: true\n      });\n      this.statusMessage = '';\n      try {\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text('Payslip', 20, 20);\n        doc.setFontSize(12);\n        doc.text(`Employee ID: ${employee.id}`, 20, 40);\n        doc.text(`Name: ${employee.name}`, 20, 50);\n        doc.text(`Position: ${employee.position}`, 20, 60);\n        doc.text(`Salary Month: ${employee.salaryMonth}`, 20, 70);\n\n        // Detailed Earnings\n        doc.text('Earnings:', 20, 90);\n        let yPos = 100;\n        doc.text(`Base Salary: ₱${employee.rawData.salary.toLocaleString()}`, 20, yPos);\n        yPos += 10;\n        if (employee.rawData.earnings.travelExpenses) {\n          doc.text(`Travel Expenses: ₱${employee.rawData.earnings.travelExpenses.toLocaleString()}`, 20, yPos);\n          yPos += 10;\n        }\n        if (employee.rawData.earnings.otherEarnings) {\n          doc.text(`Other Earnings: ₱${employee.rawData.earnings.otherEarnings.toLocaleString()}`, 20, yPos);\n          yPos += 10;\n        }\n        employee.rawData.payheads?.filter(p => p.type === 'Earnings').forEach(payhead => {\n          doc.text(`${payhead.name}: ₱${payhead.amount.toLocaleString()}`, 20, yPos);\n          yPos += 10;\n        });\n        doc.text(`Total Earnings: ₱${employee.totalEarnings.toLocaleString()}`, 20, yPos);\n        yPos += 20;\n\n        // Detailed Deductions\n        doc.text('Deductions:', 20, yPos);\n        yPos += 10;\n        if (employee.rawData.deductions.sss) {\n          doc.text(`SSS: ₱${employee.rawData.deductions.sss.toLocaleString()}`, 20, yPos);\n          yPos += 10;\n        }\n        if (employee.rawData.deductions.philhealth) {\n          doc.text(`PhilHealth: ₱${employee.rawData.deductions.philhealth.toLocaleString()}`, 20, yPos);\n          yPos += 10;\n        }\n        if (employee.rawData.deductions.pagibig) {\n          doc.text(`Pag-IBIG: ₱${employee.rawData.deductions.pagibig.toLocaleString()}`, 20, yPos);\n          yPos += 10;\n        }\n        employee.rawData.payheads?.filter(p => p.type === 'Deductions').forEach(payhead => {\n          doc.text(`${payhead.name}: ₱${payhead.amount.toLocaleString()}`, 20, yPos);\n          yPos += 10;\n        });\n        doc.text(`Total Deductions: ₱${employee.totalDeductions.toLocaleString()}`, 20, yPos);\n        yPos += 20;\n\n        // Net Salary\n        doc.text(`Net Salary: ₱${employee.totalSalary.toLocaleString()}`, 20, yPos);\n        yPos += 10;\n        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, yPos);\n        const pdfBlob = doc.output('blob');\n        const reader = new FileReader();\n        reader.readAsDataURL(pdfBlob);\n        reader.onloadend = async () => {\n          const base64data = reader.result;\n          localStorage.setItem(`payslip_${employee.id}_${employee.salaryMonth}`, base64data);\n          const link = document.createElement('a');\n          link.href = URL.createObjectURL(pdfBlob);\n          link.download = `payslip-${employee.name}-${employee.salaryMonth}.pdf`;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          await axios.post('http://localhost:7777/api/payslips/generate', {\n            employeeId: employee.id,\n            payslipData: base64data,\n            salaryMonth: employee.salaryMonth\n          });\n          this.showSuccessMessage(`Payslip generated for ${employee.name}`);\n          this.$set(this.payslipGenerationStatus, employee.id, {\n            generating: false\n          });\n        };\n      } catch (error) {\n        console.error('Error generating payslip:', error);\n        this.showErrorMessage(`Failed to generate payslip for ${employee.name}`);\n        this.$set(this.payslipGenerationStatus, employee.id, {\n          generating: false\n        });\n      }\n    },\n    async sendPayslipEmail(employee) {\n      this.$set(this.payslipGenerationStatus, employee.id, {\n        sending: true\n      });\n      this.statusMessage = '';\n      try {\n        const payslipKey = `payslip_${employee.id}_${employee.salaryMonth}`;\n        let payslipData = localStorage.getItem(payslipKey);\n        if (!payslipData) {\n          await this.generatePayslip(employee);\n          payslipData = localStorage.getItem(payslipKey);\n        }\n        const response = await axios.post('http://localhost:7777/api/payslips/send-email', {\n          employeeId: employee.id,\n          employeeEmail: employee.email,\n          payslipData,\n          salaryMonth: employee.salaryMonth\n        });\n        if (response.status === 200) {\n          this.showSuccessMessage(`Payslip email sent to ${employee.name} at ${employee.email}`);\n        }\n      } catch (error) {\n        console.error('Error sending payslip email:', error);\n        this.showErrorMessage(`Failed to send payslip email to ${employee.name}`);\n      } finally {\n        this.$set(this.payslipGenerationStatus, employee.id, {\n          sending: false\n        });\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    showSuccessMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => this.statusMessage = '', 3000);\n    },\n    showErrorMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => this.statusMessage = '', 3000);\n    }\n  }\n};","map":{"version":3,"names":["axios","jsPDF","name","data","employees","searchQuery","selectedMonth","Date","toISOString","slice","currentPage","itemsPerPage","payslipGenerationStatus","isLoading","statusMessage","computed","filteredEmployees","filter","employee","toLowerCase","includes","totalPages","Math","ceil","length","paginatedEmployees","start","end","created","fetchEmployees","methods","response","get","map","id","firstName","lastName","totalEarnings","calculateTotalEarnings","totalDeductions","calculateTotalDeductions","totalSalary","calculateNetSalary","salaryMonth","formatSalaryMonth","email","position","rawData","showSuccessMessage","error","console","showErrorMessage","refreshData","baseEarnings","earnings","travelExpenses","otherEarnings","payheadEarnings","payheads","p","type","reduce","sum","amount","salary","baseDeductions","deductions","sss","philhealth","pagibig","payheadDeductions","month","year","monthNum","split","generatePayslip","$set","generating","doc","setFontSize","text","yPos","toLocaleString","forEach","payhead","toLocaleDateString","pdfBlob","output","reader","FileReader","readAsDataURL","onloadend","base64data","result","localStorage","setItem","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","post","employeeId","payslipData","sendPayslipEmail","sending","payslipKey","getItem","employeeEmail","status","nextPage","prevPage","message","setTimeout"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\admind\\SalarySlips.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Header with Search, Month Picker, and Refresh -->\r\n      <div class=\"flex justify-between items-center mb-4 gap-4\">\r\n        <input\r\n          v-model=\"searchQuery\"\r\n          type=\"text\"\r\n          placeholder=\"Search Employee...\"\r\n          class=\"border rounded-lg px-4 py-2 w-1/3 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all\"\r\n        />\r\n        <input\r\n          v-model=\"selectedMonth\"\r\n          type=\"month\"\r\n          class=\"border rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all\"\r\n          @change=\"fetchEmployees\"\r\n        />\r\n        <button @click=\"refreshData\" \r\n                class=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-all duration-200\"\r\n                :disabled=\"isLoading\">\r\n          {{ isLoading ? 'Refreshing...' : 'Refresh' }}\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Salary Table -->\r\n      <div class=\"bg-white p-5 rounded-xl shadow-md\">\r\n        <table class=\"min-w-full divide-y divide-gray-200\">\r\n          <thead class=\"bg-gray-50\">\r\n            <tr>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Employee Name</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total Earnings</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total Deductions</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Net Salary</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Salary Month</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"bg-white divide-y divide-gray-200\">\r\n            <tr v-for=\"employee in paginatedEmployees\" :key=\"employee.id\" class=\"hover:bg-gray-50\">\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">₱{{ employee.totalEarnings.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">₱{{ employee.totalDeductions.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900 font-bold\">₱{{ employee.totalSalary.toLocaleString() }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ employee.salaryMonth }}</td>\r\n              <td class=\"px-6 py-4 text-sm font-medium flex gap-2\">\r\n                <button @click=\"generatePayslip(employee)\" \r\n                        class=\"bg-green-50 text-green-600 font-semibold py-1.5 px-3 rounded-lg hover:bg-green-100 transition-all duration-200 flex items-center gap-2 text-xs\"\r\n                        :disabled=\"payslipGenerationStatus[employee.id]?.generating || isLoading\">\r\n                  <span class=\"material-icons text-green-600\">description</span> \r\n                  {{ payslipGenerationStatus[employee.id]?.generating ? 'Generating...' : 'Generate' }}\r\n                </button>\r\n                <button @click=\"sendPayslipEmail(employee)\" \r\n                        class=\"bg-blue-50 text-blue-600 font-semibold py-1.5 px-3 rounded-lg hover:bg-blue-100 transition-all duration-200 flex items-center gap-2 text-xs\"\r\n                        :disabled=\"payslipGenerationStatus[employee.id]?.sending || isLoading\">\r\n                  <span class=\"material-icons text-blue-600\">email</span> \r\n                  {{ payslipGenerationStatus[employee.id]?.sending ? 'Sending...' : 'Send Email' }}\r\n                </button>\r\n              </td>\r\n            </tr>\r\n            <tr v-if=\"paginatedEmployees.length === 0 && !isLoading\">\r\n              <td colspan=\"6\" class=\"px-6 py-4 text-center text-sm text-gray-500\">No employees found for this month.</td>\r\n            </tr>\r\n            <tr v-if=\"isLoading\">\r\n              <td colspan=\"6\" class=\"px-6 py-4 text-center text-sm text-gray-500\">Loading employees...</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <!-- Pagination Controls -->\r\n      <div class=\"flex justify-center items-center mt-4 gap-4\">\r\n        <button\r\n          @click=\"prevPage\"\r\n          :disabled=\"currentPage === 1 || isLoading\"\r\n          class=\"bg-gray-200 p-2 rounded-full hover:bg-gray-300 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n        >\r\n          <span class=\"material-icons\">chevron_left</span>\r\n        </button>\r\n        <span class=\"text-gray-700\">Page {{ currentPage }} of {{ totalPages }}</span>\r\n        <button\r\n          @click=\"nextPage\"\r\n          :disabled=\"currentPage === totalPages || isLoading\"\r\n          class=\"bg-gray-200 p-2 rounded-full hover:bg-gray-300 transition disabled:opacity-50 disabled:cursor-not-allowed\"\r\n        >\r\n          <span class=\"material-icons\">chevron_right</span>\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Status Message -->\r\n      <div v-if=\"statusMessage\" \r\n           :class=\"statusMessage.includes('successfully') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\"\r\n           class=\"fixed bottom-4 right-4 p-4 rounded-lg shadow-md z-50\">\r\n        {{ statusMessage }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\n\r\nexport default {\r\n  name: 'SalarySlips',\r\n  data() {\r\n    return {\r\n      employees: [],\r\n      searchQuery: '',\r\n      selectedMonth: new Date().toISOString().slice(0, 7), // Default to current month (YYYY-MM)\r\n      currentPage: 1,\r\n      itemsPerPage: 5,\r\n      payslipGenerationStatus: {},\r\n      isLoading: false,\r\n      statusMessage: ''\r\n    };\r\n  },\r\n  computed: {\r\n    filteredEmployees() {\r\n      return this.employees.filter(employee =>\r\n        employee.name.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.filteredEmployees.length / this.itemsPerPage) || 1;\r\n    },\r\n    paginatedEmployees() {\r\n      const start = (this.currentPage - 1) * this.itemsPerPage;\r\n      const end = start + this.itemsPerPage;\r\n      return this.filteredEmployees.slice(start, end);\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchEmployees();\r\n  },\r\n  methods: {\r\n    async fetchEmployees() {\r\n      this.isLoading = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        const response = await axios.get('http://localhost:7777/api/employees');\r\n        this.employees = response.data.map(employee => ({\r\n          id: employee.id,\r\n          name: `${employee.firstName} ${employee.lastName}`,\r\n          totalEarnings: this.calculateTotalEarnings(employee),\r\n          totalDeductions: this.calculateTotalDeductions(employee),\r\n          totalSalary: this.calculateNetSalary(employee),\r\n          salaryMonth: this.formatSalaryMonth(this.selectedMonth),\r\n          email: employee.email,\r\n          position: employee.position,\r\n          rawData: employee // Store raw data for detailed payslip generation\r\n        })) || [];\r\n        this.showSuccessMessage('Employees loaded successfully!');\r\n      } catch (error) {\r\n        console.error('Error fetching employees:', error);\r\n        this.showErrorMessage('Failed to load employees. Please try again.');\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async refreshData() {\r\n      await this.fetchEmployees();\r\n    },\r\n    calculateTotalEarnings(employee) {\r\n      const baseEarnings = (employee.earnings?.travelExpenses || 0) + (employee.earnings?.otherEarnings || 0);\r\n      const payheadEarnings = employee.payheads\r\n        ?.filter(p => p.type === 'Earnings')\r\n        .reduce((sum, p) => sum + p.amount, 0) || 0;\r\n      return employee.salary + baseEarnings + payheadEarnings;\r\n    },\r\n    calculateTotalDeductions(employee) {\r\n      const baseDeductions = (employee.deductions?.sss || 0) + \r\n                            (employee.deductions?.philhealth || 0) + \r\n                            (employee.deductions?.pagibig || 0);\r\n      const payheadDeductions = employee.payheads\r\n        ?.filter(p => p.type === 'Deductions')\r\n        .reduce((sum, p) => sum + p.amount, 0) || 0;\r\n      return baseDeductions + payheadDeductions;\r\n    },\r\n    calculateNetSalary(employee) {\r\n      return this.calculateTotalEarnings(employee) - this.calculateTotalDeductions(employee);\r\n    },\r\n    formatSalaryMonth(month) {\r\n      const [year, monthNum] = month.split('-');\r\n      return `${monthNum}/01/${year}`; // Format as MM/DD/YYYY starting at 1st of month\r\n    },\r\n    async generatePayslip(employee) {\r\n      this.$set(this.payslipGenerationStatus, employee.id, { generating: true });\r\n      this.statusMessage = '';\r\n      try {\r\n        const doc = new jsPDF();\r\n        doc.setFontSize(16);\r\n        doc.text('Payslip', 20, 20);\r\n        doc.setFontSize(12);\r\n        doc.text(`Employee ID: ${employee.id}`, 20, 40);\r\n        doc.text(`Name: ${employee.name}`, 20, 50);\r\n        doc.text(`Position: ${employee.position}`, 20, 60);\r\n        doc.text(`Salary Month: ${employee.salaryMonth}`, 20, 70);\r\n        \r\n        // Detailed Earnings\r\n        doc.text('Earnings:', 20, 90);\r\n        let yPos = 100;\r\n        doc.text(`Base Salary: ₱${employee.rawData.salary.toLocaleString()}`, 20, yPos);\r\n        yPos += 10;\r\n        if (employee.rawData.earnings.travelExpenses) {\r\n          doc.text(`Travel Expenses: ₱${employee.rawData.earnings.travelExpenses.toLocaleString()}`, 20, yPos);\r\n          yPos += 10;\r\n        }\r\n        if (employee.rawData.earnings.otherEarnings) {\r\n          doc.text(`Other Earnings: ₱${employee.rawData.earnings.otherEarnings.toLocaleString()}`, 20, yPos);\r\n          yPos += 10;\r\n        }\r\n        employee.rawData.payheads?.filter(p => p.type === 'Earnings').forEach(payhead => {\r\n          doc.text(`${payhead.name}: ₱${payhead.amount.toLocaleString()}`, 20, yPos);\r\n          yPos += 10;\r\n        });\r\n        doc.text(`Total Earnings: ₱${employee.totalEarnings.toLocaleString()}`, 20, yPos);\r\n        yPos += 20;\r\n\r\n        // Detailed Deductions\r\n        doc.text('Deductions:', 20, yPos);\r\n        yPos += 10;\r\n        if (employee.rawData.deductions.sss) {\r\n          doc.text(`SSS: ₱${employee.rawData.deductions.sss.toLocaleString()}`, 20, yPos);\r\n          yPos += 10;\r\n        }\r\n        if (employee.rawData.deductions.philhealth) {\r\n          doc.text(`PhilHealth: ₱${employee.rawData.deductions.philhealth.toLocaleString()}`, 20, yPos);\r\n          yPos += 10;\r\n        }\r\n        if (employee.rawData.deductions.pagibig) {\r\n          doc.text(`Pag-IBIG: ₱${employee.rawData.deductions.pagibig.toLocaleString()}`, 20, yPos);\r\n          yPos += 10;\r\n        }\r\n        employee.rawData.payheads?.filter(p => p.type === 'Deductions').forEach(payhead => {\r\n          doc.text(`${payhead.name}: ₱${payhead.amount.toLocaleString()}`, 20, yPos);\r\n          yPos += 10;\r\n        });\r\n        doc.text(`Total Deductions: ₱${employee.totalDeductions.toLocaleString()}`, 20, yPos);\r\n        yPos += 20;\r\n\r\n        // Net Salary\r\n        doc.text(`Net Salary: ₱${employee.totalSalary.toLocaleString()}`, 20, yPos);\r\n        yPos += 10;\r\n        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, yPos);\r\n\r\n        const pdfBlob = doc.output('blob');\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(pdfBlob);\r\n        reader.onloadend = async () => {\r\n          const base64data = reader.result;\r\n          localStorage.setItem(`payslip_${employee.id}_${employee.salaryMonth}`, base64data);\r\n\r\n          const link = document.createElement('a');\r\n          link.href = URL.createObjectURL(pdfBlob);\r\n          link.download = `payslip-${employee.name}-${employee.salaryMonth}.pdf`;\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n\r\n          await axios.post('http://localhost:7777/api/payslips/generate', {\r\n            employeeId: employee.id,\r\n            payslipData: base64data,\r\n            salaryMonth: employee.salaryMonth\r\n          });\r\n\r\n          this.showSuccessMessage(`Payslip generated for ${employee.name}`);\r\n          this.$set(this.payslipGenerationStatus, employee.id, { generating: false });\r\n        };\r\n      } catch (error) {\r\n        console.error('Error generating payslip:', error);\r\n        this.showErrorMessage(`Failed to generate payslip for ${employee.name}`);\r\n        this.$set(this.payslipGenerationStatus, employee.id, { generating: false });\r\n      }\r\n    },\r\n    async sendPayslipEmail(employee) {\r\n      this.$set(this.payslipGenerationStatus, employee.id, { sending: true });\r\n      this.statusMessage = '';\r\n      try {\r\n        const payslipKey = `payslip_${employee.id}_${employee.salaryMonth}`;\r\n        let payslipData = localStorage.getItem(payslipKey);\r\n\r\n        if (!payslipData) {\r\n          await this.generatePayslip(employee);\r\n          payslipData = localStorage.getItem(payslipKey);\r\n        }\r\n\r\n        const response = await axios.post('http://localhost:7777/api/payslips/send-email', {\r\n          employeeId: employee.id,\r\n          employeeEmail: employee.email,\r\n          payslipData,\r\n          salaryMonth: employee.salaryMonth\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          this.showSuccessMessage(`Payslip email sent to ${employee.name} at ${employee.email}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error sending payslip email:', error);\r\n        this.showErrorMessage(`Failed to send payslip email to ${employee.name}`);\r\n      } finally {\r\n        this.$set(this.payslipGenerationStatus, employee.id, { sending: false });\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    },\r\n    showSuccessMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    },\r\n    showErrorMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\r\n\r\nbutton:disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.transition-all {\r\n  transition: all 0.2s ease-in-out;\r\n}\r\n\r\n.hover\\:bg-gray-50:hover {\r\n  background-color: #f9fafb;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}