{"ast":null,"code":"export default {\n  name: 'SalarySlips',\n  data() {\n    return {\n      employees: [],\n      loading: true,\n      error: null\n    };\n  },\n  methods: {\n    async fetchEmployees() {\n      try {\n        // Simulating API call (Replace with real API)\n        this.employees = [{\n          id: 1,\n          name: 'John Doe',\n          totalEarnings: 50000,\n          totalDeductions: 5000,\n          salaryMonth: '2025-02-20'\n        }, {\n          id: 2,\n          name: 'Jane Smith',\n          totalEarnings: 60000,\n          totalDeductions: 7000,\n          salaryMonth: '2025-02-22'\n        }];\n      } catch (err) {\n        this.error = 'Failed to load salary slips';\n      } finally {\n        this.loading = false;\n      }\n    },\n    calculateNetSalary(employee) {\n      return this.formatCurrency(employee.totalEarnings - employee.totalDeductions);\n    },\n    formatCurrency(amount) {\n      return new Intl.NumberFormat('en-PH', {\n        style: 'currency',\n        currency: 'PHP'\n      }).format(amount).replace('₱', '');\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('en-PH', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    },\n    generatePayslip(employeeId) {\n      console.log(`Generating payslip for employee ID: ${employeeId}`);\n      alert(`Payslip generated for Employee ID: ${employeeId}`);\n    },\n    sendPayslipEmail(employeeId) {\n      console.log(`Sending payslip email for employee ID: ${employeeId}`);\n      alert(`Payslip email sent to Employee ID: ${employeeId}`);\n    }\n  },\n  mounted() {\n    this.fetchEmployees();\n  }\n};","map":{"version":3,"names":["name","data","employees","loading","error","methods","fetchEmployees","id","totalEarnings","totalDeductions","salaryMonth","err","calculateNetSalary","employee","formatCurrency","amount","Intl","NumberFormat","style","currency","format","replace","formatDate","date","Date","toLocaleDateString","year","month","day","generatePayslip","employeeId","console","log","alert","sendPayslipEmail","mounted"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\admind\\SalarySlips.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Table to Display Salary Slips -->\r\n      <div class=\"bg-white p-5 rounded-xl shadow-md\">\r\n        <h2 class=\"text-xl font-semibold text-gray-700 mb-4\">Salary Slips</h2>\r\n        <div v-if=\"loading\" class=\"text-center text-gray-500\">Loading salary slips...</div>\r\n        <div v-else-if=\"error\" class=\"text-center text-red-500\">{{ error }}</div>\r\n        <table v-else class=\"min-w-full divide-y divide-gray-200\">\r\n          <thead class=\"bg-gray-50\">\r\n            <tr>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Employee Name</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total Earnings</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total Deductions</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Net Salary</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Salary Month</th>\r\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"bg-white divide-y divide-gray-200\">\r\n            <tr v-for=\"employee in employees\" :key=\"employee.id\">\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P {{ formatCurrency(employee.totalEarnings) }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P {{ formatCurrency(employee.totalDeductions) }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">P {{ calculateNetSalary(employee) }}</td>\r\n              <td class=\"px-6 py-4 text-sm text-gray-900\">{{ formatDate(employee.salaryMonth) }}</td>\r\n              <td class=\"px-6 py-4 text-sm font-medium flex gap-2\">\r\n                <button @click=\"generatePayslip(employee.id)\" class=\"bg-green-50 text-green-600 font-semibold py-1.5 px-3 rounded-lg hover:bg-green-100 transition-all duration-200 flex items-center gap-2 text-xs\">\r\n                  <span class=\"material-icons text-green-600\">description</span> Generate\r\n                </button>\r\n                <button @click=\"sendPayslipEmail(employee.id)\" class=\"bg-blue-50 text-blue-600 font-semibold py-1.5 px-3 rounded-lg hover:bg-blue-100 transition-all duration-200 flex items-center gap-2 text-xs\">\r\n                  <span class=\"material-icons text-blue-600\">email</span> Email\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'SalarySlips',\r\n  data() {\r\n    return {\r\n      employees: [],\r\n      loading: true,\r\n      error: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchEmployees() {\r\n      try {\r\n        // Simulating API call (Replace with real API)\r\n        this.employees = [\r\n          { id: 1, name: 'John Doe', totalEarnings: 50000, totalDeductions: 5000, salaryMonth: '2025-02-20' },\r\n          { id: 2, name: 'Jane Smith', totalEarnings: 60000, totalDeductions: 7000, salaryMonth: '2025-02-22' },\r\n        ];\r\n      } catch (err) {\r\n        this.error = 'Failed to load salary slips';\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    calculateNetSalary(employee) {\r\n      return this.formatCurrency(employee.totalEarnings - employee.totalDeductions);\r\n    },\r\n    formatCurrency(amount) {\r\n      return new Intl.NumberFormat('en-PH', { style: 'currency', currency: 'PHP' }).format(amount).replace('₱', '');\r\n    },\r\n    formatDate(date) {\r\n      return new Date(date).toLocaleDateString('en-PH', { year: 'numeric', month: 'long', day: 'numeric' });\r\n    },\r\n    generatePayslip(employeeId) {\r\n      console.log(`Generating payslip for employee ID: ${employeeId}`);\r\n      alert(`Payslip generated for Employee ID: ${employeeId}`);\r\n    },\r\n    sendPayslipEmail(employeeId) {\r\n      console.log(`Sending payslip email for employee ID: ${employeeId}`);\r\n      alert(`Payslip email sent to Employee ID: ${employeeId}`);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchEmployees();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Ensure Material Icons are loaded */\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons');\r\n</style>\r\n"],"mappings":"AA2CA,eAAe;EACbA,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF;QACA,IAAI,CAACJ,SAAQ,GAAI,CACf;UAAEK,EAAE,EAAE,CAAC;UAAEP,IAAI,EAAE,UAAU;UAAEQ,aAAa,EAAE,KAAK;UAAEC,eAAe,EAAE,IAAI;UAAEC,WAAW,EAAE;QAAa,CAAC,EACnG;UAAEH,EAAE,EAAE,CAAC;UAAEP,IAAI,EAAE,YAAY;UAAEQ,aAAa,EAAE,KAAK;UAAEC,eAAe,EAAE,IAAI;UAAEC,WAAW,EAAE;QAAa,CAAC,CACtG;MACH,EAAE,OAAOC,GAAG,EAAE;QACZ,IAAI,CAACP,KAAI,GAAI,6BAA6B;MAC5C,UAAU;QACR,IAAI,CAACD,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IACDS,kBAAkBA,CAACC,QAAQ,EAAE;MAC3B,OAAO,IAAI,CAACC,cAAc,CAACD,QAAQ,CAACL,aAAY,GAAIK,QAAQ,CAACJ,eAAe,CAAC;IAC/E,CAAC;IACDK,cAAcA,CAACC,MAAM,EAAE;MACrB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE,UAAU;QAAEC,QAAQ,EAAE;MAAM,CAAC,CAAC,CAACC,MAAM,CAACL,MAAM,CAAC,CAACM,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IAC/G,CAAC;IACDC,UAAUA,CAACC,IAAI,EAAE;MACf,OAAO,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,MAAM;QAAEC,GAAG,EAAE;MAAU,CAAC,CAAC;IACvG,CAAC;IACDC,eAAeA,CAACC,UAAU,EAAE;MAC1BC,OAAO,CAACC,GAAG,CAAC,uCAAuCF,UAAU,EAAE,CAAC;MAChEG,KAAK,CAAC,sCAAsCH,UAAU,EAAE,CAAC;IAC3D,CAAC;IACDI,gBAAgBA,CAACJ,UAAU,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,0CAA0CF,UAAU,EAAE,CAAC;MACnEG,KAAK,CAAC,sCAAsCH,UAAU,EAAE,CAAC;IAC3D;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC7B,cAAc,CAAC,CAAC;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}