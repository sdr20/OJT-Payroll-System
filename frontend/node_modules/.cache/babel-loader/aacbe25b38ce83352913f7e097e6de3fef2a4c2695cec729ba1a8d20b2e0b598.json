{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\"\n};\nconst _hoisted_2 = {\n  class: \"max-w-6xl mx-auto\"\n};\nconst _hoisted_3 = {\n  class: \"bg-white p-6 rounded-xl shadow-md\"\n};\nconst _hoisted_4 = {\n  class: \"flex justify-between items-center mb-6\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"min-w-full border border-gray-300\"\n};\nconst _hoisted_6 = {\n  class: \"hover:bg-gray-50\"\n};\nconst _hoisted_7 = {\n  class: \"border px-4 py-2 text-sm text-gray-900\"\n};\nconst _hoisted_8 = {\n  class: \"border px-4 py-2 text-sm text-gray-900\"\n};\nconst _hoisted_9 = {\n  class: \"border px-4 py-2 text-sm text-gray-900\"\n};\nconst _hoisted_10 = {\n  class: \"border px-4 py-2 text-sm text-gray-900\"\n};\nconst _hoisted_11 = {\n  class: \"border px-4 py-2 text-sm text-gray-900\"\n};\nconst _hoisted_12 = {\n  class: \"border px-4 py-2 text-sm font-bold text-gray-900\"\n};\nconst _hoisted_13 = {\n  class: \"border px-4 py-2 text-sm text-gray-900\"\n};\nconst _hoisted_14 = {\n  class: \"border px-4 py-2 text-sm\"\n};\nconst _hoisted_15 = [\"disabled\"];\nconst _hoisted_16 = [\"disabled\"];\nconst _hoisted_17 = {\n  class: \"text-center py-8 text-gray-500\"\n};\nconst _hoisted_18 = {\n  key: 2,\n  class: \"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\"\n};\nconst _hoisted_19 = {\n  class: \"bg-white rounded-xl shadow-xl w-full max-w-4xl m-4 max-h-[90vh] overflow-y-auto\"\n};\nconst _hoisted_20 = {\n  class: \"p-6 border-b flex justify-between items-center\"\n};\nconst _hoisted_21 = {\n  class: \"text-2xl font-bold text-gray-800\"\n};\nconst _hoisted_22 = {\n  class: \"p-6\"\n};\nconst _hoisted_23 = [\"src\"];\nconst _hoisted_24 = {\n  key: 0,\n  class: \"text-red-500 text-sm mt-2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", {\n    class: \"text-2xl font-semibold text-gray-900\"\n  }, \"My Salary Slip\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedMonth = $event),\n    type: \"month\",\n    class: \"border rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.fetchEmployeeData && $options.fetchEmployeeData(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.selectedMonth]])]), $data.employee ? (_openBlock(), _createElementBlock(\"table\", _hoisted_5, [_cache[8] || (_cache[8] = _createElementVNode(\"thead\", {\n    class: \"bg-gray-200\"\n  }, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"ID\"), _createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"Name\"), _createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"Hourly Rate\"), _createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"Total Earnings\"), _createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"Total Deductions\"), _createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"Net Salary\"), _createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"Period\"), _createElementVNode(\"th\", {\n    class: \"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\"\n  }, \"Actions\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [_createElementVNode(\"tr\", _hoisted_6, [_createElementVNode(\"td\", _hoisted_7, _toDisplayString($data.employee.id), 1 /* TEXT */), _createElementVNode(\"td\", _hoisted_8, _toDisplayString($data.employee.name), 1 /* TEXT */), _createElementVNode(\"td\", _hoisted_9, \"₱\" + _toDisplayString($data.employee.hourlyRate.toLocaleString()), 1 /* TEXT */), _createElementVNode(\"td\", _hoisted_10, \"₱\" + _toDisplayString($data.employee.totalEarnings.toLocaleString()), 1 /* TEXT */), _createElementVNode(\"td\", _hoisted_11, \"₱\" + _toDisplayString($data.employee.totalDeductions.toLocaleString()), 1 /* TEXT */), _createElementVNode(\"td\", _hoisted_12, \"₱\" + _toDisplayString($data.employee.totalSalary.toLocaleString()), 1 /* TEXT */), _createElementVNode(\"td\", _hoisted_13, _toDisplayString($data.employee.salaryMonth), 1 /* TEXT */), _createElementVNode(\"td\", _hoisted_14, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.generatePayslip && $options.generatePayslip(...args)),\n    class: \"bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-700 transition-all duration-200 mr-2\",\n    disabled: $data.isGenerating\n  }, _toDisplayString($data.isGenerating ? 'Generating...' : 'Generate Payslip'), 9 /* TEXT, PROPS */, _hoisted_15), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.viewPayslip && $options.viewPayslip(...args)),\n    class: \"bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-700 transition-all duration-200\",\n    disabled: !$data.payslipDataUrl || $data.isGenerating\n  }, \" View Payslip \", 8 /* PROPS */, _hoisted_16)])])])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Loading/Error State \"), _createElementVNode(\"div\", _hoisted_17, _toDisplayString($data.errorMessage || 'Loading employee data...'), 1 /* TEXT */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createCommentVNode(\" Payslip Viewer Modal \"), $data.showPayslipModal ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"h2\", _hoisted_21, \" Payslip for \" + _toDisplayString($data.employee.name) + \" - \" + _toDisplayString($data.employee.salaryMonth), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => $data.showPayslipModal = false),\n    class: \"text-gray-500 hover:text-gray-700\"\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"span\", {\n    class: \"material-icons-outlined\"\n  }, \"close\", -1 /* HOISTED */)]))]), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"iframe\", {\n    src: $data.payslipDataUrl,\n    class: \"w-full h-[70vh]\",\n    frameborder: \"0\",\n    onLoad: _cache[5] || (_cache[5] = (...args) => $options.onIframeLoad && $options.onIframeLoad(...args)),\n    onError: _cache[6] || (_cache[6] = (...args) => $options.onIframeError && $options.onIframeError(...args))\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_23), $data.iframeError ? (_openBlock(), _createElementBlock(\"p\", _hoisted_24, \" Error loading payslip. Please ensure the payslip is generated correctly or try again. \")) : _createCommentVNode(\"v-if\", true)])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Status Message \"), $data.statusMessage ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 3,\n    class: _normalizeClass([$data.statusMessage.includes('successfully') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700', \"mt-4 p-3 rounded-lg text-center\"])\n  }, _toDisplayString($data.statusMessage), 3 /* TEXT, CLASS */)) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_cache","$event","$data","selectedMonth","type","onChange","args","$options","fetchEmployeeData","employee","_hoisted_5","_hoisted_6","_hoisted_7","_toDisplayString","id","_hoisted_8","name","_hoisted_9","hourlyRate","toLocaleString","_hoisted_10","totalEarnings","_hoisted_11","totalDeductions","_hoisted_12","totalSalary","_hoisted_13","salaryMonth","_hoisted_14","onClick","generatePayslip","disabled","isGenerating","_hoisted_15","viewPayslip","payslipDataUrl","_hoisted_16","_Fragment","_createCommentVNode","_hoisted_17","errorMessage","showPayslipModal","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","src","frameborder","onLoad","onIframeLoad","onError","onIframeError","_hoisted_23","iframeError","_hoisted_24","statusMessage","_normalizeClass","includes"],"sources":["C:\\Users\\ASUS\\Desktop\\OJT-PayrollSystem\\OJT-Payroll-System\\frontend\\src\\views\\employee\\EmployeeSalarySlips.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <div class=\"bg-white p-6 rounded-xl shadow-md\">\r\n        <div class=\"flex justify-between items-center mb-6\">\r\n          <h2 class=\"text-2xl font-semibold text-gray-900\">My Salary Slip</h2>\r\n          <input\r\n            v-model=\"selectedMonth\"\r\n            type=\"month\"\r\n            class=\"border rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all\"\r\n            @change=\"fetchEmployeeData\"\r\n          />\r\n        </div>\r\n\r\n        <table v-if=\"employee\" class=\"min-w-full border border-gray-300\">\r\n          <thead class=\"bg-gray-200\">\r\n            <tr>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Name</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Hourly Rate</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total Earnings</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Total Deductions</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Net Salary</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Period</th>\r\n              <th class=\"border px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr class=\"hover:bg-gray-50\">\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.id }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.name }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.hourlyRate.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.totalEarnings.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">₱{{ employee.totalDeductions.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm font-bold text-gray-900\">₱{{ employee.totalSalary.toLocaleString() }}</td>\r\n              <td class=\"border px-4 py-2 text-sm text-gray-900\">{{ employee.salaryMonth }}</td>\r\n              <td class=\"border px-4 py-2 text-sm\">\r\n                <button \r\n                  @click=\"generatePayslip\" \r\n                  class=\"bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-700 transition-all duration-200 mr-2\"\r\n                  :disabled=\"isGenerating\"\r\n                >\r\n                  {{ isGenerating ? 'Generating...' : 'Generate Payslip' }}\r\n                </button>\r\n                <button \r\n                  @click=\"viewPayslip\" \r\n                  class=\"bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-700 transition-all duration-200\"\r\n                  :disabled=\"!payslipDataUrl || isGenerating\"\r\n                >\r\n                  View Payslip\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <!-- Loading/Error State -->\r\n        <div v-else class=\"text-center py-8 text-gray-500\">\r\n          {{ errorMessage || 'Loading employee data...' }}\r\n        </div>\r\n\r\n        <!-- Payslip Viewer Modal -->\r\n        <div\r\n          v-if=\"showPayslipModal\"\r\n          class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\"\r\n        >\r\n          <div\r\n            class=\"bg-white rounded-xl shadow-xl w-full max-w-4xl m-4 max-h-[90vh] overflow-y-auto\"\r\n          >\r\n            <div class=\"p-6 border-b flex justify-between items-center\">\r\n              <h2 class=\"text-2xl font-bold text-gray-800\">\r\n                Payslip for {{ employee.name }} - {{ employee.salaryMonth }}\r\n              </h2>\r\n              <button\r\n                @click=\"showPayslipModal = false\"\r\n                class=\"text-gray-500 hover:text-gray-700\"\r\n              >\r\n                <span class=\"material-icons-outlined\">close</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"p-6\">\r\n              <iframe\r\n                :src=\"payslipDataUrl\"\r\n                class=\"w-full h-[70vh]\"\r\n                frameborder=\"0\"\r\n                @load=\"onIframeLoad\"\r\n                @error=\"onIframeError\"\r\n              ></iframe>\r\n              <p v-if=\"iframeError\" class=\"text-red-500 text-sm mt-2\">\r\n                Error loading payslip. Please ensure the payslip is generated correctly or try again.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Status Message -->\r\n        <div \r\n          v-if=\"statusMessage\" \r\n          :class=\"statusMessage.includes('successfully') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'\"\r\n          class=\"mt-4 p-3 rounded-lg text-center\"\r\n        >\r\n          {{ statusMessage }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable'; // Use default import for compatibility\r\nimport moment from 'moment'; // Import moment.js for date formatting\r\n\r\n// Extend jsPDF with autoTable plugin\r\njsPDF.prototype.autoTable = autoTable.default;\r\n\r\nexport default {\r\n  name: 'EmployeeSalarySlip',\r\n  data() {\r\n    return {\r\n      employee: null,\r\n      selectedMonth: new Date().toISOString().slice(0, 7),\r\n      isGenerating: false,\r\n      statusMessage: '',\r\n      errorMessage: '',\r\n      showPayslipModal: false,\r\n      payslipDataUrl: '',\r\n      iframeError: false,\r\n      payslips: {} // Store payslip URLs locally for viewing\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchEmployeeData();\r\n  },\r\n  methods: {\r\n    async fetchEmployeeData() {\r\n      try {\r\n        const userId = localStorage.getItem('userId');\r\n        if (!userId) {\r\n          this.errorMessage = 'User not logged in. Redirecting to login...';\r\n          setTimeout(() => {\r\n            this.$router.push('/login');\r\n          }, 2000);\r\n          return;\r\n        }\r\n\r\n        const response = await axios.get(`http://localhost:7777/api/employees/${userId}/salary`, {\r\n          params: { month: this.selectedMonth }\r\n        });\r\n        if (!response.data) {\r\n          throw new Error('No salary data returned from server');\r\n        }\r\n        this.employee = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching employee data:', error);\r\n        this.errorMessage = 'Failed to load salary slip. Please check your connection or try again later.';\r\n        this.employee = null; // Ensure employee stays null to show error state\r\n      }\r\n    },\r\n    async generatePayslip() {\r\n      if (!this.employee) {\r\n        this.statusMessage = 'No employee data available to generate payslip.';\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n        return;\r\n      }\r\n\r\n      this.isGenerating = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        const payslipData = this.createPayslipData(this.employee);\r\n        const pdfBlob = await this.generatePdf(payslipData);\r\n        const url = URL.createObjectURL(pdfBlob);\r\n        this.payslips[`${this.employee.id}_${this.employee.salaryMonth}`] = url;\r\n        this.payslipDataUrl = url;\r\n        this.showSuccessMessage('Payslip generated successfully!');\r\n      } catch (error) {\r\n        console.error('Error generating payslip:', error);\r\n        this.statusMessage = 'Failed to generate payslip. Please try again.';\r\n      } finally {\r\n        this.isGenerating = false;\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n      }\r\n    },\r\n    viewPayslip() {\r\n      if (!this.payslipDataUrl) {\r\n        this.statusMessage = 'Please generate the payslip first.';\r\n        setTimeout(() => this.statusMessage = '', 3000);\r\n        return;\r\n      }\r\n      this.showPayslipModal = true;\r\n      this.iframeError = false;\r\n      this.showSuccessMessage(`Viewing payslip for ${this.employee.name} for ${this.employee.salaryMonth}`);\r\n    },\r\n    createPayslipData(employee) {\r\n      const salaryDate = moment(employee.salaryMonth, 'MM/YYYY').format('MM/DD/YYYY');\r\n      const basicSalary = (employee.salary || 0) || 0;\r\n      const sss = this.calculateSSSContribution(employee.salary) || 0;\r\n      const philhealth = this.calculatePhilHealthContribution(employee.salary) || 0;\r\n      const hdmf = this.calculatePagIBIGContribution(employee.salary) || 0;\r\n      const totalDeductions = (sss + philhealth + hdmf + (this.calculateWithholdingTax(employee) || 0)) || 0;\r\n      const netSalary = (employee.totalSalary || this.calculateNetSalary(employee) || 0) || 0;\r\n\r\n      return {\r\n        salaryDate,\r\n        id: employee.id,\r\n        name: employee.name,\r\n        hourlyRate: employee.hourlyRate || (employee.salary / (8 * 22)) || 0,\r\n        totalEarnings: employee.totalEarnings || 0,\r\n        totalDeductions: totalDeductions,\r\n        totalSalary: netSalary,\r\n        salaryMonth: employee.salaryMonth,\r\n        empNo: employee.empNo || 'N/A',\r\n        lastName: employee.lastName || 'N/A',\r\n        middleName: employee.middleName || 'N/A',\r\n        firstName: employee.firstName || 'N/A',\r\n        birthDate: employee.birthDate ? moment(employee.birthDate).format('MM/DD/YYYY') : 'N/A',\r\n        hireDate: employee.hireDate ? moment(employee.hireDate).format('MM/DD/YYYY') : 'N/A',\r\n        civilStatus: employee.civilStatus || 'SINGLE',\r\n        dependents: employee.dependents || 0,\r\n        sss: employee.sss || 'N/A',\r\n        tin: employee.tin || 'N/A',\r\n        philhealth: employee.philhealth || 'N/A',\r\n        hdmf: employee.hdmf || 'N/A',\r\n        position: employee.position || 'N/A',\r\n        basicSalary: this.formatNumber(basicSalary),\r\n        sssDeduction: this.formatNumber(sss),\r\n        philhealthDeduction: this.formatNumber(philhealth),\r\n        hdmfDeduction: this.formatNumber(hdmf),\r\n        withholdingTax: this.formatNumber(this.calculateWithholdingTax(employee) || 0),\r\n        payheads: employee.payheads || [] // Include dynamic payheads\r\n      };\r\n    },\r\n    formatNumber(value) {\r\n      const num = Number(value) || 0;\r\n      return num.toFixed(2);\r\n    },\r\n    async generatePdf(payslipData) {\r\n      const doc = new jsPDF({\r\n        orientation: 'portrait',\r\n        unit: 'mm',\r\n        format: 'a4'\r\n      });\r\n      const lineHeight = 8; // Increased vertical spacing for better readability\r\n      const leftMargin = 14; // Standard left margin\r\n\r\n      // Helper function to add formatted text\r\n      function addFormattedText(doc, text, x, y, options = {}) {\r\n        doc.setFontSize(options.fontSize || 12); // Default to larger font for readability\r\n        doc.setFont(undefined, options.fontStyle || 'normal');\r\n        doc.setTextColor(options.textColor ? options.textColor[0] : 0, options.textColor ? options.textColor[1] : 0, options.textColor ? options.textColor[2] : 0); // Use array for RGB\r\n        doc.text(text, x, y, { align: options.align || 'left' });\r\n      }\r\n\r\n      // Header: RIGHTJOB Solutions in green, PAYSLIP centered\r\n      addFormattedText(doc, 'RIGHTJOB Solutions', leftMargin, 15, { fontSize: 16, fontStyle: 'bold', textColor: [0, 128, 0] });\r\n      addFormattedText(doc, 'PAYSLIP', doc.internal.pageSize.getWidth() / 2, 15, { fontSize: 18, align: 'center' });\r\n      addFormattedText(doc, 'Salary Date', 140, 15, { fontSize: 12 });\r\n      addFormattedText(doc, payslipData.salaryDate, 170, 15, { fontSize: 12 });\r\n\r\n      // Line Separator\r\n      doc.line(leftMargin, 20, doc.internal.pageSize.getWidth() - leftMargin, 20);\r\n\r\n      // Personal Information\r\n      let y = 30;\r\n      addFormattedText(doc, 'Personal Information', leftMargin, 25, { fontSize: 14, fontStyle: 'bold' });\r\n\r\n      // Left Column (Employee Details)\r\n      addFormattedText(doc, 'Emp No.', leftMargin, y); addFormattedText(doc, payslipData.empNo, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Last Name', leftMargin, y); addFormattedText(doc, payslipData.lastName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Middle Name', leftMargin, y); addFormattedText(doc, payslipData.middleName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'First Name', leftMargin, y); addFormattedText(doc, payslipData.firstName, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Birth Date', leftMargin, y); addFormattedText(doc, payslipData.birthDate, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Hire Date', leftMargin, y); addFormattedText(doc, payslipData.hireDate, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Position', leftMargin, y); addFormattedText(doc, payslipData.position, leftMargin + 40, y);\r\n      y += lineHeight; addFormattedText(doc, 'Basic Salary', leftMargin, y); addFormattedText(doc, `Php${payslipData.basicSalary}`, leftMargin + 40, y);\r\n\r\n      // Right Column (Additional Info)\r\n      y = 30;\r\n      addFormattedText(doc, 'Civil Status', 120, y); addFormattedText(doc, payslipData.civilStatus, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'Dependents', 120, y); addFormattedText(doc, payslipData.dependents.toString(), 150, y);\r\n      y += lineHeight * 2; addFormattedText(doc, 'SSS', 120, y); addFormattedText(doc, payslipData.sss, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'TIN', 120, y); addFormattedText(doc, payslipData.tin, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'Philhealth', 120, y); addFormattedText(doc, payslipData.philhealth, 150, y);\r\n      y += lineHeight; addFormattedText(doc, 'HDMF', 120, y); addFormattedText(doc, payslipData.hdmf, 150, y);\r\n\r\n      // Update y to start Summary immediately after Personal Information (approx. y = 95)\r\n      y = 95;\r\n\r\n      // Summary (left-aligned)\r\n      addFormattedText(doc, 'Summary', leftMargin, y, { fontSize: 14, fontStyle: 'bold' });\r\n      y += lineHeight; addFormattedText(doc, 'Total Deductions', leftMargin, y); addFormattedText(doc, `(Php${payslipData.totalDeductions})`, leftMargin + 50, y);\r\n      addFormattedText(doc, 'Salary PHP', 120, y); addFormattedText(doc, `Php${payslipData.totalSalary}`, 150, y); // Match SSS, TIN, Philhealth, HDMF alignment\r\n      y += lineHeight; addFormattedText(doc, 'Total Misc', leftMargin, y); addFormattedText(doc, 'Php0.00', leftMargin + 50, y);\r\n\r\n      // Deductions (left-aligned)\r\n      y += lineHeight + 5;\r\n      addFormattedText(doc, 'Deductions', leftMargin, y, { fontSize: 14, fontStyle: 'bold' });\r\n      y += lineHeight; addFormattedText(doc, 'SSS', leftMargin, y); addFormattedText(doc, `Php${payslipData.sssDeduction}`, leftMargin + 50, y);\r\n      addFormattedText(doc, 'Withholding Tax', 120, y); addFormattedText(doc, `Php${payslipData.withholdingTax}`, 150, y); // Match SSS, TIN, Philhealth, HDMF alignment\r\n      y += lineHeight; addFormattedText(doc, 'Philhealth', leftMargin, y); addFormattedText(doc, `Php${payslipData.philhealthDeduction}`, leftMargin + 50, y);\r\n      y += lineHeight; addFormattedText(doc, 'HDMF', leftMargin, y); addFormattedText(doc, `Php${payslipData.hdmfDeduction}`, leftMargin + 50, y);\r\n\r\n      // Miscellaneous Computations (dynamic table based on payheads)\r\n      y += lineHeight + 5;\r\n      addFormattedText(doc, 'Miscellaneous', leftMargin, y, { fontSize: 14, fontStyle: 'bold' });\r\n      y += lineHeight; addFormattedText(doc, 'Computations', leftMargin, y);\r\n\r\n      const miscTableData = payslipData.payheads.map(payhead => [\r\n        payhead.name,\r\n        payhead.type === 'Earnings' ? `${payhead.amount} day(s)` : '', // Customize description2 based on type\r\n        `Php${this.formatNumber(payhead.amount)}`\r\n      ]);\r\n\r\n      doc.autoTable({\r\n        startY: y + 5,\r\n        head: [['Description', 'description2', 'Amount']],\r\n        body: miscTableData,\r\n        theme: 'grid',\r\n        styles: { fontSize: 12, cellPadding: 3 },\r\n        columnStyles: {\r\n          0: { cellWidth: 70 }, // Description column\r\n          1: { cellWidth: 50 }, // description2 column (optional for Earnings)\r\n          2: { cellWidth: 50, halign: 'right' } // Amount column\r\n        }\r\n      });\r\n\r\n      // Footer\r\n      addFormattedText(doc, 'This being a computer generated payslip, no signature required.', doc.internal.pageSize.getWidth() / 2, 270, { fontSize: 10, align: 'center' });\r\n\r\n      const pdfBlob = doc.output('blob');\r\n      return pdfBlob;\r\n    },\r\n    onIframeLoad() {\r\n      console.log('iFrame loaded successfully');\r\n      this.iframeError = false;\r\n    },\r\n    onIframeError() {\r\n      console.error('iFrame failed to load');\r\n      this.iframeError = true;\r\n    },\r\n    showSuccessMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    },\r\n    showErrorMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => this.statusMessage = '', 3000);\r\n    },\r\n    calculateHolidayPay(employee) {\r\n      const dailyRate = ((employee.salary || 0) / 30) || 0;\r\n      const salaryMonth = this.formatSalaryMonth(this.selectedMonth).split(' ')[0]; // Get month (e.g., \"April\")\r\n      const regularHolidays = [\r\n        '01/01/2025', '04/09/2025', '04/17/2025', '04/18/2025', '05/01/2025',\r\n        '06/12/2025', '08/25/2025', '11/30/2025', '12/25/2025', '12/30/2025'\r\n      ];\r\n      const specialNonWorkingDays = ['02/08/2025', '04/19/2025', '08/26/2025'];\r\n      const isRegularHoliday = regularHolidays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('MMMM') === salaryMonth);\r\n      const isSpecialHoliday = specialNonWorkingDays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('MMMM') === salaryMonth);\r\n      if (isRegularHoliday) return dailyRate * 2 || 0; // DOLE: 200% for worked regular holiday\r\n      if (isSpecialHoliday) return dailyRate * 0.3 || 0; // DOLE: 30% premium for special holiday\r\n      return 0;\r\n    },\r\n    calculateOvertimePay(employee) {\r\n      const hourlyRate = ((employee.hourlyRate || (employee.salary / (8 * 22))) || 0) || 0;\r\n      const regularOTHours = (employee.overtimeHours?.regular || 2) || 0;\r\n      const holidayOTHours = (employee.overtimeHours?.holiday || 1) || 0;\r\n      const regularOTPay = regularOTHours * hourlyRate * 1.25 || 0; // DOLE: 25% OT rate\r\n      const holidayOTPay = holidayOTHours * hourlyRate * 1.3 || 0; // DOLE: 30% OT on holiday/rest day\r\n      return regularOTPay + holidayOTPay || 0;\r\n    },\r\n    calculateSSSContribution(salary) {\r\n      const monthlySalaryCredit = Math.min(Math.max((salary || 0), 5000), 35000) || 0; // SSS MSC cap at ₱35,000 in 2025\r\n      const employeeShareRate = 0.05; // 5% employee share per SSS Circular 2024-06\r\n      return Math.round(monthlySalaryCredit * employeeShareRate) || 0;\r\n    },\r\n    calculatePhilHealthContribution(salary) {\r\n      const rate = 0.05; // 5% total rate in 2025 per PhilHealth Circular\r\n      const monthlySalary = Math.min((salary || 0), 100000) || 0; // Cap at ₱100,000\r\n      return Math.round((monthlySalary * rate) / 2) || 0; // 2.5% employee share\r\n    },\r\n    calculatePagIBIGContribution(salary) {\r\n      const rate = 0.02; // 2% employee share per Pag-IBIG Circular 460\r\n      const cappedSalary = Math.min((salary || 0), 10000) || 0; // Cap at ₱10,000\r\n      return Math.round(cappedSalary * rate) || 0; // Max ₱200\r\n    },\r\n    calculateWithholdingTax(employee) {\r\n      const nonTaxable = this.calculateNonTaxableIncome(employee);\r\n      const taxableIncome = ((this.calculateTotalEarnings(employee) || 0) - (nonTaxable.totalNonTaxable || 0)) || 0;\r\n      if (taxableIncome <= 20833) return 0;\r\n      if (taxableIncome <= 33333) return Math.round((taxableIncome - 20833) * 0.15) || 0; // Bracket 2: 15% over ₱20,833\r\n      if (taxableIncome <= 66667) return Math.round(1875 + (taxableIncome - 33333) * 0.20) || 0; // Bracket 3: ₱1,875 + 20% over ₱33,333\r\n      if (taxableIncome <= 166667) return Math.round(13541.80 + (taxableIncome - 66667) * 0.25) || 0; // Bracket 4: ₱13,541.80 + 25% over ₱66,667\r\n      if (taxableIncome <= 666667) return Math.round(90841.80 + (taxableIncome - 166667) * 0.30) || 0; // Bracket 5: ₱90,841.80 + 30% over ₱166,667\r\n      return Math.round(408841.80 + (taxableIncome - 666667) * 0.35) || 0; // Bracket 6: ₱408,841.80 + 35% over ₱666,667\r\n    },\r\n    calculateNonTaxableIncome(employee) {\r\n      const isMWE = (employee.salary / 30) <= 610; // NCR minimum wage for 2025\r\n      const basicSalaryMWE = isMWE ? (employee.salary || 0) : 0;\r\n      const holidayPayMWE = isMWE ? (this.calculateHolidayPay(employee) || 0) : 0;\r\n      const overtimePayMWE = isMWE ? (this.calculateOvertimePay(employee) || 0) : 0;\r\n      const nightShiftDiffMWE = isMWE ? (employee.nightShiftDiff || 0) : 0;\r\n      const hazardPayMWE = isMWE ? (employee.hazardPay || 0) : 0;\r\n      const thirteenthMonthExempt = Math.min((employee.thirteenthMonthPay || 0), 90000) || 0;\r\n      const deMinimis = Math.min((employee.deMinimis || 0), 10000) || 0; // De minimis limit for 2025\r\n      const sssContribution = (this.calculateSSSContribution(employee.salary) || 0) || 0;\r\n      const philhealthContribution = (this.calculatePhilHealthContribution(employee.salary) || 0) || 0;\r\n      const pagibigContribution = (this.calculatePagIBIGContribution(employee.salary) || 0) || 0;\r\n\r\n      const totalNonTaxable = basicSalaryMWE + holidayPayMWE + overtimePayMWE + nightShiftDiffMWE + hazardPayMWE + thirteenthMonthExempt + deMinimis + sssContribution + philhealthContribution + pagibigContribution;\r\n\r\n      return {\r\n        basicSalaryMWE: basicSalaryMWE || 0,\r\n        holidayPayMWE: holidayPayMWE || 0,\r\n        overtimePayMWE: overtimePayMWE || 0,\r\n        nightShiftDiffMWE: nightShiftDiffMWE || 0,\r\n        hazardPayMWE: hazardPayMWE || 0,\r\n        thirteenthMonthExempt: thirteenthMonthExempt || 0,\r\n        deMinimis: deMinimis || 0,\r\n        sssContribution: sssContribution || 0,\r\n        philhealthContribution: philhealthContribution || 0,\r\n        pagibigContribution: pagibigContribution || 0,\r\n        totalNonTaxable: totalNonTaxable || 0\r\n      };\r\n    },\r\n    calculateTotalEarnings(employee) {\r\n      const baseEarnings = (employee.earnings?.travelExpenses || 0) + (employee.earnings?.otherEarnings || 0);\r\n      const monthlySalary = (employee.salary || 0) || 0; // Ensure salary is a number, default to 0\r\n      const holidayPay = this.calculateHolidayPay(employee) || 0;\r\n      const overtimePay = this.calculateOvertimePay(employee) || 0;\r\n      const payheadEarnings = this.calculatePayheadEarnings(employee.payheads) || 0;\r\n\r\n      return monthlySalary + baseEarnings + holidayPay + overtimePay + payheadEarnings || 0;\r\n    },\r\n    calculateNetSalary(employee) {\r\n      const totalEarnings = this.calculateTotalEarnings(employee) || 0;\r\n      const totalDeductions = this.calculateTotalDeductions(employee) || 0;\r\n\r\n      return totalEarnings - totalDeductions || 0;\r\n    },\r\n    calculateTotalDeductions(employee) {\r\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0;\r\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0;\r\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0;\r\n      const withholdingTax = this.calculateWithholdingTax(employee) || 0;\r\n      const payheadDeductions = this.calculatePayheadDeductions(employee.payheads) || 0;\r\n\r\n      return sssContribution + philhealthContribution + pagibigContribution + withholdingTax + payheadDeductions || 0;\r\n    },\r\n    calculatePayheadDeductions(payheads) {\r\n      return payheads\r\n        .filter(p => p.type === 'Deductions')\r\n        .reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\r\n    },\r\n    calculatePayheadEarnings(payheads) {\r\n      return payheads\r\n        .filter(p => p.type === 'Earnings')\r\n        .reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Outlined');\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\nbutton:disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n\r\n.transition-all {\r\n  transition: all 0.2s ease-in-out;\r\n}\r\n\r\n.hover\\:bg-gray-50:hover {\r\n  background-color: #f9fafb;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAA6D;;EACjEA,KAAK,EAAC;AAAmB;;EACvBA,KAAK,EAAC;AAAmC;;EACvCA,KAAK,EAAC;AAAwC;;EAJ3DC,GAAA;EAc+BD,KAAK,EAAC;;;EAcrBA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAwC;;EAC9CA,KAAK,EAAC;AAAwC;;EAC9CA,KAAK,EAAC;AAAwC;;EAC9CA,KAAK,EAAC;AAAwC;;EAC9CA,KAAK,EAAC;AAAwC;;EAC9CA,KAAK,EAAC;AAAkD;;EACxDA,KAAK,EAAC;AAAwC;;EAC9CA,KAAK,EAAC;AAA0B;oBApClD;oBAAA;;EAyDoBA,KAAK,EAAC;AAAgC;;EAzD1DC,GAAA;EAgEUD,KAAK,EAAC;;;EAGJA,KAAK,EAAC;AAAiF;;EAElFA,KAAK,EAAC;AAAgD;;EACrDA,KAAK,EAAC;AAAkC;;EAUzCA,KAAK,EAAC;AAAK;oBAhF5B;;EAAAC,GAAA;EAwFoCD,KAAK,EAAC;;;uBAvFxCE,mBAAA,CAwGM,OAxGNC,UAwGM,GAvGJC,mBAAA,CAsGM,OAtGNC,UAsGM,GArGJD,mBAAA,CAoGM,OApGNE,UAoGM,GAnGJF,mBAAA,CAQM,OARNG,UAQM,G,0BAPJH,mBAAA,CAAoE;IAAhEJ,KAAK,EAAC;EAAsC,GAAC,gBAAc,sB,gBAC/DI,mBAAA,CAKE;IAXZ,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOqBC,KAAA,CAAAC,aAAa,GAAAF,MAAA;IACtBG,IAAI,EAAC,OAAO;IACZZ,KAAK,EAAC,mHAAmH;IACxHa,QAAM,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,iBAAA,IAAAD,QAAA,CAAAC,iBAAA,IAAAF,IAAA,CAAiB;iEAHjBJ,KAAA,CAAAC,aAAa,E,KAObD,KAAA,CAAAO,QAAQ,I,cAArBf,mBAAA,CAwCQ,SAxCRgB,UAwCQ,G,0BAvCNd,mBAAA,CAWQ;IAXDJ,KAAK,EAAC;EAAa,IACxBI,mBAAA,CASK,aARHA,mBAAA,CAA0F;IAAtFJ,KAAK,EAAC;EAAwE,GAAC,IAAE,GACrFI,mBAAA,CAA4F;IAAxFJ,KAAK,EAAC;EAAwE,GAAC,MAAI,GACvFI,mBAAA,CAAmG;IAA/FJ,KAAK,EAAC;EAAwE,GAAC,aAAW,GAC9FI,mBAAA,CAAsG;IAAlGJ,KAAK,EAAC;EAAwE,GAAC,gBAAc,GACjGI,mBAAA,CAAwG;IAApGJ,KAAK,EAAC;EAAwE,GAAC,kBAAgB,GACnGI,mBAAA,CAAkG;IAA9FJ,KAAK,EAAC;EAAwE,GAAC,YAAU,GAC7FI,mBAAA,CAA8F;IAA1FJ,KAAK,EAAC;EAAwE,GAAC,QAAM,GACzFI,mBAAA,CAA+F;IAA3FJ,KAAK,EAAC;EAAwE,GAAC,SAAO,E,wBAG9FI,mBAAA,CA0BQ,gBAzBNA,mBAAA,CAwBK,MAxBLe,UAwBK,GAvBHf,mBAAA,CAAyE,MAAzEgB,UAAyE,EAAAC,gBAAA,CAAnBX,KAAA,CAAAO,QAAQ,CAACK,EAAE,kBACjElB,mBAAA,CAA2E,MAA3EmB,UAA2E,EAAAF,gBAAA,CAArBX,KAAA,CAAAO,QAAQ,CAACO,IAAI,kBACnEpB,mBAAA,CAAmG,MAAnGqB,UAAmG,EAAhD,GAAC,GAAAJ,gBAAA,CAAGX,KAAA,CAAAO,QAAQ,CAACS,UAAU,CAACC,cAAc,oBACzFvB,mBAAA,CAAsG,MAAtGwB,WAAsG,EAAnD,GAAC,GAAAP,gBAAA,CAAGX,KAAA,CAAAO,QAAQ,CAACY,aAAa,CAACF,cAAc,oBAC5FvB,mBAAA,CAAwG,MAAxG0B,WAAwG,EAArD,GAAC,GAAAT,gBAAA,CAAGX,KAAA,CAAAO,QAAQ,CAACc,eAAe,CAACJ,cAAc,oBAC9FvB,mBAAA,CAA8G,MAA9G4B,WAA8G,EAAjD,GAAC,GAAAX,gBAAA,CAAGX,KAAA,CAAAO,QAAQ,CAACgB,WAAW,CAACN,cAAc,oBACpGvB,mBAAA,CAAkF,MAAlF8B,WAAkF,EAAAb,gBAAA,CAA5BX,KAAA,CAAAO,QAAQ,CAACkB,WAAW,kBAC1E/B,mBAAA,CAeK,MAfLgC,WAeK,GAdHhC,mBAAA,CAMS;IALNiC,OAAK,EAAA7B,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAuB,eAAA,IAAAvB,QAAA,CAAAuB,eAAA,IAAAxB,IAAA,CAAe;IACvBd,KAAK,EAAC,6FAA6F;IAClGuC,QAAQ,EAAE7B,KAAA,CAAA8B;sBAER9B,KAAA,CAAA8B,YAAY,+DA1CjCC,WAAA,GA4CgBrC,mBAAA,CAMS;IALNiC,OAAK,EAAA7B,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAA2B,WAAA,IAAA3B,QAAA,CAAA2B,WAAA,IAAA5B,IAAA,CAAW;IACnBd,KAAK,EAAC,4FAA4F;IACjGuC,QAAQ,GAAG7B,KAAA,CAAAiC,cAAc,IAAIjC,KAAA,CAAA8B;KAC/B,gBAED,iBAlDhBI,WAAA,E,0BAyDQ1C,mBAAA,CAEM2C,SAAA;IA3Dd5C,GAAA;EAAA,IAwDQ6C,mBAAA,yBAA4B,EAC5B1C,mBAAA,CAEM,OAFN2C,WAEM,EAAA1B,gBAAA,CADDX,KAAA,CAAAsC,YAAY,+C,mDAGjBF,mBAAA,0BAA6B,EAErBpC,KAAA,CAAAuC,gBAAgB,I,cADxB/C,mBAAA,CA+BM,OA/BNgD,WA+BM,GA3BJ9C,mBAAA,CA0BM,OA1BN+C,WA0BM,GAvBJ/C,mBAAA,CAUM,OAVNgD,WAUM,GATJhD,mBAAA,CAEK,MAFLiD,WAEK,EAFwC,eAC/B,GAAAhC,gBAAA,CAAGX,KAAA,CAAAO,QAAQ,CAACO,IAAI,IAAG,KAAG,GAAAH,gBAAA,CAAGX,KAAA,CAAAO,QAAQ,CAACkB,WAAW,kBAE3D/B,mBAAA,CAKS;IAJNiC,OAAK,EAAA7B,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,KAAA,CAAAuC,gBAAgB;IACxBjD,KAAK,EAAC;gCAENI,mBAAA,CAAkD;IAA5CJ,KAAK,EAAC;EAAyB,GAAC,OAAK,oB,MAG/CI,mBAAA,CAWM,OAXNkD,WAWM,GAVJlD,mBAAA,CAMU;IALPmD,GAAG,EAAE7C,KAAA,CAAAiC,cAAc;IACpB3C,KAAK,EAAC,iBAAiB;IACvBwD,WAAW,EAAC,GAAG;IACdC,MAAI,EAAAjD,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAA2C,YAAA,IAAA3C,QAAA,CAAA2C,YAAA,IAAA5C,IAAA,CAAY;IAClB6C,OAAK,EAAAnD,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAA6C,aAAA,IAAA7C,QAAA,CAAA6C,aAAA,IAAA9C,IAAA,CAAa;2CAtFrC+C,WAAA,GAwFuBnD,KAAA,CAAAoD,WAAW,I,cAApB5D,mBAAA,CAEI,KAFJ6D,WAEI,EAFoD,yFAExD,KA1FdjB,mBAAA,e,SAAAA,mBAAA,gBA+FQA,mBAAA,oBAAuB,EAEfpC,KAAA,CAAAsD,aAAa,I,cADrB9D,mBAAA,CAMM;IAtGdD,GAAA;IAkGWD,KAAK,EAlGhBiE,eAAA,EAkGkBvD,KAAA,CAAAsD,aAAa,CAACE,QAAQ,4EACxB,iCAAiC;sBAEpCxD,KAAA,CAAAsD,aAAa,2BArG1BlB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}