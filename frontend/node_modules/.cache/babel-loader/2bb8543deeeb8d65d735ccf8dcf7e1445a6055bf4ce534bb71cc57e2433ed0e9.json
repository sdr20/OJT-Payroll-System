{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport PayHeadModal from '@/components/payhead/PayHeadModal.vue';\nimport PayHeadTable from '@/components/payhead/PayHeadTable.vue';\nimport EmployeePayrollTable from '@/components/EmployeePayrollTable.vue';\nimport AddPayheadModal from '@/components/AddPayheadModal.vue';\nexport default {\n  name: 'ManagePayHeads',\n  components: {\n    PayHeadModal,\n    PayHeadTable,\n    EmployeePayrollTable,\n    AddPayheadModal\n  },\n  data() {\n    return {\n      payHeads: [],\n      employees: [],\n      newPayHead: {\n        name: '',\n        amount: '',\n        type: 'Earnings'\n      },\n      selectedPayHead: {\n        id: '',\n        name: '',\n        amount: '',\n        type: 'Earnings'\n      },\n      showAddModal: false,\n      showUpdateModal: false,\n      showAddPayheadModal: false,\n      selectedEmployee: null,\n      selectedEmployeePayheads: [],\n      availablePayheads: []\n    };\n  },\n  computed: {\n    totalPayableSalary() {\n      const earnings = this.selectedEmployeePayheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + p.amount, 0);\n      const deductions = this.selectedEmployeePayheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + p.amount, 0);\n      return earnings - deductions;\n    }\n  },\n  async created() {\n    await this.fetchPayHeads();\n    await this.fetchEmployees();\n  },\n  methods: {\n    async fetchPayHeads() {\n      // Fetch pay heads from API\n      // Example: this.payHeads = await api.getPayHeads();\n      this.payHeads = [{\n        id: 1,\n        name: 'Basic Salary',\n        amount: 30000,\n        type: 'Earnings'\n      }, {\n        id: 2,\n        name: 'Health Insurance',\n        amount: 2000,\n        type: 'Deductions'\n      }];\n    },\n    async fetchEmployees() {\n      // Fetch employees from API\n      // Example: this.employees = await api.getEmployees();\n      this.employees = [{\n        id: 1,\n        name: 'John Doe',\n        position: 'Software Engineer',\n        totalDeduction: 2000,\n        totalEarnings: 30000,\n        totalSalary: 28000\n      }, {\n        id: 2,\n        name: 'Jane Smith',\n        position: 'Product Manager',\n        totalDeduction: 1500,\n        totalEarnings: 35000,\n        totalSalary: 33500\n      }];\n    },\n    addPayHead(payHead) {\n      this.payHeads.push({\n        ...payHead,\n        id: Date.now()\n      });\n      this.showAddModal = false;\n    },\n    showUpdatePayHeadModal(payHead) {\n      this.selectedPayHead = {\n        ...payHead\n      };\n      this.showUpdateModal = true;\n    },\n    updatePayHead(updatedPayHead) {\n      const index = this.payHeads.findIndex(ph => ph.id === updatedPayHead.id);\n      if (index !== -1) {\n        this.payHeads.splice(index, 1, updatedPayHead);\n        this.showUpdateModal = false;\n      }\n    },\n    deletePayHead(id) {\n      this.payHeads = this.payHeads.filter(payHead => payHead.id !== id);\n    },\n    openAddPayheadModal(employee) {\n      this.selectedEmployee = employee;\n      this.selectedEmployeePayheads = [];\n      this.availablePayheads = this.payHeads;\n      this.showAddPayheadModal = true;\n    },\n    addPayheadToEmployee(payhead) {\n      this.selectedEmployeePayheads.push(payhead);\n      this.availablePayheads = this.availablePayheads.filter(p => p.id !== payhead.id);\n    },\n    removePayheadFromEmployee(payhead) {\n      this.selectedEmployeePayheads = this.selectedEmployeePayheads.filter(p => p.id !== payhead.id);\n      this.availablePayheads.push(payhead);\n    },\n    savePayheads() {\n      // Logic to save payheads to the selected employee\n      this.showAddPayheadModal = false;\n    }\n  }\n};","map":{"version":3,"names":["PayHeadModal","PayHeadTable","EmployeePayrollTable","AddPayheadModal","name","components","data","payHeads","employees","newPayHead","amount","type","selectedPayHead","id","showAddModal","showUpdateModal","showAddPayheadModal","selectedEmployee","selectedEmployeePayheads","availablePayheads","computed","totalPayableSalary","earnings","filter","p","reduce","sum","deductions","created","fetchPayHeads","fetchEmployees","methods","position","totalDeduction","totalEarnings","totalSalary","addPayHead","payHead","push","Date","now","showUpdatePayHeadModal","updatePayHead","updatedPayHead","index","findIndex","ph","splice","deletePayHead","openAddPayheadModal","employee","addPayheadToEmployee","payhead","removePayheadFromEmployee","savePayheads"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\ManagePayHeads.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-1\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Add Pay Head Button -->\r\n      <button class=\"mb-4 py-2 px-4 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-all duration-200\" @click=\"showAddModal = true\">Add Pay Head</button>\r\n      \r\n      <!-- Add Pay Head Modal -->\r\n      <PayHeadModal v-if=\"showAddModal\" @close=\"showAddModal = false\" @save=\"addPayHead\" :payHead=\"newPayHead\" />\r\n\r\n      <!-- Update Pay Head Modal -->\r\n      <PayHeadModal v-if=\"showUpdateModal\" @close=\"showUpdateModal = false\" @save=\"updatePayHead\" :payHead=\"selectedPayHead\" isUpdate />\r\n\r\n      <!-- Table to Display Pay Heads -->\r\n      <PayHeadTable :payHeads=\"payHeads\" @update=\"showUpdatePayHeadModal\" @delete=\"deletePayHead\" />\r\n\r\n      <!-- New Container for Employee Payroll Information -->\r\n      <EmployeePayrollTable :employees=\"employees\" @addPayhead=\"openAddPayheadModal\" />\r\n\r\n      <!-- Add Payhead to Employee Modal -->\r\n      <AddPayheadModal v-if=\"showAddPayheadModal\" @close=\"showAddPayheadModal = false\" @save=\"savePayheads\" :availablePayheads=\"availablePayheads\" :selectedEmployeePayheads=\"selectedEmployeePayheads\" @addPayhead=\"addPayheadToEmployee\" @removePayhead=\"removePayheadFromEmployee\" :totalPayableSalary=\"totalPayableSalary\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport PayHeadModal from '@/components/payhead/PayHeadModal.vue';\r\nimport PayHeadTable from '@/components/payhead/PayHeadTable.vue';\r\nimport EmployeePayrollTable from '@/components/EmployeePayrollTable.vue';\r\nimport AddPayheadModal from '@/components/AddPayheadModal.vue';\r\n\r\nexport default {\r\n  name: 'ManagePayHeads',\r\n  components: {\r\n    PayHeadModal,\r\n    PayHeadTable,\r\n    EmployeePayrollTable,\r\n    AddPayheadModal\r\n  },\r\n  data() {\r\n    return {\r\n      payHeads: [],\r\n      employees: [],\r\n      newPayHead: {\r\n        name: '',\r\n        amount: '',\r\n        type: 'Earnings'\r\n      },\r\n      selectedPayHead: {\r\n        id: '',\r\n        name: '',\r\n        amount: '',\r\n        type: 'Earnings'\r\n      },\r\n      showAddModal: false,\r\n      showUpdateModal: false,\r\n      showAddPayheadModal: false,\r\n      selectedEmployee: null,\r\n      selectedEmployeePayheads: [],\r\n      availablePayheads: [],\r\n    };\r\n  },\r\n  computed: {\r\n    totalPayableSalary() {\r\n      const earnings = this.selectedEmployeePayheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + p.amount, 0);\r\n      const deductions = this.selectedEmployeePayheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + p.amount, 0);\r\n      return earnings - deductions;\r\n    }\r\n  },\r\n  async created() {\r\n    await this.fetchPayHeads();\r\n    await this.fetchEmployees();\r\n  },\r\n  methods: {\r\n    async fetchPayHeads() {\r\n      // Fetch pay heads from API\r\n      // Example: this.payHeads = await api.getPayHeads();\r\n      this.payHeads = [\r\n        { id: 1, name: 'Basic Salary', amount: 30000, type: 'Earnings' },\r\n        { id: 2, name: 'Health Insurance', amount: 2000, type: 'Deductions' },\r\n      ];\r\n    },\r\n    async fetchEmployees() {\r\n      // Fetch employees from API\r\n      // Example: this.employees = await api.getEmployees();\r\n      this.employees = [\r\n        { id: 1, name: 'John Doe', position: 'Software Engineer', totalDeduction: 2000, totalEarnings: 30000, totalSalary: 28000 },\r\n        { id: 2, name: 'Jane Smith', position: 'Product Manager', totalDeduction: 1500, totalEarnings: 35000, totalSalary: 33500 },\r\n      ];\r\n    },\r\n    addPayHead(payHead) {\r\n      this.payHeads.push({ ...payHead, id: Date.now() });\r\n      this.showAddModal = false;\r\n    },\r\n    showUpdatePayHeadModal(payHead) {\r\n      this.selectedPayHead = { ...payHead };\r\n      this.showUpdateModal = true;\r\n    },\r\n    updatePayHead(updatedPayHead) {\r\n      const index = this.payHeads.findIndex(ph => ph.id === updatedPayHead.id);\r\n      if (index !== -1) {\r\n        this.payHeads.splice(index, 1, updatedPayHead);\r\n        this.showUpdateModal = false;\r\n      }\r\n    },\r\n    deletePayHead(id) {\r\n      this.payHeads = this.payHeads.filter(payHead => payHead.id !== id);\r\n    },\r\n    openAddPayheadModal(employee) {\r\n      this.selectedEmployee = employee;\r\n      this.selectedEmployeePayheads = [];\r\n      this.availablePayheads = this.payHeads;\r\n      this.showAddPayheadModal = true;\r\n    },\r\n    addPayheadToEmployee(payhead) {\r\n      this.selectedEmployeePayheads.push(payhead);\r\n      this.availablePayheads = this.availablePayheads.filter(p => p.id !== payhead.id);\r\n    },\r\n    removePayheadFromEmployee(payhead) {\r\n      this.selectedEmployeePayheads = this.selectedEmployeePayheads.filter(p => p.id !== payhead.id);\r\n      this.availablePayheads.push(payhead);\r\n    },\r\n    savePayheads() {\r\n      // Logic to save payheads to the selected employee\r\n      this.showAddPayheadModal = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}