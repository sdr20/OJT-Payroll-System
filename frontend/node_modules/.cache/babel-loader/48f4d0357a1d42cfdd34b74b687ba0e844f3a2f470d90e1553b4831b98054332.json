{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  name: 'ManagePayHeads',\n  data() {\n    return {\n      payHeads: [{\n        id: 1,\n        name: 'Basic Salary',\n        amount: 30000,\n        type: 'Earnings'\n      }, {\n        id: 2,\n        name: 'Health Insurance',\n        amount: 2000,\n        type: 'Deductions'\n      }],\n      employees: [{\n        id: 1,\n        name: 'John Doe',\n        position: 'Software Engineer',\n        totalDeduction: 2000,\n        totalEarnings: 30000,\n        totalSalary: 28000\n      }, {\n        id: 2,\n        name: 'Jane Smith',\n        position: 'Product Manager',\n        totalDeduction: 1500,\n        totalEarnings: 35000,\n        totalSalary: 33500\n      }],\n      newPayHead: {\n        name: '',\n        amount: '',\n        type: 'Earnings'\n      },\n      selectedPayHead: {\n        id: '',\n        name: '',\n        amount: '',\n        type: 'Earnings'\n      },\n      showAddModal: false,\n      showUpdateModal: false,\n      showAddPayheadModal: false,\n      selectedEmployee: null,\n      selectedEmployeePayheads: []\n    };\n  },\n  computed: {\n    totalPayableSalary() {\n      const earnings = this.selectedEmployeePayheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + p.amount, 0);\n      const deductions = this.selectedEmployeePayheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + p.amount, 0);\n      return earnings - deductions;\n    }\n  },\n  methods: {\n    goBack() {\n      this.$router.go(-1);\n    },\n    addPayHead() {\n      if (this.newPayHead.name && this.newPayHead.amount && this.newPayHead.type) {\n        this.payHeads.push({\n          id: Date.now(),\n          name: this.newPayHead.name,\n          amount: this.newPayHead.amount,\n          type: this.newPayHead.type\n        });\n        this.newPayHead.name = '';\n        this.newPayHead.amount = '';\n        this.newPayHead.type = 'Earnings';\n        this.showAddModal = false;\n      }\n    },\n    showUpdatePayHeadModal(payHead) {\n      this.selectedPayHead = {\n        ...payHead\n      };\n      this.showUpdateModal = true;\n    },\n    updatePayHead() {\n      const updatedPayHeadIndex = this.payHeads.findIndex(ph => ph.id === this.selectedPayHead.id);\n      if (updatedPayHeadIndex !== -1) {\n        this.payHeads[updatedPayHeadIndex] = {\n          ...this.selectedPayHead\n        };\n        this.showUpdateModal = false;\n      }\n    },\n    deletePayHead(id) {\n      this.payHeads = this.payHeads.filter(payHead => payHead.id !== id);\n    },\n    openAddPayheadModal(employee) {\n      this.selectedEmployee = employee;\n      this.selectedEmployeePayheads = [];\n      this.showAddPayheadModal = true;\n    },\n    isPayheadSelected(payheadId) {\n      return this.selectedEmployeePayheads.some(p => p.id === payheadId);\n    },\n    addPayheadToEmployee(payhead) {\n      if (!this.isPayheadSelected(payhead.id)) {\n        this.selectedEmployeePayheads.push({\n          ...payhead\n        });\n      }\n    },\n    removePayheadFromEmployee(payhead) {\n      this.selectedEmployeePayheads = this.selectedEmployeePayheads.filter(p => p.id !== payhead.id);\n    },\n    savePayheads() {\n      // Logic to save payheads to the selected employee\n      this.showAddPayheadModal = false;\n    }\n  }\n};","map":{"version":3,"names":["name","data","payHeads","id","amount","type","employees","position","totalDeduction","totalEarnings","totalSalary","newPayHead","selectedPayHead","showAddModal","showUpdateModal","showAddPayheadModal","selectedEmployee","selectedEmployeePayheads","computed","totalPayableSalary","earnings","filter","p","reduce","sum","deductions","methods","goBack","$router","go","addPayHead","push","Date","now","showUpdatePayHeadModal","payHead","updatePayHead","updatedPayHeadIndex","findIndex","ph","deletePayHead","openAddPayheadModal","employee","isPayheadSelected","payheadId","some","addPayheadToEmployee","payhead","removePayheadFromEmployee","savePayheads"],"sources":["C:\\Users\\ASUS\\Desktop\\Payroll_system\\frontend\\src\\views\\ManagePayHeads.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-1\">\r\n    <div class=\"max-w-6xl mx-auto\">\r\n      <!-- Previous code remains the same until the Add Payhead to Employee Modal -->\r\n\r\n      <!-- Add Payhead to Employee Modal -->\r\n      <div v-if=\"showAddPayheadModal\" class=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n        <div class=\"bg-white p-6 rounded-xl shadow-md max-w-md w-full\">\r\n          <h2 class=\"text-xl font-bold mb-4\">Add Payhead to Employee</h2>\r\n          <div class=\"mb-4\">\r\n            <label class=\"block text-gray-700 mb-1 font-medium text-sm\">Available Payheads</label>\r\n            <div class=\"space-y-2\">\r\n              <div v-for=\"payhead in payHeads\" :key=\"payhead.id\" class=\"flex justify-between items-center p-2 border border-gray-200 rounded-lg\">\r\n                <span>{{ payhead.name }} ({{ payhead.type }})</span>\r\n                <button \r\n                  @click=\"addPayheadToEmployee(payhead)\"\r\n                  class=\"bg-green-50 text-green-600 font-semibold py-1 px-2 rounded-lg hover:bg-green-100 transition-all duration-200 text-xs\"\r\n                  :disabled=\"isPayheadSelected(payhead.id)\"\r\n                  :class=\"{'opacity-50 cursor-not-allowed': isPayheadSelected(payhead.id)}\"\r\n                >\r\n                  {{ isPayheadSelected(payhead.id) ? 'Added' : 'Add' }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"mb-4\">\r\n            <label class=\"block text-gray-700 mb-1 font-medium text-sm\">Payheads Added to Employee</label>\r\n            <div class=\"space-y-2\">\r\n              <div v-for=\"payhead in selectedEmployeePayheads\" :key=\"payhead.id\" class=\"flex justify-between items-center p-2 border border-gray-200 rounded-lg\">\r\n                <span>{{ payhead.name }} ({{ payhead.type }})</span>\r\n                <button @click=\"removePayheadFromEmployee(payhead)\" class=\"bg-red-50 text-red-600 font-semibold py-1 px-2 rounded-lg hover:bg-red-100 transition-all duration-200 text-xs\">Remove</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"mb-4\">\r\n            <label class=\"block text-gray-700 mb-1 font-medium text-sm\">Total Payhead</label>\r\n            <div class=\"p-2 border border-gray-200 rounded-lg\">\r\n              <span>Total Payable Salary: P {{ totalPayableSalary.toLocaleString() }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"flex justify-end gap-3\">\r\n            <button type=\"button\" @click=\"showAddPayheadModal = false\" class=\"py-2 px-4 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all duration-200\">Cancel</button>\r\n            <button type=\"button\" @click=\"savePayheads\" class=\"py-2 px-4 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-all duration-200\">Save</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ManagePayHeads',\r\n  data() {\r\n    return {\r\n      payHeads: [\r\n        { id: 1, name: 'Basic Salary', amount: 30000, type: 'Earnings' },\r\n        { id: 2, name: 'Health Insurance', amount: 2000, type: 'Deductions' },\r\n      ],\r\n      employees: [\r\n        { id: 1, name: 'John Doe', position: 'Software Engineer', totalDeduction: 2000, totalEarnings: 30000, totalSalary: 28000 },\r\n        { id: 2, name: 'Jane Smith', position: 'Product Manager', totalDeduction: 1500, totalEarnings: 35000, totalSalary: 33500 },\r\n      ],\r\n      newPayHead: {\r\n        name: '',\r\n        amount: '',\r\n        type: 'Earnings'\r\n      },\r\n      selectedPayHead: {\r\n        id: '',\r\n        name: '',\r\n        amount: '',\r\n        type: 'Earnings'\r\n      },\r\n      showAddModal: false,\r\n      showUpdateModal: false,\r\n      showAddPayheadModal: false,\r\n      selectedEmployee: null,\r\n      selectedEmployeePayheads: [],\r\n    };\r\n  },\r\n  computed: {\r\n    totalPayableSalary() {\r\n      const earnings = this.selectedEmployeePayheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + p.amount, 0);\r\n      const deductions = this.selectedEmployeePayheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + p.amount, 0);\r\n      return earnings - deductions;\r\n    }\r\n  },\r\n  methods: {\r\n    goBack() {\r\n      this.$router.go(-1);\r\n    },\r\n    addPayHead() {\r\n      if (this.newPayHead.name && this.newPayHead.amount && this.newPayHead.type) {\r\n        this.payHeads.push({\r\n          id: Date.now(),\r\n          name: this.newPayHead.name,\r\n          amount: this.newPayHead.amount,\r\n          type: this.newPayHead.type,\r\n        });\r\n        this.newPayHead.name = '';\r\n        this.newPayHead.amount = '';\r\n        this.newPayHead.type = 'Earnings';\r\n        this.showAddModal = false;\r\n      }\r\n    },\r\n    showUpdatePayHeadModal(payHead) {\r\n      this.selectedPayHead = { ...payHead };\r\n      this.showUpdateModal = true;\r\n    },\r\n    updatePayHead() {\r\n      const updatedPayHeadIndex = this.payHeads.findIndex(ph => ph.id === this.selectedPayHead.id);\r\n      if (updatedPayHeadIndex !== -1) {\r\n        this.payHeads[updatedPayHeadIndex] = { ...this.selectedPayHead };\r\n        this.showUpdateModal = false;\r\n      }\r\n    },\r\n    deletePayHead(id) {\r\n      this.payHeads = this.payHeads.filter(payHead => payHead.id !== id);\r\n    },\r\n    openAddPayheadModal(employee) {\r\n      this.selectedEmployee = employee;\r\n      this.selectedEmployeePayheads = [];\r\n      this.showAddPayheadModal = true;\r\n    },\r\n    isPayheadSelected(payheadId) {\r\n      return this.selectedEmployeePayheads.some(p => p.id === payheadId);\r\n    },\r\n    addPayheadToEmployee(payhead) {\r\n      if (!this.isPayheadSelected(payhead.id)) {\r\n        this.selectedEmployeePayheads.push({ ...payhead });\r\n      }\r\n    },\r\n    removePayheadFromEmployee(payhead) {\r\n      this.selectedEmployeePayheads = this.selectedEmployeePayheads.filter(p => p.id !== payhead.id);\r\n    },\r\n    savePayheads() {\r\n      // Logic to save payheads to the selected employee\r\n      this.showAddPayheadModal = false;\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}