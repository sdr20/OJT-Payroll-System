{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport moment from 'moment';\njsPDF.prototype.autoTable = autoTable.default;\nexport default {\n  name: 'SalarySlips',\n  data() {\n    return {\n      employees: [],\n      positions: [],\n      searchQuery: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      payslipGenerationStatus: {},\n      isLoading: false,\n      isGeneratingAll: false,\n      statusMessage: '',\n      showHistoryModal: false,\n      selectedEmployee: null,\n      selectedPayslip: null,\n      payslipHistory: [],\n      allPayslipHistories: {},\n      iframeError: false,\n      config: {\n        minimumWage: 0,\n        deMinimisLimit: 0,\n        regularHolidays: [],\n        specialNonWorkingDays: []\n      },\n      showPrintAllModal: false,\n      employeesWithPayslips: [],\n      selectedEmployeesForPrint: [],\n      isPrinting: false,\n      selectAll: false,\n      showUpdateModal: false,\n      selectedEmployeeForUpdate: '',\n      newPosition: '',\n      sortPreviousField: 'payDate',\n      sortPreviousAsc: true,\n      sortNewField: 'payDate',\n      sortNewAsc: true,\n      currentDate: new Date('2025-03-17') // Matches your initial context; adjust as needed\n    };\n  },\n  computed: {\n    filteredEmployees() {\n      return this.employees.filter(employee => {\n        const name = employee && employee.name ? employee.name : '';\n        return name.toLowerCase().includes(this.searchQuery.toLowerCase());\n      });\n    },\n    totalPages() {\n      return Math.ceil(this.filteredEmployees.length / this.itemsPerPage) || 1;\n    },\n    paginatedEmployees() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredEmployees.slice(start, end).sort((a, b) => {\n        return a.position.localeCompare(b.position);\n      });\n    },\n    sortedPositionHistory() {\n      if (!this.selectedEmployee || !this.selectedEmployee.positionHistory) {\n        return [{\n          position: this.selectedEmployee?.position || 'N/A',\n          salary: this.selectedEmployee?.salary || 0,\n          startDate: this.selectedEmployee?.hireDate || this.currentDate.toISOString().split('T')[0],\n          endDate: null\n        }];\n      }\n      return [...this.selectedEmployee.positionHistory].sort((a, b) => new Date(a.startDate) - new Date(b.startDate));\n    },\n    initialPosition() {\n      return this.sortedPositionHistory[0];\n    },\n    latestPosition() {\n      return this.sortedPositionHistory[this.sortedPositionHistory.length - 1];\n    },\n    hasUpdatedPosition() {\n      return this.sortedPositionHistory.length > 1;\n    },\n    sortedPreviousPayslips() {\n      const previousPayslips = this.payslipHistory.filter(payslip => payslip.position === this.initialPosition.position);\n      return previousPayslips.sort((a, b) => {\n        if (this.sortPreviousField === 'payDate') {\n          const dateA = moment(a.paydayType === 'mid-month' ? a.expectedPaydays.midMonthPayday : a.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\n          const dateB = moment(b.paydayType === 'mid-month' ? b.expectedPaydays.midMonthPayday : b.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\n          return this.sortPreviousAsc ? dateA - dateB : dateB - dateA;\n        } else if (this.sortPreviousField === 'position') {\n          const posA = this.getPositionName(a.position);\n          const posB = this.getPositionName(b.position);\n          return this.sortPreviousAsc ? posA.localeCompare(posB) : posB.localeCompare(posA);\n        }\n        return 0;\n      });\n    },\n    sortedNewPayslips() {\n      const newPayslips = this.payslipHistory.filter(payslip => payslip.position === this.latestPosition.position && this.hasUpdatedPosition && moment(payslip.salaryMonth, 'YYYY-MM').isSameOrAfter(moment(this.latestPosition.startDate, 'YYYY-MM-DD'), 'month'));\n      return newPayslips.sort((a, b) => {\n        if (this.sortNewField === 'payDate') {\n          const dateA = moment(a.paydayType === 'mid-month' ? a.expectedPaydays.midMonthPayday : a.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\n          const dateB = moment(b.paydayType === 'mid-month' ? b.expectedPaydays.midMonthPayday : b.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\n          return this.sortNewAsc ? dateA - dateB : dateB - dateA;\n        } else if (this.sortNewField === 'position') {\n          const posA = this.getPositionName(a.position);\n          const posB = this.getPositionName(b.position);\n          return this.sortNewAsc ? posA.localeCompare(posB) : posB.localeCompare(posA);\n        }\n        return 0;\n      });\n    }\n  },\n  async created() {\n    await this.fetchConfig();\n    await this.fetchPositionsWithRetry();\n    await this.fetchEmployees();\n  },\n  methods: {\n    async fetchConfig() {\n      try {\n        const response = await axios.get('http://localhost:7777/api/config', {\n          headers: {\n            'user-role': 'admin'\n          }\n        });\n        this.config = {\n          minimumWage: response.data.minimumWage || 610,\n          deMinimisLimit: response.data.deMinimisLimit || 10000,\n          regularHolidays: response.data.regularHolidays || [],\n          specialNonWorkingDays: response.data.specialNonWorkingDays || []\n        };\n      } catch (error) {\n        console.error('Error fetching config:', error);\n        this.showErrorMessage('Failed to load configuration. Using defaults.');\n        this.config = {\n          minimumWage: 610,\n          deMinimisLimit: 10000,\n          regularHolidays: [],\n          specialNonWorkingDays: []\n        };\n      }\n    },\n    async fetchPositionsWithRetry(retries = 3, delay = 1000) {\n      for (let i = 0; i < retries; i++) {\n        try {\n          const response = await axios.get('http://localhost:7777/api/positions', {\n            headers: {\n              'user-role': 'admin'\n            }\n          });\n          this.positions = response.data.map(position => ({\n            name: position.name,\n            salary: position.salary\n          }));\n          return;\n        } catch (error) {\n          console.error(`Attempt ${i + 1} to fetch positions failed:`, error);\n          if (i === retries - 1) {\n            this.showErrorMessage('Failed to load positions after multiple attempts.');\n          } else {\n            await new Promise(resolve => setTimeout(resolve, delay));\n          }\n        }\n      }\n    },\n    getPositionName(positionName) {\n      const position = this.positions.find(p => p.name.trim().toLowerCase() === positionName?.trim().toLowerCase());\n      return position ? position.name : positionName || 'Unknown Position';\n    },\n    getPositionSalary(positionName) {\n      const position = this.positions.find(p => p.name.trim().toLowerCase() === positionName?.trim().toLowerCase());\n      return position ? position.salary : 0;\n    },\n    getHourlyRate(positionName) {\n      const salary = this.getPositionSalary(positionName);\n      return salary / (8 * 22);\n    },\n    async fetchEmployees() {\n      this.isLoading = true;\n      this.statusMessage = '';\n      try {\n        const response = await axios.get('http://localhost:7777/api/employees', {\n          headers: {\n            'user-role': 'admin'\n          }\n        });\n        this.employees = response.data.map(employee => {\n          const latestPosition = this.getLatestPosition(employee);\n          const name = `${employee.firstName || ''} ${employee.lastName || ''}`.trim() || 'Unnamed Employee';\n          return {\n            ...employee,\n            name,\n            position: latestPosition.position,\n            salary: latestPosition.salary,\n            positionHistory: Array.isArray(employee.positionHistory) && employee.positionHistory.length > 0 ? employee.positionHistory : [{\n              position: employee.position || 'N/A',\n              salary: employee.salary || 0,\n              startDate: employee.hireDate || this.currentDate.toISOString().split('T')[0],\n              endDate: null\n            }],\n            createdAt: employee.createdAt || employee.hireDate,\n            updatedAt: employee.updatedAt\n          };\n        });\n        this.showSuccessMessage('Employees loaded successfully!');\n      } catch (error) {\n        console.error('Error fetching employees:', error);\n        this.showErrorMessage(`Failed to load employees: ${error.message}`);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async refreshData() {\n      this.isLoading = true;\n      try {\n        await this.fetchConfig();\n        await this.fetchPositionsWithRetry();\n        await this.fetchEmployees();\n        if (this.showHistoryModal && this.selectedEmployee) {\n          await this.showPayslipHistory(this.selectedEmployee);\n        }\n      } catch (error) {\n        console.error('Error refreshing data:', error);\n        this.showErrorMessage(`Failed to refresh data: ${error.message}`);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async showPayslipHistory(employee) {\n      this.isLoading = true;\n      if (!employee || !employee.id || !employee.empNo) {\n        this.showErrorMessage('Invalid employee data');\n        console.error('Invalid employee:', employee);\n        this.isLoading = false;\n        return;\n      }\n      this.selectedEmployee = {\n        ...employee,\n        positionHistory: Array.isArray(employee.positionHistory) && employee.positionHistory.length > 0 ? employee.positionHistory : [{\n          position: employee.position || 'N/A',\n          salary: employee.salary || 0,\n          startDate: employee.hireDate || this.currentDate.toISOString().split('T')[0],\n          endDate: null\n        }]\n      };\n      const today = moment(this.currentDate);\n      const hireDate = moment(this.selectedEmployee.hireDate || this.currentDate);\n      let backendPayslips = [];\n      try {\n        const response = await axios.get(`http://localhost:7777/api/payslips/${this.selectedEmployee.id}`, {\n          headers: {\n            'user-role': 'admin'\n          }\n        });\n        backendPayslips = response.data || [];\n        console.log('Fetched backend payslips:', backendPayslips);\n      } catch (error) {\n        console.error('Error fetching payslips:', error);\n      }\n      const payslipHistory = [];\n      let currentPayDate = hireDate.clone();\n      while (currentPayDate.isSameOrBefore(today, 'day')) {\n        const salaryMonth = currentPayDate.format('YYYY-MM');\n        const expectedPaydays = this.getExpectedPayday(hireDate.toDate(), salaryMonth);\n        const payDate = currentPayDate.clone();\n        const positionAtPayDate = this.getActivePositionForDate(this.selectedEmployee.positionHistory, payDate);\n        const paydayType = payDate.date() === 15 ? 'mid-month' : 'end-of-month'; // Adjusted to match backend expectation\n        const existingPayslip = backendPayslips.find(p => p.salaryMonth === salaryMonth && p.paydayType === paydayType && moment(p.payDate).isSame(payDate, 'day')) || {};\n        const payslip = {\n          salaryMonth,\n          paydayType,\n          payDate: payDate.format('YYYY-MM-DD'),\n          position: positionAtPayDate.position,\n          salary: positionAtPayDate.salary,\n          totalSalary: existingPayslip.salary ? this.calculateNetSalary({\n            ...this.selectedEmployee,\n            position: positionAtPayDate.position,\n            salary: positionAtPayDate.salary\n          }) : null,\n          payslipDataUrl: existingPayslip.payslipData ? `data:application/pdf;base64,${existingPayslip.payslipData}` : null,\n          employee: {\n            ...this.selectedEmployee,\n            position: positionAtPayDate.position,\n            salary: positionAtPayDate.salary,\n            salaryMonth: payDate.format('YYYY-MM-DD')\n          },\n          expectedPaydays\n        };\n        payslipHistory.push(payslip);\n        if (!payslip.payslipDataUrl && today.isSameOrAfter(payDate, 'day')) {\n          await this.generatePayslip(payslip);\n        }\n        currentPayDate.add(15, 'days'); // Increment by 15 days\n      }\n      this.allPayslipHistories[this.selectedEmployee.id] = payslipHistory;\n      this.payslipHistory = payslipHistory;\n      this.selectedPayslip = payslipHistory.find(p => p.payslipDataUrl) || payslipHistory[0] || null;\n      this.showHistoryModal = true;\n      this.isLoading = false;\n    },\n    canGeneratePayslip(payslip) {\n      const today = moment(this.currentDate);\n      const payDate = moment(payslip.paydayType === 'mid-month' ? payslip.expectedPaydays.midMonthPayday : payslip.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\n      return today.isSameOrAfter(payDate, 'day') && !payslip.payslipDataUrl;\n    },\n    async generatePayslip(payslip) {\n      const employee = payslip.employee;\n      if (!employee || !employee.id || !employee.empNo) {\n        this.showErrorMessage('Employee data is incomplete.');\n        console.error('Invalid employee data:', employee);\n        return;\n      }\n      const payDate = moment(payslip.paydayType === 'mid-month' ? `${payslip.salaryMonth}-15` : `${payslip.salaryMonth}-${moment(payslip.salaryMonth).daysInMonth()}`, 'YYYY-MM-DD');\n      if (!payDate.isValid()) {\n        this.showErrorMessage('Invalid pay date calculated.');\n        console.error('Invalid payDate:', payslip.salaryMonth, payslip.paydayType);\n        return;\n      }\n      const positionHistory = Array.isArray(employee.positionHistory) ? employee.positionHistory : [];\n      const activePosition = this.getActivePositionForDate(positionHistory, payDate);\n      if (!activePosition || !activePosition.position || activePosition.salary === undefined) {\n        this.showErrorMessage('Invalid position or salary for this date.');\n        console.error('Invalid activePosition:', activePosition, 'Position History:', positionHistory);\n        return;\n      }\n      const updatedEmployee = {\n        ...employee,\n        position: activePosition.position,\n        salary: activePosition.salary\n      };\n      const key = `${payslip.salaryMonth}-${payslip.paydayType}`;\n      this.payslipGenerationStatus[key] = {\n        generating: true\n      };\n      try {\n        const payslipData = this.createPayslipData(updatedEmployee);\n        const pdfBlob = await this.generatePdf(payslipData);\n        const base64Data = await this.blobToBase64(pdfBlob);\n        const url = URL.createObjectURL(pdfBlob);\n        const payload = {\n          employeeId: Number(employee.id),\n          // Ensure number\n          empNo: String(employee.empNo),\n          payslipData: base64Data.split(',')[1],\n          // Remove \"data:application/pdf;base64,\" prefix\n          salaryMonth: payslip.salaryMonth,\n          paydayType: payslip.paydayType,\n          position: activePosition.position,\n          salary: Number(activePosition.salary) // Ensure number\n        };\n        console.log('Sending payload to backend:', payload);\n        if (!payload.employeeId || !payload.empNo || !payload.payslipData || !payload.salaryMonth || !payload.paydayType || !payload.position || payload.salary === undefined || isNaN(payload.salary)) {\n          throw new Error('Payload is missing required fields or contains invalid data');\n        }\n        const response = await axios.post('http://localhost:7777/api/payslips/generate', payload, {\n          headers: {\n            'user-role': 'admin'\n          }\n        });\n        console.log('Payslip generated successfully:', response.data);\n        if (response.status === 201 || response.status === 200) {\n          payslip.payslipDataUrl = url;\n          payslip.position = activePosition.position;\n          payslip.salary = activePosition.salary;\n          payslip.totalSalary = this.calculateNetSalary(updatedEmployee);\n          this.selectedPayslip = payslip;\n          const employeeHistory = this.allPayslipHistories[employee.id] || [];\n          const updatedHistory = employeeHistory.map(p => p.salaryMonth === payslip.salaryMonth && p.paydayType === payslip.paydayType ? payslip : p);\n          if (!employeeHistory.some(p => p.salaryMonth === payslip.salaryMonth && p.paydayType === payslip.paydayType)) {\n            updatedHistory.push(payslip);\n          }\n          this.allPayslipHistories[employee.id] = updatedHistory;\n          this.payslipHistory = updatedHistory;\n          this.showSuccessMessage(`Payslip generated for ${employee.name} - ${payslip.paydayType === 'mid-month' ? payslip.expectedPaydays.midMonthPayday : payslip.expectedPaydays.endMonthPayday}!`);\n        }\n      } catch (error) {\n        console.error('Error generating payslip:', error);\n        this.showErrorMessage(`Failed to generate payslip: ${error.message}`);\n        if (error.response) {\n          console.error('Backend response:', error.response.data);\n        }\n      } finally {\n        this.payslipGenerationStatus[key] = {\n          generating: false\n        };\n      }\n    },\n    async generateAllPayslips() {\n      this.isGeneratingAll = true;\n      this.statusMessage = '';\n      try {\n        for (const employee of this.employees) {\n          if (!this.allPayslipHistories[employee.id]) {\n            await this.showPayslipHistory(employee);\n            this.showHistoryModal = false;\n          }\n        }\n        const payslipsToGenerate = [];\n        for (const employee of this.employees) {\n          const history = this.allPayslipHistories[employee.id] || [];\n          const duePayslips = history.filter(payslip => this.canGeneratePayslip(payslip));\n          payslipsToGenerate.push(...duePayslips);\n        }\n        if (payslipsToGenerate.length === 0) {\n          this.showErrorMessage('No payslips are due for generation.');\n          return;\n        }\n        for (const payslip of payslipsToGenerate) {\n          await this.generatePayslip(payslip);\n        }\n        this.showSuccessMessage(`Generated ${payslipsToGenerate.length} payslips successfully!`);\n      } catch (error) {\n        console.error('Error generating all payslips:', error);\n        this.showErrorMessage(`Failed to generate all payslips: ${error.message}`);\n      } finally {\n        this.isGeneratingAll = false;\n      }\n    },\n    getLatestPosition(employee) {\n      if (!Array.isArray(employee.positionHistory) || employee.positionHistory.length === 0) {\n        return {\n          position: employee.position || 'N/A',\n          salary: employee.salary || 0,\n          startDate: employee.hireDate || this.currentDate.toISOString().split('T')[0]\n        };\n      }\n      const sortedHistory = [...employee.positionHistory].sort((a, b) => new Date(b.startDate) - new Date(a.startDate));\n      return sortedHistory.find(h => !h.endDate) || sortedHistory[0];\n    },\n    getActivePositionForDate(positionHistory, date) {\n      if (!Array.isArray(positionHistory) || positionHistory.length === 0) {\n        return {\n          position: 'N/A',\n          salary: 0,\n          startDate: this.selectedEmployee?.hireDate || this.currentDate.toISOString().split('T')[0]\n        };\n      }\n      const targetDate = moment(date);\n      const activePosition = positionHistory.find(history => {\n        const startDate = moment(history.startDate);\n        const endDate = history.endDate ? moment(history.endDate) : moment(this.currentDate);\n        return targetDate.isSameOrAfter(startDate, 'day') && targetDate.isSameOrBefore(endDate, 'day');\n      });\n      return activePosition || positionHistory[positionHistory.length - 1];\n    },\n    async generatePayslipNow(employee) {\n      this.payslipGenerationStatus.generating = true;\n      try {\n        const today = moment(this.currentDate);\n        const salaryMonth = today.format('YYYY-MM');\n        const lastDayOfMonth = today.clone().endOf('month').date();\n        const payDate = today.isBefore(moment(`${salaryMonth}-15`, 'YYYY-MM-DD').endOf('day')) ? moment(`${salaryMonth}-15`, 'YYYY-MM-DD') : moment(`${salaryMonth}-${lastDayOfMonth}`, 'YYYY-MM-DD');\n        const activePosition = this.getActivePositionForDate(employee.positionHistory, payDate);\n        if (!activePosition || !activePosition.position || activePosition.salary === undefined) {\n          this.showErrorMessage('No valid position for current date.');\n          console.error('Invalid activePosition:', activePosition);\n          return;\n        }\n        const updatedEmployee = {\n          ...employee,\n          position: activePosition.position,\n          salary: activePosition.salary\n        };\n        const expectedPaydays = this.getExpectedPayday(employee.hireDate, salaryMonth);\n        const paydayType = payDate.date() === 15 ? 'mid-month' : 'end-of-month';\n        const employeeSalaryMonth = `${salaryMonth}-${paydayType === 'mid-month' ? '15' : lastDayOfMonth}`;\n        let payslipData = {\n          salaryMonth,\n          paydayType,\n          position: activePosition.position,\n          salary: activePosition.salary,\n          employee: {\n            ...updatedEmployee,\n            salaryMonth: employeeSalaryMonth\n          },\n          expectedPaydays\n        };\n        const pdfPayslipData = this.createPayslipData(payslipData.employee);\n        const pdfBlob = await this.generatePdf(pdfPayslipData);\n        const url = URL.createObjectURL(pdfBlob);\n        const base64Data = await this.blobToBase64(pdfBlob);\n        const payload = {\n          employeeId: Number(employee.id),\n          empNo: String(employee.empNo),\n          payslipData: base64Data.split(',')[1],\n          // Remove prefix\n          salaryMonth: payslipData.salaryMonth,\n          paydayType: payslipData.paydayType,\n          position: activePosition.position,\n          salary: Number(activePosition.salary)\n        };\n        console.log('Sending payload to backend (generatePayslipNow):', payload);\n        if (!payload.employeeId || !payload.empNo || !payload.payslipData || !payload.salaryMonth || !payload.paydayType || !payload.position || payload.salary === undefined || isNaN(payload.salary)) {\n          throw new Error('Payload is missing required fields or contains invalid data');\n        }\n        const response = await axios.post('http://localhost:7777/api/payslips/generate', payload, {\n          headers: {\n            'user-role': 'admin'\n          }\n        });\n        console.log('Payslip generated successfully (generatePayslipNow):', response.data);\n        if (response.status === 201 || response.status === 200) {\n          payslipData.payslipDataUrl = url;\n          payslipData.totalSalary = this.calculateNetSalary(payslipData.employee);\n          let employeeHistory = this.allPayslipHistories[employee.id] || [];\n          const existingPayslipIndex = employeeHistory.findIndex(p => p.salaryMonth === payslipData.salaryMonth && p.paydayType === payslipData.paydayType);\n          if (existingPayslipIndex !== -1) {\n            employeeHistory[existingPayslipIndex] = payslipData;\n          } else {\n            employeeHistory.push(payslipData);\n          }\n          this.allPayslipHistories[employee.id] = employeeHistory;\n          this.payslipHistory = employeeHistory;\n          this.selectedPayslip = payslipData;\n          this.showSuccessMessage(`Payslip generated now for ${employee.name} - ${payslipData.paydayType === 'mid-month' ? expectedPaydays.midMonthPayday : expectedPaydays.endMonthPayday}!`);\n        }\n      } catch (error) {\n        console.error('Error generating payslip now:', error);\n        this.showErrorMessage(`Failed to generate payslip: ${error.message}`);\n        if (error.response) {\n          console.error('Backend response:', error.response.data);\n        }\n      } finally {\n        this.payslipGenerationStatus.generating = false;\n      }\n    },\n    showUpdatePositionModal() {\n      this.selectedEmployeeForUpdate = '';\n      this.newPosition = '';\n      this.showUpdateModal = true;\n    },\n    async updateEmployeePosition() {\n      if (!this.selectedEmployeeForUpdate || !this.newPosition) return;\n      this.isLoading = true;\n      try {\n        const employee = this.employees.find(emp => emp.id === this.selectedEmployeeForUpdate);\n        const newPositionData = this.positions.find(pos => pos.name === this.newPosition);\n        const today = moment(this.currentDate).format('YYYY-MM-DD');\n        const updatedPositionHistory = employee.positionHistory.map(history => {\n          if (!history.endDate) {\n            return {\n              ...history,\n              endDate: today\n            };\n          }\n          return history;\n        });\n        updatedPositionHistory.push({\n          position: newPositionData.name,\n          salary: newPositionData.salary,\n          startDate: today,\n          endDate: null\n        });\n        const response = await axios.put(`http://localhost:7777/api/employees/${employee.id}`, {\n          ...employee,\n          position: newPositionData.name,\n          salary: newPositionData.salary,\n          positionHistory: updatedPositionHistory\n        }, {\n          headers: {\n            'user-role': 'admin'\n          }\n        });\n        if (response.status === 200) {\n          employee.position = newPositionData.name;\n          employee.salary = newPositionData.salary;\n          employee.positionHistory = updatedPositionHistory;\n          this.showSuccessMessage(`Position updated for ${employee.name} to ${newPositionData.name}!`);\n          this.showUpdateModal = false;\n          await this.showPayslipHistory(employee);\n          await this.generatePayslipNow(employee);\n          this.showHistoryModal = true;\n        }\n      } catch (error) {\n        console.error('Error updating position:', error);\n        this.showErrorMessage(`Failed to update position: ${error.message}`);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    sortPreviousPayslips(field) {\n      if (this.sortPreviousField === field) {\n        this.sortPreviousAsc = !this.sortPreviousAsc;\n      } else {\n        this.sortPreviousField = field;\n        this.sortPreviousAsc = true;\n      }\n    },\n    sortNewPayslips(field) {\n      if (this.sortNewField === field) {\n        this.sortNewAsc = !this.sortNewAsc;\n      } else {\n        this.sortNewField = field;\n        this.sortNewAsc = true;\n      }\n    },\n    showPrintModal() {\n      this.employeesWithPayslips = [];\n      this.selectedEmployeesForPrint = [];\n      this.selectAll = false;\n      for (const employee of this.employees) {\n        const history = this.allPayslipHistories[employee.id] || [];\n        const generatedPayslips = history.filter(p => p.payslipDataUrl);\n        if (generatedPayslips.length > 0) {\n          const latestPayslip = generatedPayslips.reduce((latest, current) => {\n            const latestDate = moment(`${latest.salaryMonth}-${latest.paydayType === 'mid-month' ? '15' : moment(`${latest.salaryMonth}-01`).endOf('month').date()}`, 'YYYY-MM-DD');\n            const currentDate = moment(`${current.salaryMonth}-${current.paydayType === 'mid-month' ? '15' : moment(`${current.salaryMonth}-01`).endOf('month').date()}`, 'YYYY-MM-DD');\n            return currentDate.isAfter(latestDate) ? current : latest;\n          });\n          const latestDateStr = latestPayslip.paydayType === 'mid-month' ? latestPayslip.expectedPaydays.midMonthPayday : latestPayslip.expectedPaydays.endMonthPayday;\n          this.employeesWithPayslips.push({\n            id: employee.id,\n            name: employee.name,\n            latestPayslipDate: latestDateStr,\n            latestPayslip: latestPayslip\n          });\n        }\n      }\n      if (this.employeesWithPayslips.length === 0) {\n        this.showErrorMessage('No employees with generated payslips in history.');\n      } else {\n        this.showPrintAllModal = true;\n      }\n    },\n    toggleSelectAll() {\n      if (this.selectAll) {\n        this.selectedEmployeesForPrint = this.employeesWithPayslips.map(emp => emp.id);\n      } else {\n        this.selectedEmployeesForPrint = [];\n      }\n    },\n    async printSelectedPayslips() {\n      if (this.selectedEmployeesForPrint.length === 0) return;\n      this.isPrinting = true;\n      try {\n        const doc = new jsPDF({\n          orientation: 'portrait',\n          unit: 'mm',\n          format: [216, 279]\n        });\n        for (let i = 0; i < this.selectedEmployeesForPrint.length; i++) {\n          const empId = this.selectedEmployeesForPrint[i];\n          const empData = this.employeesWithPayslips.find(e => e.id === empId);\n          const employee = this.employees.find(e => e.id === empId);\n          const payslip = empData.latestPayslip;\n          const payDate = moment(`${payslip.salaryMonth}-${payslip.paydayType === 'mid-month' ? '15' : moment(payslip.salaryMonth).daysInMonth()}`, 'YYYY-MM-DD');\n          const activePosition = this.getActivePositionForDate(employee.positionHistory, payDate);\n          const updatedEmployee = {\n            ...employee,\n            position: activePosition.position,\n            salary: activePosition.salary\n          };\n          const payslipData = this.createPayslipData(updatedEmployee);\n          await this.generatePdf(payslipData, doc);\n          if (i < this.selectedEmployeesForPrint.length - 1) {\n            doc.addPage();\n          }\n        }\n        doc.autoPrint();\n        window.open(doc.output('bloburl'), '_blank');\n        this.showSuccessMessage('Payslips printed successfully!');\n        this.showPrintAllModal = false;\n      } catch (error) {\n        console.error('Error printing payslips:', error);\n        this.showErrorMessage(`Failed to print payslips: ${error.message}`);\n      } finally {\n        this.isPrinting = false;\n      }\n    },\n    selectPayslip(payslip) {\n      this.selectedPayslip = payslip.payslipDataUrl ? payslip : null;\n      this.iframeError = false;\n    },\n    async downloadPayslip() {\n      if (!this.selectedPayslip || !this.selectedPayslip.payslipDataUrl) return;\n      try {\n        const response = await fetch(this.selectedPayslip.payslipDataUrl);\n        if (!response.ok) throw new Error('Failed to fetch payslip PDF');\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `Payslip_${this.selectedEmployee.name}_${this.selectedPayslip.paydayType === 'mid-month' ? this.selectedPayslip.expectedPaydays.midMonthPayday : this.selectedPayslip.expectedPaydays.endMonthPayday}.pdf`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n      } catch (error) {\n        console.error('Error downloading payslip:', error);\n        this.showErrorMessage('Failed to download payslip.');\n      }\n    },\n    formatDate(date) {\n      return moment(date).isValid() ? moment(date).format('D MMMM YYYY') : 'Invalid Date';\n    },\n    calculateTotalEarnings(employee) {\n      const baseEarnings = (employee.earnings ? employee.earnings.travelExpenses : 0) + (employee.earnings ? employee.earnings.otherEarnings : 0);\n      const monthlySalary = employee.salary || 0;\n      const holidayPay = this.calculateHolidayPay(employee) || 0;\n      const overtimePay = this.calculateOvertimePay(employee) || 0;\n      const payheadEarnings = this.calculatePayheadEarnings(employee.payheads) || 0;\n      const taxableSupplementary = this.calculateSupplementaryIncome(employee) ? this.calculateSupplementaryIncome(employee).taxable : 0;\n      return monthlySalary + baseEarnings + holidayPay + overtimePay + payheadEarnings + taxableSupplementary || 0;\n    },\n    calculatePayheadEarnings(payheads) {\n      return payheads.filter(p => p.type === 'Earnings').reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\n    },\n    calculatePayheadDeductions(payheads) {\n      return payheads.filter(p => p.type === 'Deductions').reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\n    },\n    calculateSupplementaryIncome(employee) {\n      const commission = employee.commission || 0;\n      const profitSharing = employee.profitSharing || 0;\n      const fees = employee.fees || 0;\n      const thirteenthMonthPay = employee.thirteenthMonthPay || 0;\n      const hazardPay = employee.hazardPay || 0;\n      const overtimePay = this.calculateOvertimePay(employee) || 0;\n      const otherTaxable = employee.otherTaxable || 0;\n      const totalSupplementary = commission + profitSharing + fees + thirteenthMonthPay + hazardPay + overtimePay + otherTaxable;\n      const exemptThirteenthMonth = Math.min(thirteenthMonthPay, 90000) || 0;\n      const taxableThirteenthMonth = Math.max(0, thirteenthMonthPay - 90000) || 0;\n      const taxableSupplementaryIncome = commission + profitSharing + fees + taxableThirteenthMonth + hazardPay + overtimePay + otherTaxable;\n      return {\n        taxable: taxableSupplementaryIncome || 0,\n        nonTaxable: exemptThirteenthMonth || 0,\n        totalSupplementary: totalSupplementary || 0\n      };\n    },\n    calculateNonTaxableIncome(employee) {\n      const isMWE = employee.salary / 30 <= this.config.minimumWage;\n      const basicSalaryMWE = isMWE ? employee.salary : 0;\n      const holidayPayMWE = isMWE ? this.calculateHolidayPay(employee) : 0;\n      const overtimePayMWE = isMWE ? this.calculateOvertimePay(employee) : 0;\n      const nightShiftDiffMWE = isMWE ? employee.nightShiftDiff || 0 : 0;\n      const hazardPayMWE = isMWE ? employee.hazardPay || 0 : 0;\n      const thirteenthMonthExempt = Math.min(employee.thirteenthMonthPay || 0, 90000) || 0;\n      const deMinimis = Math.min(employee.deMinimis || 0, this.config.deMinimisLimit) || 0;\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0;\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0;\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0;\n      return {\n        totalNonTaxable: basicSalaryMWE + holidayPayMWE + overtimePayMWE + nightShiftDiffMWE + hazardPayMWE + thirteenthMonthExempt + deMinimis + sssContribution + philhealthContribution + pagibigContribution || 0\n      };\n    },\n    calculateTotalDeductions(employee) {\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0;\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0;\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0;\n      const withholdingTax = this.calculateWithholdingTax(employee) || 0;\n      const payheadDeductions = this.calculatePayheadDeductions(employee.payheads) || 0;\n      return sssContribution + philhealthContribution + pagibigContribution + withholdingTax + payheadDeductions || 0;\n    },\n    calculateNetSalary(employee) {\n      const totalEarnings = this.calculateTotalEarnings(employee) || 0;\n      const totalDeductions = this.calculateTotalDeductions(employee) || 0;\n      return totalEarnings - totalDeductions || 0;\n    },\n    calculateHolidayPay(employee) {\n      const dailyRate = employee.salary / 30 || 0;\n      const salaryMonth = employee.salaryMonth ? employee.salaryMonth.split('-')[0] + '-' + employee.salaryMonth.split('-')[1] : moment(this.currentDate).format('YYYY-MM');\n      const regularHolidays = this.config.regularHolidays || [];\n      const specialNonWorkingDays = this.config.specialNonWorkingDays || [];\n      const isRegularHoliday = regularHolidays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('YYYY-MM') === salaryMonth);\n      const isSpecialHoliday = specialNonWorkingDays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('YYYY-MM') === salaryMonth);\n      if (isRegularHoliday) return dailyRate * 2 || 0;\n      if (isSpecialHoliday) return dailyRate * 1.3 || 0;\n      return 0;\n    },\n    calculateOvertimePay(employee) {\n      const hourlyRate = employee.salary / (8 * 22) || 0;\n      const regularOTHours = employee.overtimeHours ? employee.overtimeHours.regular : 0;\n      const holidayOTHours = employee.overtimeHours ? employee.overtimeHours.holiday : 0;\n      const regularOTPay = regularOTHours * hourlyRate * 1.25 || 0;\n      const holidayOTPay = holidayOTHours * hourlyRate * 1.3 || 0;\n      return regularOTPay + holidayOTPay || 0;\n    },\n    calculateSSSContribution(salary) {\n      const monthlySalaryCredit = Math.min(Math.max(salary || 0, 5000), 35000) || 0;\n      const employeeShareRate = 0.045;\n      return Math.round(monthlySalaryCredit * employeeShareRate) || 0;\n    },\n    calculatePhilHealthContribution(salary) {\n      const rate = 0.05;\n      const monthlySalary = Math.min(salary || 0, 100000) || 0;\n      return Math.round(monthlySalary * rate / 2) || 0;\n    },\n    calculatePagIBIGContribution(salary) {\n      const rate = 0.02;\n      const cappedSalary = Math.min(salary || 0, 10000) || 0;\n      return Math.round(cappedSalary * rate) || 0;\n    },\n    calculateWithholdingTax(employee) {\n      const nonTaxable = this.calculateNonTaxableIncome(employee).totalNonTaxable || 0;\n      const taxableIncome = (this.calculateTotalEarnings(employee) || 0) - nonTaxable || 0;\n      if (taxableIncome <= 20833) return 0;\n      if (taxableIncome <= 33333) return Math.round((taxableIncome - 20833) * 0.15) || 0;\n      if (taxableIncome <= 66667) return Math.round(1875 + (taxableIncome - 33333) * 0.20) || 0;\n      if (taxableIncome <= 166667) return Math.round(13541.80 + (taxableIncome - 66667) * 0.25) || 0;\n      if (taxableIncome <= 666667) return Math.round(90841.80 + (taxableIncome - 166667) * 0.30) || 0;\n      return Math.round(408841.80 + (taxableIncome - 666667) * 0.35) || 0;\n    },\n    getExpectedPayday(hireDate, salaryMonth) {\n      const [year, month] = salaryMonth.split('-').map(part => parseInt(part, 10));\n      const lastDay = new Date(year, month, 0).getDate();\n      let payday1 = new Date(year, month - 1, 15);\n      let payday2 = new Date(year, month - 1, lastDay);\n      const hireMoment = moment(hireDate);\n      if (hireMoment.isAfter(moment(`${year}-${month}-15`, 'YYYY-MM-DD'))) {\n        payday1 = hireMoment.toDate();\n      }\n      if (hireMoment.isAfter(moment(`${year}-${month}-${lastDay}`, 'YYYY-MM-DD'))) {\n        payday2 = hireMoment.toDate();\n      }\n      const isWeekend = date => date.getDay() === 0 || date.getDay() === 6;\n      while (isWeekend(payday1)) {\n        const nextDay = new Date(payday1);\n        nextDay.setDate(payday1.getDate() + 1);\n        if (nextDay.getMonth() !== payday1.getMonth()) break;\n        payday1 = nextDay;\n      }\n      while (isWeekend(payday2)) {\n        const prevDay = new Date(payday2);\n        prevDay.setDate(payday2.getDate() - 1);\n        if (prevDay.getMonth() !== payday2.getMonth()) break;\n        payday2 = prevDay;\n      }\n      return {\n        midMonthPayday: payday1.toLocaleDateString('en-US', {\n          day: 'numeric',\n          month: 'long',\n          year: 'numeric'\n        }),\n        endMonthPayday: payday2.toLocaleDateString('en-US', {\n          day: 'numeric',\n          month: 'long',\n          year: 'numeric'\n        })\n      };\n    },\n    createPayslipData(employee) {\n      const salaryDate = moment(employee.salaryMonth, 'YYYY-MM-DD').format('MM/DD/YYYY');\n      const basicSalary = employee.salary || 0;\n      const sss = this.calculateSSSContribution(basicSalary) || 0;\n      const philhealth = this.calculatePhilHealthContribution(basicSalary) || 0;\n      const pagibig = this.calculatePagIBIGContribution(basicSalary) || 0;\n      const totalDeductions = sss + philhealth + pagibig + (this.calculateWithholdingTax(employee) || 0) || 0;\n      const netSalary = this.calculateNetSalary(employee) || 0;\n      const paidLeavesDays = employee.paidLeaves ? employee.paidLeaves.days : 0;\n      const absencesDays = employee.absences ? employee.absences.days : 0;\n      const paidLeavesAmount = employee.paidLeaves ? employee.paidLeaves.amount : 0;\n      const absencesAmount = employee.absences ? -employee.absences.amount : 0;\n      const paydays = this.getExpectedPayday(employee.hireDate, employee.salaryMonth.split('-')[0] + '-' + employee.salaryMonth.split('-')[1]);\n      return {\n        salaryDate: salaryDate,\n        empNo: employee.empNo || 'N/A',\n        lastName: employee.lastName || 'N/A',\n        middleName: employee.middleName || 'N/A',\n        firstName: employee.firstName || 'N/A',\n        birthDate: moment(employee.birthDate).isValid() ? moment(employee.birthDate).format('MM/DD/YYYY') : 'N/A',\n        hireDate: moment(employee.hireDate).isValid() ? moment(employee.hireDate).format('MM/DD/YYYY') : 'N/A',\n        civilStatus: employee.civilStatus || 'SINGLE',\n        dependents: employee.dependents || 0,\n        sss: employee.sss || 'N/A',\n        tin: employee.tin || 'N/A',\n        philhealth: employee.philhealth || 'N/A',\n        pagibig: employee.pagibig || 'N/A',\n        position: this.getPositionName(employee.position) || 'N/A',\n        basicSalary: this.formatNumber(basicSalary),\n        totalDeductions: this.formatNumber(totalDeductions),\n        netSalary: this.formatNumber(netSalary),\n        sssDeduction: this.formatNumber(sss),\n        philhealthDeduction: this.formatNumber(philhealth),\n        pagibigDeduction: this.formatNumber(pagibig),\n        paidLeavesDays: paidLeavesDays,\n        absencesDays: absencesDays,\n        paidLeavesAmount: this.formatNumber(paidLeavesAmount),\n        absencesAmount: this.formatNumber(absencesAmount),\n        withholdingTax: this.formatNumber(this.calculateWithholdingTax(employee) || 0),\n        payheads: employee.payheads || [],\n        expectedPaydays: paydays\n      };\n    },\n    formatNumber(value) {\n      const num = Number(value) || 0;\n      return num.toFixed(2);\n    },\n    async generatePdf(payslipData, doc) {\n      const pdfDoc = doc || new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: [216, 279]\n      });\n      pdfDoc.setFont('Helvetica');\n      const margin = 10;\n      const pageWidth = pdfDoc.internal.pageSize.getWidth();\n      const contentWidth = pageWidth - 2 * margin;\n      const columnWidth = (contentWidth - 20) / 2;\n      const lineHeight = 5;\n      const pageHeight = pdfDoc.internal.pageSize.getHeight();\n      function addText(doc, text, x, y, options) {\n        options = options || {};\n        text = text || 'N/A';\n        text = text.replace('₱', 'P');\n        doc.setFontSize(options.fontSize || 10);\n        doc.setFont(options.font || 'Helvetica', options.fontStyle || 'normal');\n        doc.setTextColor(options.textColor ? options.textColor[0] : 0, options.textColor ? options.textColor[1] : 0, options.textColor ? options.textColor[2] : 0);\n        doc.text(text, x, y, {\n          align: options.align || 'left',\n          maxWidth: options.maxWidth\n        });\n      }\n      function addLabelValue(doc, label, value, x, y) {\n        addText(doc, label, x, y, {\n          fontSize: 9,\n          fontStyle: 'bold'\n        });\n        addText(doc, value, x + 35, y, {\n          fontSize: 9,\n          maxWidth: columnWidth - 35\n        });\n      }\n      pdfDoc.setFillColor(0, 128, 0);\n      pdfDoc.rect(margin, margin, contentWidth, 10, 'F');\n      addText(pdfDoc, 'RIGHTJOB Solutions', margin + 5, margin + 7, {\n        fontSize: 12,\n        fontStyle: 'bold',\n        textColor: [255, 255, 255]\n      });\n      addText(pdfDoc, 'PAYSLIP', margin + contentWidth / 2, margin + 7, {\n        fontSize: 12,\n        fontStyle: 'bold',\n        textColor: [255, 255, 255],\n        align: 'center'\n      });\n      let y = margin + 15;\n      addText(pdfDoc, 'Salary Date:', margin + contentWidth - 40, y, {\n        fontSize: 9\n      });\n      addText(pdfDoc, payslipData.salaryDate, margin + contentWidth - 20, y, {\n        fontSize: 9\n      });\n      y += 10;\n      addText(pdfDoc, 'Personal Information', margin, y, {\n        fontSize: 11,\n        fontStyle: 'bold'\n      });\n      y += lineHeight;\n      const leftPersonalInfo = [['Emp No.', payslipData.empNo], ['Last Name', payslipData.lastName], ['Middle Name', payslipData.middleName], ['First Name', payslipData.firstName], ['Birth Date', payslipData.birthDate], ['Hire Date', payslipData.hireDate], ['Position', payslipData.position], ['Basic Salary', `P${payslipData.basicSalary}`]];\n      leftPersonalInfo.forEach(([label, value], index) => {\n        addLabelValue(pdfDoc, label, value, margin, y + index * lineHeight);\n      });\n      let yRight = y;\n      addText(pdfDoc, 'Additional Info', margin + columnWidth + 10, yRight, {\n        fontSize: 11,\n        fontStyle: 'bold'\n      });\n      yRight += lineHeight;\n      const rightPersonalInfo = [['Civil Status', payslipData.civilStatus], ['Dependents', payslipData.dependents.toString()], ['SSS', payslipData.sss], ['TIN', payslipData.tin], ['Philhealth', payslipData.philhealth], ['PAG-IBIG', payslipData.pagibig]];\n      rightPersonalInfo.forEach(([label, value], index) => {\n        addLabelValue(pdfDoc, label, value, margin + columnWidth + 10, yRight + index * lineHeight);\n      });\n      y = Math.max(y + leftPersonalInfo.length * lineHeight, yRight + rightPersonalInfo.length * lineHeight) + 10;\n      addText(pdfDoc, 'Expected Paydays', margin, y, {\n        fontSize: 11,\n        fontStyle: 'bold'\n      });\n      addText(pdfDoc, 'Mid-Month:', margin, y + lineHeight);\n      addText(pdfDoc, payslipData.expectedPaydays.midMonthPayday, margin + 35, y + lineHeight, {\n        maxWidth: columnWidth - 35\n      });\n      addText(pdfDoc, 'End-of-Month:', margin + columnWidth + 10, y + lineHeight);\n      addText(pdfDoc, payslipData.expectedPaydays.endMonthPayday, margin + columnWidth + 45, y + lineHeight, {\n        maxWidth: columnWidth - 35\n      });\n      y += 2 * lineHeight + 10;\n      addText(pdfDoc, 'Deductions', margin, y, {\n        fontSize: 11,\n        fontStyle: 'bold'\n      });\n      y += lineHeight;\n      const leftDeductions = [['SSS', `P${payslipData.sssDeduction}`], ['Philhealth', `P${payslipData.philhealthDeduction}`], ['PAG-IBIG', `P${payslipData.pagibigDeduction}`]];\n      leftDeductions.forEach(([label, value], index) => {\n        addLabelValue(pdfDoc, label, value, margin, y + index * lineHeight);\n      });\n      const rightDeductions = [['Withholding Tax', `P${payslipData.withholdingTax}`]];\n      rightDeductions.forEach(([label, value], index) => {\n        addLabelValue(pdfDoc, label, value, margin + columnWidth + 10, y + index * lineHeight);\n      });\n      y += Math.max(leftDeductions.length, rightDeductions.length) * lineHeight + 10;\n      addText(pdfDoc, 'Summary', margin, y, {\n        fontSize: 11,\n        fontStyle: 'bold'\n      });\n      y += lineHeight;\n      addText(pdfDoc, 'Total Deductions:', margin, y, {\n        fontSize: 9,\n        fontStyle: 'bold'\n      });\n      addText(pdfDoc, `(P${payslipData.totalDeductions})`, margin + 35, y, {\n        fontSize: 9\n      });\n      addText(pdfDoc, 'Net Salary:', margin + columnWidth + 10, y, {\n        fontSize: 9,\n        fontStyle: 'bold'\n      });\n      addText(pdfDoc, `P${payslipData.netSalary}`, margin + columnWidth + 45, y, {\n        fontSize: 9\n      });\n      const footerY = pageHeight - margin - 5;\n      addText(pdfDoc, 'This is a computer-generated payslip; no signature required.', margin + contentWidth / 2, footerY, {\n        fontSize: 8,\n        align: 'center'\n      });\n      if (!doc) {\n        return pdfDoc.output('blob');\n      }\n    },\n    blobToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    },\n    prevPage() {\n      if (this.currentPage > 1) this.currentPage--;\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) this.currentPage++;\n    },\n    onIframeLoad() {\n      this.iframeError = false;\n    },\n    onIframeError() {\n      this.iframeError = true;\n      this.showErrorMessage('Error loading payslip preview.');\n    },\n    showSuccessMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => {\n        this.statusMessage = '';\n      }, 3000);\n    },\n    showErrorMessage(message) {\n      this.statusMessage = message;\n      setTimeout(() => {\n        this.statusMessage = '';\n      }, 5000);\n    }\n  }\n};","map":{"version":3,"names":["axios","jsPDF","autoTable","moment","prototype","default","name","data","employees","positions","searchQuery","currentPage","itemsPerPage","payslipGenerationStatus","isLoading","isGeneratingAll","statusMessage","showHistoryModal","selectedEmployee","selectedPayslip","payslipHistory","allPayslipHistories","iframeError","config","minimumWage","deMinimisLimit","regularHolidays","specialNonWorkingDays","showPrintAllModal","employeesWithPayslips","selectedEmployeesForPrint","isPrinting","selectAll","showUpdateModal","selectedEmployeeForUpdate","newPosition","sortPreviousField","sortPreviousAsc","sortNewField","sortNewAsc","currentDate","Date","computed","filteredEmployees","filter","employee","toLowerCase","includes","totalPages","Math","ceil","length","paginatedEmployees","start","end","slice","sort","a","b","position","localeCompare","sortedPositionHistory","positionHistory","salary","startDate","hireDate","toISOString","split","endDate","initialPosition","latestPosition","hasUpdatedPosition","sortedPreviousPayslips","previousPayslips","payslip","dateA","paydayType","expectedPaydays","midMonthPayday","endMonthPayday","dateB","posA","getPositionName","posB","sortedNewPayslips","newPayslips","salaryMonth","isSameOrAfter","created","fetchConfig","fetchPositionsWithRetry","fetchEmployees","methods","response","get","headers","error","console","showErrorMessage","retries","delay","i","map","Promise","resolve","setTimeout","positionName","find","p","trim","getPositionSalary","getHourlyRate","getLatestPosition","firstName","lastName","Array","isArray","createdAt","updatedAt","showSuccessMessage","message","refreshData","showPayslipHistory","id","empNo","today","backendPayslips","log","currentPayDate","clone","isSameOrBefore","format","getExpectedPayday","toDate","payDate","positionAtPayDate","getActivePositionForDate","date","existingPayslip","isSame","totalSalary","calculateNetSalary","payslipDataUrl","payslipData","push","generatePayslip","add","canGeneratePayslip","daysInMonth","isValid","activePosition","undefined","updatedEmployee","key","generating","createPayslipData","pdfBlob","generatePdf","base64Data","blobToBase64","url","URL","createObjectURL","payload","employeeId","Number","String","isNaN","Error","post","status","employeeHistory","updatedHistory","some","generateAllPayslips","payslipsToGenerate","history","duePayslips","sortedHistory","h","targetDate","generatePayslipNow","lastDayOfMonth","endOf","isBefore","employeeSalaryMonth","pdfPayslipData","existingPayslipIndex","findIndex","showUpdatePositionModal","updateEmployeePosition","emp","newPositionData","pos","updatedPositionHistory","put","sortPreviousPayslips","field","sortNewPayslips","showPrintModal","generatedPayslips","latestPayslip","reduce","latest","current","latestDate","isAfter","latestDateStr","latestPayslipDate","toggleSelectAll","printSelectedPayslips","doc","orientation","unit","empId","empData","e","addPage","autoPrint","window","open","output","selectPayslip","downloadPayslip","fetch","ok","blob","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","formatDate","calculateTotalEarnings","baseEarnings","earnings","travelExpenses","otherEarnings","monthlySalary","holidayPay","calculateHolidayPay","overtimePay","calculateOvertimePay","payheadEarnings","calculatePayheadEarnings","payheads","taxableSupplementary","calculateSupplementaryIncome","taxable","type","sum","amount","calculatePayheadDeductions","commission","profitSharing","fees","thirteenthMonthPay","hazardPay","otherTaxable","totalSupplementary","exemptThirteenthMonth","min","taxableThirteenthMonth","max","taxableSupplementaryIncome","nonTaxable","calculateNonTaxableIncome","isMWE","basicSalaryMWE","holidayPayMWE","overtimePayMWE","nightShiftDiffMWE","nightShiftDiff","hazardPayMWE","thirteenthMonthExempt","deMinimis","sssContribution","calculateSSSContribution","philhealthContribution","calculatePhilHealthContribution","pagibigContribution","calculatePagIBIGContribution","totalNonTaxable","calculateTotalDeductions","withholdingTax","calculateWithholdingTax","payheadDeductions","totalEarnings","totalDeductions","dailyRate","isRegularHoliday","holiday","isSpecialHoliday","hourlyRate","regularOTHours","overtimeHours","regular","holidayOTHours","regularOTPay","holidayOTPay","monthlySalaryCredit","employeeShareRate","round","rate","cappedSalary","taxableIncome","year","month","part","parseInt","lastDay","getDate","payday1","payday2","hireMoment","isWeekend","getDay","nextDay","setDate","getMonth","prevDay","toLocaleDateString","day","salaryDate","basicSalary","sss","philhealth","pagibig","netSalary","paidLeavesDays","paidLeaves","days","absencesDays","absences","paidLeavesAmount","absencesAmount","paydays","middleName","birthDate","civilStatus","dependents","tin","formatNumber","sssDeduction","philhealthDeduction","pagibigDeduction","value","num","toFixed","pdfDoc","setFont","margin","pageWidth","internal","pageSize","getWidth","contentWidth","columnWidth","lineHeight","pageHeight","getHeight","addText","text","x","y","options","replace","setFontSize","fontSize","font","fontStyle","setTextColor","textColor","align","maxWidth","addLabelValue","label","setFillColor","rect","leftPersonalInfo","forEach","index","yRight","rightPersonalInfo","toString","leftDeductions","rightDeductions","footerY","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","prevPage","nextPage","onIframeLoad","onIframeError"],"sources":["C:\\Users\\ASUS\\Desktop\\OJT-PayrollSystem\\OJT-Payroll-System\\frontend\\src\\views\\admind\\SalarySlips.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen p-1\">\r\n    <div class=\"max-w-8xl mx-auto\">\r\n      <!-- Header Section -->\r\n      <div class=\"bg-white rounded-lg shadow-sm p-4 mb-4\">\r\n        <div class=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\r\n          <div class=\"relative\">\r\n            <span class=\"material-icons absolute left-2 top-2 text-gray-400 text-sm\">search</span>\r\n            <input\r\n              v-model=\"searchQuery\"\r\n              type=\"text\"\r\n              placeholder=\"Search employee by name...\"\r\n              class=\"w-full pl-8 pr-3 py-2 text-sm rounded-md border border-gray-200 focus:ring-2 focus:ring-blue-400 focus:border-transparent\"\r\n            />\r\n          </div>\r\n          <button\r\n            @click=\"refreshData\"\r\n            class=\"flex items-center justify-center gap-1 bg-blue-500 hover:bg-blue-600 text-white text-sm py-2 px-4 rounded-md\"\r\n            :disabled=\"isLoading\"\r\n          >\r\n            <span class=\"material-icons text-sm\">{{ isLoading ? 'sync' : 'refresh' }}</span>\r\n            {{ isLoading ? 'Refreshing...' : 'Refresh Data' }}\r\n          </button>\r\n          <button\r\n            @click=\"generateAllPayslips\"\r\n            class=\"flex items-center justify-center gap-1 bg-green-500 hover:bg-green-600 text-white text-sm py-2 px-4 rounded-md\"\r\n            :disabled=\"isLoading || isGeneratingAll\"\r\n          >\r\n            <span class=\"material-icons text-sm\">{{ isGeneratingAll ? 'sync' : 'description' }}</span>\r\n            {{ isGeneratingAll ? 'Generating...' : 'Generate All' }}\r\n          </button>\r\n          <button\r\n            @click=\"showPrintModal\"\r\n            class=\"flex items-center justify-center gap-1 bg-purple-500 hover:bg-purple-600 text-white text-sm py-2 px-4 rounded-md\"\r\n            :disabled=\"isLoading\"\r\n          >\r\n            <span class=\"material-icons text-sm\">print</span>\r\n            Print All\r\n          </button>\r\n          <button\r\n            @click=\"showUpdatePositionModal\"\r\n            class=\"flex items-center justify-center gap-1 bg-orange-500 hover:bg-orange-600 text-white text-sm py-2 px-4 rounded-md\"\r\n            :disabled=\"isLoading\"\r\n          >\r\n            <span class=\"material-icons text-sm\">edit</span>\r\n            Update Position\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Employee List -->\r\n      <div class=\"bg-white rounded-lg shadow-sm overflow-hidden\">\r\n        <div class=\"overflow-x-auto\">\r\n          <table class=\"min-w-full divide-y divide-gray-200 mb-4\">\r\n            <thead class=\"bg-gray-50\">\r\n              <tr>\r\n                <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 tracking-wider\">\r\n                  <div class=\"flex items-center gap-1\">\r\n                    <span class=\"material-icons text-gray-400 text-sm\">person</span>\r\n                    Name\r\n                  </div>\r\n                </th>\r\n                <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 tracking-wider\">\r\n                  <div class=\"flex items-center gap-1\">\r\n                    <span class=\"material-icons text-gray-400 text-sm\">badge</span>\r\n                    Employee ID\r\n                  </div>\r\n                </th>\r\n                <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 tracking-wider\">\r\n                  <div class=\"flex items-center gap-1\">\r\n                    <span class=\"material-icons text-gray-400 text-sm\">work</span>\r\n                    Position\r\n                  </div>\r\n                </th>\r\n                <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 tracking-wider\">\r\n                  <div class=\"flex items-center gap-1\">\r\n                    <span class=\"material-icons text-gray-400 text-sm\">payments</span>\r\n                    Hourly Rate\r\n                  </div>\r\n                </th>\r\n                <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 tracking-wider\">\r\n                  <div class=\"flex items-center gap-1\">\r\n                    <span class=\"material-icons text-gray-400 text-sm\">account_balance_wallet</span>\r\n                    Basic Salary\r\n                  </div>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody class=\"bg-white divide-y divide-gray-200\">\r\n              <tr\r\n                v-for=\"employee in paginatedEmployees\"\r\n                :key=\"employee.id\"\r\n                class=\"hover:bg-blue-50 transition-colors cursor-pointer\"\r\n                @click=\"showPayslipHistory(employee)\"\r\n              >\r\n                <td class=\"px-4 py-3 text-sm text-gray-900\">{{ employee.name }}</td>\r\n                <td class=\"px-4 py-3 text-sm text-gray-500\">{{ employee.empNo }}</td>\r\n                <td class=\"px-4 py-3 text-sm text-gray-500\">\r\n                  {{ getPositionName(employee.position) }}\r\n                </td>\r\n                <td class=\"px-4 py-3 text-sm text-gray-900\">\r\n                  ₱{{ getHourlyRate(employee.position).toLocaleString() }}\r\n                </td>\r\n                <td class=\"px-4 py-3 text-sm text-blue-600\">\r\n                  ₱{{ getPositionSalary(employee.position).toLocaleString() }}\r\n                </td>\r\n              </tr>\r\n              <tr v-if=\"paginatedEmployees.length === 0 && !isLoading\">\r\n                <td colspan=\"5\" class=\"px-4 py-8 text-center\">\r\n                  <div class=\"flex flex-col items-center gap-2\">\r\n                    <span class=\"material-icons text-gray-400 text-3xl\">search_off</span>\r\n                    <p class=\"text-sm text-gray-500\">No employees found.</p>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr v-if=\"isLoading\">\r\n                <td colspan=\"5\" class=\"px-4 py-8 text-center\">\r\n                  <div class=\"flex flex-col items-center gap-2\">\r\n                    <span class=\"material-icons text-blue-500 animate-spin text-3xl\">sync</span>\r\n                    <p class=\"text-sm text-gray-500\">Loading employees...</p>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div class=\"flex items-center justify-between px-4 py-3 bg-gray-50\">\r\n          <div class=\"text-xs text-gray-700\">\r\n            Showing page {{ currentPage }} of {{ totalPages }}\r\n          </div>\r\n          <div class=\"flex gap-2\">\r\n            <button\r\n              @click=\"prevPage\"\r\n              :disabled=\"currentPage === 1 || isLoading\"\r\n              class=\"inline-flex items-center px-3 py-1 text-xs bg-white border border-gray-300 rounded text-gray-700 hover:bg-gray-50\"\r\n            >\r\n              <span class=\"material-icons text-sm mr-1\">chevron_left</span>\r\n              Previous\r\n            </button>\r\n            <button\r\n              @click=\"nextPage\"\r\n              :disabled=\"currentPage === totalPages || isLoading\"\r\n              class=\"inline-flex items-center px-3 py-1 text-xs bg-white border border-gray-300 rounded text-gray-700 hover:bg-gray-50\"\r\n            >\r\n              Next\r\n              <span class=\"material-icons text-sm ml-1\">chevron_right</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Payslip History Modal -->\r\n      <div\r\n        v-if=\"showHistoryModal\"\r\n        class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\"\r\n      >\r\n        <div class=\"bg-white rounded-lg shadow-xl w-full max-w-5xl h-[80vh] flex flex-col\">\r\n          <div class=\"flex items-center justify-between p-4 border-b\">\r\n            <h2 class=\"text-base font-medium text-gray-800 flex items-center gap-1\">\r\n              <span class=\"material-icons text-sm\">history</span>\r\n              Payslip History - {{ selectedEmployee?.name }}\r\n            </h2>\r\n            <div class=\"flex items-center gap-2\">\r\n              <button\r\n                @click.stop=\"generatePayslipNow(selectedEmployee)\"\r\n                class=\"flex items-center justify-center gap-1 bg-yellow-500 hover:bg-yellow-600 text-white text-sm py-2 px-4 rounded-md\"\r\n                :disabled=\"isLoading || payslipGenerationStatus.generating\"\r\n              >\r\n                <span class=\"material-icons text-sm\">play_arrow</span>\r\n                {{ payslipGenerationStatus.generating ? 'Generating...' : 'Generate Now' }}\r\n              </button>\r\n              <button\r\n                @click=\"showHistoryModal = false\"\r\n                class=\"p-1 hover:bg-gray-100 rounded-full\"\r\n              >\r\n                <span class=\"material-icons text-sm\">close</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"flex flex-1 overflow-hidden\">\r\n            <div class=\"w-1/2 p-4 overflow-y-auto border-r\">\r\n              <!-- Previous Position Payslips (Initial Position) -->\r\n              <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Previous Position Payslips</h3>\r\n              <table class=\"min-w-full divide-y divide-gray-200\">\r\n                <thead class=\"bg-gray-50 sticky top-0\">\r\n                  <tr>\r\n                    <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500 cursor-pointer\" @click=\"sortPreviousPayslips('payDate')\">\r\n                      Pay Date <span class=\"material-icons text-xs\">{{ sortPreviousField === 'payDate' ? (sortPreviousAsc ? 'arrow_upward' : 'arrow_downward') : '' }}</span>\r\n                    </th>\r\n                    <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500 cursor-pointer\" @click=\"sortPreviousPayslips('position')\">\r\n                      Position <span class=\"material-icons text-xs\">{{ sortPreviousField === 'position' ? (sortPreviousAsc ? 'arrow_upward' : 'arrow_downward') : '' }}</span>\r\n                    </th>\r\n                    <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Salary</th>\r\n                    <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n                    <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody class=\"divide-y divide-gray-200\">\r\n                  <tr\r\n                    v-for=\"payslip in sortedPreviousPayslips\"\r\n                    :key=\"`${payslip.salaryMonth}-${payslip.paydayType}`\"\r\n                    class=\"hover:bg-blue-50 cursor-pointer\"\r\n                    :class=\"{ 'bg-blue-100': selectedPayslip?.salaryMonth === payslip.salaryMonth && selectedPayslip?.paydayType === payslip.paydayType }\"\r\n                    @click=\"selectPayslip(payslip)\"\r\n                  >\r\n                    <td class=\"px-4 py-2 text-sm text-gray-900\">\r\n                      {{ payslip.paydayType === 'mid-month' ? payslip.expectedPaydays.midMonthPayday : payslip.expectedPaydays.endMonthPayday }}\r\n                    </td>\r\n                    <td class=\"px-4 py-2 text-sm text-gray-500\">\r\n                      {{ getPositionName(payslip.position) }}\r\n                    </td>\r\n                    <td class=\"px-4 py-2 text-sm text-gray-500\">\r\n                      ₱{{ payslip.salary.toLocaleString() }}\r\n                    </td>\r\n                    <td class=\"px-4 py-2 text-sm text-gray-500\">\r\n                      {{ payslip.payslipDataUrl ? 'Generated' : 'Pending' }}\r\n                    </td>\r\n                    <td class=\"px-4 py-2\">\r\n                      <button\r\n                        v-if=\"!payslip.payslipDataUrl\"\r\n                        @click.stop=\"generatePayslip(payslip)\"\r\n                        class=\"inline-flex items-center gap-1 px-3 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600\"\r\n                        :disabled=\"!canGeneratePayslip(payslip) || payslipGenerationStatus[`${payslip.salaryMonth}-${payslip.paydayType}`]?.generating\"\r\n                      >\r\n                        <span class=\"material-icons text-sm\">description</span>\r\n                        {{ payslipGenerationStatus[`${payslip.salaryMonth}-${payslip.paydayType}`]?.generating ? 'Generating...' : 'Generate' }}\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                  <tr v-if=\"sortedPreviousPayslips.length === 0\">\r\n                    <td colspan=\"5\" class=\"px-4 py-4 text-center text-sm text-gray-500\">No previous payslips available.</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n\r\n              <!-- New Position Payslips (Only After Update) -->\r\n              <div v-if=\"hasUpdatedPosition\">\r\n                <h3 class=\"text-sm font-medium text-gray-700 mt-6 mb-2\">New Position Payslips</h3>\r\n                <table class=\"min-w-full divide-y divide-gray-200\">\r\n                  <thead class=\"bg-gray-50 sticky top-0\">\r\n                    <tr>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500 cursor-pointer\" @click=\"sortNewPayslips('payDate')\">\r\n                        Pay Date <span class=\"material-icons text-xs\">{{ sortNewField === 'payDate' ? (sortNewAsc ? 'arrow_upward' : 'arrow_downward') : '' }}</span>\r\n                      </th>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500 cursor-pointer\" @click=\"sortNewPayslips('position')\">\r\n                        Position <span class=\"material-icons text-xs\">{{ sortNewField === 'position' ? (sortNewAsc ? 'arrow_upward' : 'arrow_downward') : '' }}</span>\r\n                      </th>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Salary</th>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Status</th>\r\n                      <th class=\"px-4 py-2 text-left text-xs font-medium text-gray-500\">Action</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody class=\"divide-y divide-gray-200\">\r\n                    <tr\r\n                      v-for=\"payslip in sortedNewPayslips\"\r\n                      :key=\"`${payslip.salaryMonth}-${payslip.paydayType}`\"\r\n                      class=\"hover:bg-blue-50 cursor-pointer\"\r\n                      :class=\"{ 'bg-blue-100': selectedPayslip?.salaryMonth === payslip.salaryMonth && selectedPayslip?.paydayType === payslip.paydayType }\"\r\n                      @click=\"selectPayslip(payslip)\"\r\n                    >\r\n                      <td class=\"px-4 py-2 text-sm text-gray-900\">\r\n                        {{ payslip.paydayType === 'mid-month' ? payslip.expectedPaydays.midMonthPayday : payslip.expectedPaydays.endMonthPayday }}\r\n                      </td>\r\n                      <td class=\"px-4 py-2 text-sm text-gray-500\">\r\n                        {{ getPositionName(payslip.position) }}\r\n                      </td>\r\n                      <td class=\"px-4 py-2 text-sm text-gray-500\">\r\n                        ₱{{ payslip.salary.toLocaleString() }}\r\n                      </td>\r\n                      <td class=\"px-4 py-2 text-sm text-gray-500\">\r\n                        {{ payslip.payslipDataUrl ? 'Generated' : 'Pending' }}\r\n                      </td>\r\n                      <td class=\"px-4 py-2\">\r\n                        <button\r\n                          v-if=\"!payslip.payslipDataUrl\"\r\n                          @click.stop=\"generatePayslip(payslip)\"\r\n                          class=\"inline-flex items-center gap-1 px-3 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600\"\r\n                          :disabled=\"!canGeneratePayslip(payslip) || payslipGenerationStatus[`${payslip.salaryMonth}-${payslip.paydayType}`]?.generating\"\r\n                        >\r\n                          <span class=\"material-icons text-sm\">description</span>\r\n                          {{ payslipGenerationStatus[`${payslip.salaryMonth}-${payslip.paydayType}`]?.generating ? 'Generating...' : 'Generate' }}\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                    <tr v-if=\"sortedNewPayslips.length === 0\">\r\n                      <td colspan=\"5\" class=\"px-4 py-4 text-center text-sm text-gray-500\">No new payslips available.</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            <div class=\"w-1/2 p-4 overflow-y-auto\">\r\n              <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Payslip Preview</h3>\r\n              <div v-if=\"selectedPayslip && selectedPayslip.payslipDataUrl\" class=\"flex flex-col h-full\">\r\n                <div class=\"mb-4\">\r\n                  <p class=\"text-sm text-gray-600\">\r\n                    Position: {{ getPositionName(selectedPayslip.position) }} | \r\n                    Salary: ₱{{ selectedPayslip.salary.toLocaleString() }}\r\n                  </p>\r\n                </div>\r\n                <iframe\r\n                  :src=\"selectedPayslip.payslipDataUrl\"\r\n                  class=\"w-full h-[50vh] rounded border mb-4\"\r\n                  @load=\"onIframeLoad\"\r\n                  @error=\"onIframeError\"\r\n                ></iframe>\r\n                <button\r\n                  @click=\"downloadPayslip\"\r\n                  class=\"flex items-center justify-center gap-1 bg-blue-500 hover:bg-blue-600 text-white text-sm py-2 px-4 rounded-md\"\r\n                >\r\n                  <span class=\"material-icons text-sm\">download</span>\r\n                  Download PDF\r\n                </button>\r\n                <div\r\n                  v-if=\"iframeError\"\r\n                  class=\"mt-3 p-3 bg-red-50 text-red-700 rounded text-sm flex items-center gap-1\"\r\n                >\r\n                  <span class=\"material-icons text-sm\">error</span>\r\n                  Error loading payslip. Please try again.\r\n                </div>\r\n              </div>\r\n              <div v-else class=\"text-sm text-gray-500 text-center mt-4\">\r\n                Select a payslip from the list to preview.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Update Position Modal -->\r\n      <div\r\n        v-if=\"showUpdateModal\"\r\n        class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\"\r\n      >\r\n        <div class=\"bg-white rounded-lg shadow-xl w-full max-w-md p-6\">\r\n          <h2 class=\"text-base font-medium text-gray-800 mb-4 flex items-center gap-1\">\r\n            <span class=\"material-icons text-sm\">edit</span>\r\n            Update Employee Position\r\n          </h2>\r\n          <div class=\"mb-4\">\r\n            <label class=\"block text-sm text-gray-700 mb-1\">Select Employee</label>\r\n            <select\r\n              v-model=\"selectedEmployeeForUpdate\"\r\n              class=\"w-full p-2 border rounded text-sm\"\r\n            >\r\n              <option value=\"\" disabled>Select an employee</option>\r\n              <option v-for=\"emp in employees\" :key=\"emp.id\" :value=\"emp.id\">\r\n                {{ emp.name }} ({{ getPositionName(emp.position) }})\r\n              </option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-4\">\r\n            <label class=\"block text-sm text-gray-700 mb-1\">New Position</label>\r\n            <select\r\n              v-model=\"newPosition\"\r\n              class=\"w-full p-2 border rounded text-sm\"\r\n            >\r\n              <option value=\"\" disabled>Select a position</option>\r\n              <option v-for=\"pos in positions\" :key=\"pos.name\" :value=\"pos.name\">\r\n                {{ pos.name }} (₱{{ pos.salary.toLocaleString() }})\r\n              </option>\r\n            </select>\r\n          </div>\r\n          <div class=\"flex justify-end gap-2\">\r\n            <button\r\n              @click=\"showUpdateModal = false\"\r\n              class=\"px-4 py-2 text-sm text-gray-700 bg-gray-200 rounded hover:bg-gray-300\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              @click=\"updateEmployeePosition\"\r\n              class=\"flex items-center gap-1 px-4 py-2 text-sm text-white bg-orange-500 rounded hover:bg-orange-600\"\r\n              :disabled=\"!selectedEmployeeForUpdate || !newPosition || isLoading\"\r\n            >\r\n              <span class=\"material-icons text-sm\">save</span>\r\n              Update\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Print All Modal -->\r\n      <div\r\n        v-if=\"showPrintAllModal\"\r\n        class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\"\r\n      >\r\n        <div class=\"bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[80vh] flex flex-col\">\r\n          <div class=\"flex items-center justify-between p-4 border-b\">\r\n            <h2 class=\"text-base font-medium text-gray-800 flex items-center gap-1\">\r\n              <span class=\"material-icons text-sm\">print</span>\r\n              Print Payslips\r\n            </h2>\r\n            <button\r\n              @click=\"showPrintAllModal = false\"\r\n              class=\"p-1 hover:bg-gray-100 rounded-full\"\r\n            >\r\n              <span class=\"material-icons text-sm\">close</span>\r\n            </button>\r\n          </div>\r\n          <div class=\"p-4 overflow-y-auto\">\r\n            <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Select Employees to Print</h3>\r\n            <div v-if=\"employeesWithPayslips.length > 0\" class=\"mb-4\">\r\n              <label class=\"flex items-center\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  v-model=\"selectAll\"\r\n                  @change=\"toggleSelectAll\"\r\n                  class=\"large-checkbox mr-2\"\r\n                />\r\n                <span class=\"text-sm text-gray-900 font-medium\">Select All</span>\r\n              </label>\r\n            </div>\r\n            <div v-if=\"employeesWithPayslips.length > 0\">\r\n              <div v-for=\"emp in employeesWithPayslips\" :key=\"emp.id\" class=\"flex items-center py-2 border-b\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  v-model=\"selectedEmployeesForPrint\"\r\n                  :value=\"emp.id\"\r\n                  class=\"large-checkbox mr-2\"\r\n                />\r\n                <span class=\"text-sm text-gray-900\">{{ emp.name }} - Most Recent: {{ emp.latestPayslipDate }}</span>\r\n              </div>\r\n            </div>\r\n            <div v-else class=\"text-sm text-gray-500 text-center py-4\">\r\n              No employees with generated payslips found in history.\r\n            </div>\r\n          </div>\r\n          <div class=\"p-4 border-t flex justify-end gap-2\">\r\n            <button\r\n              @click=\"showPrintAllModal = false\"\r\n              class=\"px-4 py-2 text-sm text-gray-700 bg-gray-200 rounded hover:bg-gray-300\"\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              @click=\"printSelectedPayslips\"\r\n              class=\"flex items-center gap-1 px-4 py-2 text-sm text-white bg-purple-500 rounded hover:bg-purple-600\"\r\n              :disabled=\"selectedEmployeesForPrint.length === 0 || isPrinting\"\r\n            >\r\n              <span class=\"material-icons text-sm\">print</span>\r\n              {{ isPrinting ? 'Printing...' : 'Print Selected' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Toast Messages -->\r\n      <div\r\n        v-if=\"statusMessage\"\r\n        :class=\"[\r\n          statusMessage.includes('successfully') ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700',\r\n          'fixed bottom-4 right-4 p-3 rounded shadow-lg z-50 flex items-center gap-1 animate-fade-in text-sm'\r\n        ]\"\r\n      >\r\n        <span class=\"material-icons text-sm\">\r\n          {{ statusMessage.includes('successfully') ? 'check_circle' : 'error' }}\r\n        </span>\r\n        {{ statusMessage }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport moment from 'moment';\r\n\r\njsPDF.prototype.autoTable = autoTable.default;\r\n\r\nexport default {\r\n  name: 'SalarySlips',\r\n  data() {\r\n    return {\r\n      employees: [],\r\n      positions: [],\r\n      searchQuery: '',\r\n      currentPage: 1,\r\n      itemsPerPage: 10,\r\n      payslipGenerationStatus: {},\r\n      isLoading: false,\r\n      isGeneratingAll: false,\r\n      statusMessage: '',\r\n      showHistoryModal: false,\r\n      selectedEmployee: null,\r\n      selectedPayslip: null,\r\n      payslipHistory: [],\r\n      allPayslipHistories: {},\r\n      iframeError: false,\r\n      config: {\r\n        minimumWage: 0,\r\n        deMinimisLimit: 0,\r\n        regularHolidays: [],\r\n        specialNonWorkingDays: [],\r\n      },\r\n      showPrintAllModal: false,\r\n      employeesWithPayslips: [],\r\n      selectedEmployeesForPrint: [],\r\n      isPrinting: false,\r\n      selectAll: false,\r\n      showUpdateModal: false,\r\n      selectedEmployeeForUpdate: '',\r\n      newPosition: '',\r\n      sortPreviousField: 'payDate',\r\n      sortPreviousAsc: true,\r\n      sortNewField: 'payDate',\r\n      sortNewAsc: true,\r\n      currentDate: new Date('2025-03-17'), // Matches your initial context; adjust as needed\r\n    };\r\n  },\r\n  computed: {\r\n    filteredEmployees() {\r\n      return this.employees.filter((employee) => {\r\n        const name = employee && employee.name ? employee.name : '';\r\n        return name.toLowerCase().includes(this.searchQuery.toLowerCase());\r\n      });\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.filteredEmployees.length / this.itemsPerPage) || 1;\r\n    },\r\n    paginatedEmployees() {\r\n      const start = (this.currentPage - 1) * this.itemsPerPage;\r\n      const end = start + this.itemsPerPage;\r\n      return this.filteredEmployees.slice(start, end).sort((a, b) => {\r\n        return a.position.localeCompare(b.position);\r\n      });\r\n    },\r\n    sortedPositionHistory() {\r\n      if (!this.selectedEmployee || !this.selectedEmployee.positionHistory) {\r\n        return [{\r\n          position: this.selectedEmployee?.position || 'N/A',\r\n          salary: this.selectedEmployee?.salary || 0,\r\n          startDate: this.selectedEmployee?.hireDate || this.currentDate.toISOString().split('T')[0],\r\n          endDate: null\r\n        }];\r\n      }\r\n      return [...this.selectedEmployee.positionHistory].sort((a, b) => \r\n        new Date(a.startDate) - new Date(b.startDate)\r\n      );\r\n    },\r\n    initialPosition() {\r\n      return this.sortedPositionHistory[0];\r\n    },\r\n    latestPosition() {\r\n      return this.sortedPositionHistory[this.sortedPositionHistory.length - 1];\r\n    },\r\n    hasUpdatedPosition() {\r\n      return this.sortedPositionHistory.length > 1;\r\n    },\r\n    sortedPreviousPayslips() {\r\n      const previousPayslips = this.payslipHistory.filter(payslip => \r\n        payslip.position === this.initialPosition.position\r\n      );\r\n      return previousPayslips.sort((a, b) => {\r\n        if (this.sortPreviousField === 'payDate') {\r\n          const dateA = moment(a.paydayType === 'mid-month' ? a.expectedPaydays.midMonthPayday : a.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\r\n          const dateB = moment(b.paydayType === 'mid-month' ? b.expectedPaydays.midMonthPayday : b.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\r\n          return this.sortPreviousAsc ? dateA - dateB : dateB - dateA;\r\n        } else if (this.sortPreviousField === 'position') {\r\n          const posA = this.getPositionName(a.position);\r\n          const posB = this.getPositionName(b.position);\r\n          return this.sortPreviousAsc ? posA.localeCompare(posB) : posB.localeCompare(posA);\r\n        }\r\n        return 0;\r\n      });\r\n    },\r\n    sortedNewPayslips() {\r\n      const newPayslips = this.payslipHistory.filter(payslip => \r\n        payslip.position === this.latestPosition.position && \r\n        this.hasUpdatedPosition && \r\n        moment(payslip.salaryMonth, 'YYYY-MM').isSameOrAfter(moment(this.latestPosition.startDate, 'YYYY-MM-DD'), 'month')\r\n      );\r\n      return newPayslips.sort((a, b) => {\r\n        if (this.sortNewField === 'payDate') {\r\n          const dateA = moment(a.paydayType === 'mid-month' ? a.expectedPaydays.midMonthPayday : a.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\r\n          const dateB = moment(b.paydayType === 'mid-month' ? b.expectedPaydays.midMonthPayday : b.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\r\n          return this.sortNewAsc ? dateA - dateB : dateB - dateA;\r\n        } else if (this.sortNewField === 'position') {\r\n          const posA = this.getPositionName(a.position);\r\n          const posB = this.getPositionName(b.position);\r\n          return this.sortNewAsc ? posA.localeCompare(posB) : posB.localeCompare(posA);\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n  },\r\n  async created() {\r\n    await this.fetchConfig();\r\n    await this.fetchPositionsWithRetry();\r\n    await this.fetchEmployees();\r\n  },\r\n  methods: {\r\n    async fetchConfig() {\r\n      try {\r\n        const response = await axios.get('http://localhost:7777/api/config', {\r\n          headers: { 'user-role': 'admin' },\r\n        });\r\n        this.config = {\r\n          minimumWage: response.data.minimumWage || 610,\r\n          deMinimisLimit: response.data.deMinimisLimit || 10000,\r\n          regularHolidays: response.data.regularHolidays || [],\r\n          specialNonWorkingDays: response.data.specialNonWorkingDays || [],\r\n        };\r\n      } catch (error) {\r\n        console.error('Error fetching config:', error);\r\n        this.showErrorMessage('Failed to load configuration. Using defaults.');\r\n        this.config = {\r\n          minimumWage: 610,\r\n          deMinimisLimit: 10000,\r\n          regularHolidays: [],\r\n          specialNonWorkingDays: [],\r\n        };\r\n      }\r\n    },\r\n    async fetchPositionsWithRetry(retries = 3, delay = 1000) {\r\n      for (let i = 0; i < retries; i++) {\r\n        try {\r\n          const response = await axios.get('http://localhost:7777/api/positions', {\r\n            headers: { 'user-role': 'admin' },\r\n          });\r\n          this.positions = response.data.map(position => ({\r\n            name: position.name,\r\n            salary: position.salary\r\n          }));\r\n          return;\r\n        } catch (error) {\r\n          console.error(`Attempt ${i + 1} to fetch positions failed:`, error);\r\n          if (i === retries - 1) {\r\n            this.showErrorMessage('Failed to load positions after multiple attempts.');\r\n          } else {\r\n            await new Promise(resolve => setTimeout(resolve, delay));\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getPositionName(positionName) {\r\n      const position = this.positions.find(p => p.name.trim().toLowerCase() === positionName?.trim().toLowerCase());\r\n      return position ? position.name : positionName || 'Unknown Position';\r\n    },\r\n    getPositionSalary(positionName) {\r\n      const position = this.positions.find(p => p.name.trim().toLowerCase() === positionName?.trim().toLowerCase());\r\n      return position ? position.salary : 0;\r\n    },\r\n    getHourlyRate(positionName) {\r\n      const salary = this.getPositionSalary(positionName);\r\n      return salary / (8 * 22);\r\n    },\r\n    async fetchEmployees() {\r\n      this.isLoading = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        const response = await axios.get('http://localhost:7777/api/employees', {\r\n          headers: { 'user-role': 'admin' },\r\n        });\r\n        this.employees = response.data.map((employee) => {\r\n          const latestPosition = this.getLatestPosition(employee);\r\n          const name = `${employee.firstName || ''} ${employee.lastName || ''}`.trim() || 'Unnamed Employee';\r\n          return {\r\n            ...employee,\r\n            name,\r\n            position: latestPosition.position,\r\n            salary: latestPosition.salary,\r\n            positionHistory: Array.isArray(employee.positionHistory) && employee.positionHistory.length > 0 ? employee.positionHistory : [{\r\n              position: employee.position || 'N/A',\r\n              salary: employee.salary || 0,\r\n              startDate: employee.hireDate || this.currentDate.toISOString().split('T')[0],\r\n              endDate: null\r\n            }],\r\n            createdAt: employee.createdAt || employee.hireDate,\r\n            updatedAt: employee.updatedAt\r\n          };\r\n        });\r\n        this.showSuccessMessage('Employees loaded successfully!');\r\n      } catch (error) {\r\n        console.error('Error fetching employees:', error);\r\n        this.showErrorMessage(`Failed to load employees: ${error.message}`);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async refreshData() {\r\n      this.isLoading = true;\r\n      try {\r\n        await this.fetchConfig();\r\n        await this.fetchPositionsWithRetry();\r\n        await this.fetchEmployees();\r\n        if (this.showHistoryModal && this.selectedEmployee) {\r\n          await this.showPayslipHistory(this.selectedEmployee);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error refreshing data:', error);\r\n        this.showErrorMessage(`Failed to refresh data: ${error.message}`);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async showPayslipHistory(employee) {\r\n      this.isLoading = true;\r\n      if (!employee || !employee.id || !employee.empNo) {\r\n        this.showErrorMessage('Invalid employee data');\r\n        console.error('Invalid employee:', employee);\r\n        this.isLoading = false;\r\n        return;\r\n      }\r\n\r\n      this.selectedEmployee = { \r\n        ...employee, \r\n        positionHistory: Array.isArray(employee.positionHistory) && employee.positionHistory.length > 0 ? employee.positionHistory : [{\r\n          position: employee.position || 'N/A',\r\n          salary: employee.salary || 0,\r\n          startDate: employee.hireDate || this.currentDate.toISOString().split('T')[0],\r\n          endDate: null\r\n        }]\r\n      };\r\n\r\n      const today = moment(this.currentDate);\r\n      const hireDate = moment(this.selectedEmployee.hireDate || this.currentDate);\r\n      let backendPayslips = [];\r\n      try {\r\n        const response = await axios.get(`http://localhost:7777/api/payslips/${this.selectedEmployee.id}`, {\r\n          headers: { 'user-role': 'admin' },\r\n        });\r\n        backendPayslips = response.data || [];\r\n        console.log('Fetched backend payslips:', backendPayslips);\r\n      } catch (error) {\r\n        console.error('Error fetching payslips:', error);\r\n      }\r\n\r\n      const payslipHistory = [];\r\n      let currentPayDate = hireDate.clone();\r\n\r\n      while (currentPayDate.isSameOrBefore(today, 'day')) {\r\n        const salaryMonth = currentPayDate.format('YYYY-MM');\r\n        const expectedPaydays = this.getExpectedPayday(hireDate.toDate(), salaryMonth);\r\n        const payDate = currentPayDate.clone();\r\n        const positionAtPayDate = this.getActivePositionForDate(this.selectedEmployee.positionHistory, payDate);\r\n        const paydayType = payDate.date() === 15 ? 'mid-month' : 'end-of-month'; // Adjusted to match backend expectation\r\n        const existingPayslip = backendPayslips.find(p => \r\n          p.salaryMonth === salaryMonth && p.paydayType === paydayType && moment(p.payDate).isSame(payDate, 'day')\r\n        ) || {};\r\n\r\n        const payslip = {\r\n          salaryMonth,\r\n          paydayType,\r\n          payDate: payDate.format('YYYY-MM-DD'),\r\n          position: positionAtPayDate.position,\r\n          salary: positionAtPayDate.salary,\r\n          totalSalary: existingPayslip.salary ? this.calculateNetSalary({ ...this.selectedEmployee, position: positionAtPayDate.position, salary: positionAtPayDate.salary }) : null,\r\n          payslipDataUrl: existingPayslip.payslipData ? `data:application/pdf;base64,${existingPayslip.payslipData}` : null,\r\n          employee: { \r\n            ...this.selectedEmployee, \r\n            position: positionAtPayDate.position, \r\n            salary: positionAtPayDate.salary, \r\n            salaryMonth: payDate.format('YYYY-MM-DD')\r\n          },\r\n          expectedPaydays,\r\n        };\r\n        payslipHistory.push(payslip);\r\n\r\n        if (!payslip.payslipDataUrl && today.isSameOrAfter(payDate, 'day')) {\r\n          await this.generatePayslip(payslip);\r\n        }\r\n\r\n        currentPayDate.add(15, 'days'); // Increment by 15 days\r\n      }\r\n\r\n      this.allPayslipHistories[this.selectedEmployee.id] = payslipHistory;\r\n      this.payslipHistory = payslipHistory;\r\n      this.selectedPayslip = payslipHistory.find(p => p.payslipDataUrl) || payslipHistory[0] || null;\r\n      this.showHistoryModal = true;\r\n      this.isLoading = false;\r\n    },\r\n    canGeneratePayslip(payslip) {\r\n      const today = moment(this.currentDate);\r\n      const payDate = moment(payslip.paydayType === 'mid-month' ? payslip.expectedPaydays.midMonthPayday : payslip.expectedPaydays.endMonthPayday, 'D MMMM YYYY');\r\n      return today.isSameOrAfter(payDate, 'day') && !payslip.payslipDataUrl;\r\n    },\r\n    async generatePayslip(payslip) {\r\n      const employee = payslip.employee;\r\n      if (!employee || !employee.id || !employee.empNo) {\r\n        this.showErrorMessage('Employee data is incomplete.');\r\n        console.error('Invalid employee data:', employee);\r\n        return;\r\n      }\r\n\r\n      const payDate = moment(\r\n        payslip.paydayType === 'mid-month' \r\n          ? `${payslip.salaryMonth}-15` \r\n          : `${payslip.salaryMonth}-${moment(payslip.salaryMonth).daysInMonth()}`, \r\n        'YYYY-MM-DD'\r\n      );\r\n      if (!payDate.isValid()) {\r\n        this.showErrorMessage('Invalid pay date calculated.');\r\n        console.error('Invalid payDate:', payslip.salaryMonth, payslip.paydayType);\r\n        return;\r\n      }\r\n\r\n      const positionHistory = Array.isArray(employee.positionHistory) ? employee.positionHistory : [];\r\n      const activePosition = this.getActivePositionForDate(positionHistory, payDate);\r\n      if (!activePosition || !activePosition.position || activePosition.salary === undefined) {\r\n        this.showErrorMessage('Invalid position or salary for this date.');\r\n        console.error('Invalid activePosition:', activePosition, 'Position History:', positionHistory);\r\n        return;\r\n      }\r\n\r\n      const updatedEmployee = { ...employee, position: activePosition.position, salary: activePosition.salary };\r\n      const key = `${payslip.salaryMonth}-${payslip.paydayType}`;\r\n      this.payslipGenerationStatus[key] = { generating: true };\r\n\r\n      try {\r\n        const payslipData = this.createPayslipData(updatedEmployee);\r\n        const pdfBlob = await this.generatePdf(payslipData);\r\n        const base64Data = await this.blobToBase64(pdfBlob);\r\n        const url = URL.createObjectURL(pdfBlob);\r\n\r\n        const payload = {\r\n          employeeId: Number(employee.id), // Ensure number\r\n          empNo: String(employee.empNo),\r\n          payslipData: base64Data.split(',')[1], // Remove \"data:application/pdf;base64,\" prefix\r\n          salaryMonth: payslip.salaryMonth,\r\n          paydayType: payslip.paydayType,\r\n          position: activePosition.position,\r\n          salary: Number(activePosition.salary) // Ensure number\r\n        };\r\n\r\n        console.log('Sending payload to backend:', payload);\r\n\r\n        if (!payload.employeeId || !payload.empNo || !payload.payslipData || \r\n            !payload.salaryMonth || !payload.paydayType || !payload.position || \r\n            payload.salary === undefined || isNaN(payload.salary)) {\r\n          throw new Error('Payload is missing required fields or contains invalid data');\r\n        }\r\n\r\n        const response = await axios.post('http://localhost:7777/api/payslips/generate', payload, {\r\n          headers: { 'user-role': 'admin' },\r\n        });\r\n\r\n        console.log('Payslip generated successfully:', response.data);\r\n        if (response.status === 201 || response.status === 200) {\r\n          payslip.payslipDataUrl = url;\r\n          payslip.position = activePosition.position;\r\n          payslip.salary = activePosition.salary;\r\n          payslip.totalSalary = this.calculateNetSalary(updatedEmployee);\r\n          this.selectedPayslip = payslip;\r\n\r\n          const employeeHistory = this.allPayslipHistories[employee.id] || [];\r\n          const updatedHistory = employeeHistory.map(p =>\r\n            p.salaryMonth === payslip.salaryMonth && p.paydayType === payslip.paydayType ? payslip : p\r\n          );\r\n          if (!employeeHistory.some(p => p.salaryMonth === payslip.salaryMonth && p.paydayType === payslip.paydayType)) {\r\n            updatedHistory.push(payslip);\r\n          }\r\n          this.allPayslipHistories[employee.id] = updatedHistory;\r\n          this.payslipHistory = updatedHistory;\r\n\r\n          this.showSuccessMessage(`Payslip generated for ${employee.name} - ${payslip.paydayType === 'mid-month' ? payslip.expectedPaydays.midMonthPayday : payslip.expectedPaydays.endMonthPayday}!`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error generating payslip:', error);\r\n        this.showErrorMessage(`Failed to generate payslip: ${error.message}`);\r\n        if (error.response) {\r\n          console.error('Backend response:', error.response.data);\r\n        }\r\n      } finally {\r\n        this.payslipGenerationStatus[key] = { generating: false };\r\n      }\r\n    },\r\n    async generateAllPayslips() {\r\n      this.isGeneratingAll = true;\r\n      this.statusMessage = '';\r\n      try {\r\n        for (const employee of this.employees) {\r\n          if (!this.allPayslipHistories[employee.id]) {\r\n            await this.showPayslipHistory(employee);\r\n            this.showHistoryModal = false;\r\n          }\r\n        }\r\n\r\n        const payslipsToGenerate = [];\r\n        for (const employee of this.employees) {\r\n          const history = this.allPayslipHistories[employee.id] || [];\r\n          const duePayslips = history.filter(payslip => this.canGeneratePayslip(payslip));\r\n          payslipsToGenerate.push(...duePayslips);\r\n        }\r\n\r\n        if (payslipsToGenerate.length === 0) {\r\n          this.showErrorMessage('No payslips are due for generation.');\r\n          return;\r\n        }\r\n\r\n        for (const payslip of payslipsToGenerate) {\r\n          await this.generatePayslip(payslip);\r\n        }\r\n\r\n        this.showSuccessMessage(`Generated ${payslipsToGenerate.length} payslips successfully!`);\r\n      } catch (error) {\r\n        console.error('Error generating all payslips:', error);\r\n        this.showErrorMessage(`Failed to generate all payslips: ${error.message}`);\r\n      } finally {\r\n        this.isGeneratingAll = false;\r\n      }\r\n    },\r\n    getLatestPosition(employee) {\r\n      if (!Array.isArray(employee.positionHistory) || employee.positionHistory.length === 0) {\r\n        return {\r\n          position: employee.position || 'N/A',\r\n          salary: employee.salary || 0,\r\n          startDate: employee.hireDate || this.currentDate.toISOString().split('T')[0]\r\n        };\r\n      }\r\n      const sortedHistory = [...employee.positionHistory].sort((a, b) => new Date(b.startDate) - new Date(a.startDate));\r\n      return sortedHistory.find(h => !h.endDate) || sortedHistory[0];\r\n    },\r\n    getActivePositionForDate(positionHistory, date) {\r\n      if (!Array.isArray(positionHistory) || positionHistory.length === 0) {\r\n        return { \r\n          position: 'N/A', \r\n          salary: 0, \r\n          startDate: this.selectedEmployee?.hireDate || this.currentDate.toISOString().split('T')[0] \r\n        };\r\n      }\r\n      const targetDate = moment(date);\r\n      const activePosition = positionHistory.find(history => {\r\n        const startDate = moment(history.startDate);\r\n        const endDate = history.endDate ? moment(history.endDate) : moment(this.currentDate);\r\n        return targetDate.isSameOrAfter(startDate, 'day') && targetDate.isSameOrBefore(endDate, 'day');\r\n      });\r\n      return activePosition || positionHistory[positionHistory.length - 1];\r\n    },\r\n    async generatePayslipNow(employee) {\r\n      this.payslipGenerationStatus.generating = true;\r\n      try {\r\n        const today = moment(this.currentDate);\r\n        const salaryMonth = today.format('YYYY-MM');\r\n        const lastDayOfMonth = today.clone().endOf('month').date();\r\n        const payDate = today.isBefore(moment(`${salaryMonth}-15`, 'YYYY-MM-DD').endOf('day')) \r\n          ? moment(`${salaryMonth}-15`, 'YYYY-MM-DD') \r\n          : moment(`${salaryMonth}-${lastDayOfMonth}`, 'YYYY-MM-DD');\r\n        const activePosition = this.getActivePositionForDate(employee.positionHistory, payDate);\r\n        if (!activePosition || !activePosition.position || activePosition.salary === undefined) {\r\n          this.showErrorMessage('No valid position for current date.');\r\n          console.error('Invalid activePosition:', activePosition);\r\n          return;\r\n        }\r\n        const updatedEmployee = { ...employee, position: activePosition.position, salary: activePosition.salary };\r\n        const expectedPaydays = this.getExpectedPayday(employee.hireDate, salaryMonth);\r\n\r\n        const paydayType = payDate.date() === 15 ? 'mid-month' : 'end-of-month';\r\n        const employeeSalaryMonth = `${salaryMonth}-${paydayType === 'mid-month' ? '15' : lastDayOfMonth}`;\r\n\r\n        let payslipData = {\r\n          salaryMonth,\r\n          paydayType,\r\n          position: activePosition.position,\r\n          salary: activePosition.salary,\r\n          employee: { ...updatedEmployee, salaryMonth: employeeSalaryMonth },\r\n          expectedPaydays,\r\n        };\r\n\r\n        const pdfPayslipData = this.createPayslipData(payslipData.employee);\r\n        const pdfBlob = await this.generatePdf(pdfPayslipData);\r\n        const url = URL.createObjectURL(pdfBlob);\r\n        const base64Data = await this.blobToBase64(pdfBlob);\r\n\r\n        const payload = {\r\n          employeeId: Number(employee.id),\r\n          empNo: String(employee.empNo),\r\n          payslipData: base64Data.split(',')[1], // Remove prefix\r\n          salaryMonth: payslipData.salaryMonth,\r\n          paydayType: payslipData.paydayType,\r\n          position: activePosition.position,\r\n          salary: Number(activePosition.salary)\r\n        };\r\n\r\n        console.log('Sending payload to backend (generatePayslipNow):', payload);\r\n\r\n        if (!payload.employeeId || !payload.empNo || !payload.payslipData || \r\n            !payload.salaryMonth || !payload.paydayType || !payload.position || \r\n            payload.salary === undefined || isNaN(payload.salary)) {\r\n          throw new Error('Payload is missing required fields or contains invalid data');\r\n        }\r\n\r\n        const response = await axios.post('http://localhost:7777/api/payslips/generate', payload, {\r\n          headers: { 'user-role': 'admin' },\r\n        });\r\n\r\n        console.log('Payslip generated successfully (generatePayslipNow):', response.data);\r\n        if (response.status === 201 || response.status === 200) {\r\n          payslipData.payslipDataUrl = url;\r\n          payslipData.totalSalary = this.calculateNetSalary(payslipData.employee);\r\n          let employeeHistory = this.allPayslipHistories[employee.id] || [];\r\n          const existingPayslipIndex = employeeHistory.findIndex(p => \r\n            p.salaryMonth === payslipData.salaryMonth && p.paydayType === payslipData.paydayType\r\n          );\r\n          \r\n          if (existingPayslipIndex !== -1) {\r\n            employeeHistory[existingPayslipIndex] = payslipData;\r\n          } else {\r\n            employeeHistory.push(payslipData);\r\n          }\r\n          \r\n          this.allPayslipHistories[employee.id] = employeeHistory;\r\n          this.payslipHistory = employeeHistory;\r\n          this.selectedPayslip = payslipData;\r\n\r\n          this.showSuccessMessage(`Payslip generated now for ${employee.name} - ${payslipData.paydayType === 'mid-month' ? expectedPaydays.midMonthPayday : expectedPaydays.endMonthPayday}!`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error generating payslip now:', error);\r\n        this.showErrorMessage(`Failed to generate payslip: ${error.message}`);\r\n        if (error.response) {\r\n          console.error('Backend response:', error.response.data);\r\n        }\r\n      } finally {\r\n        this.payslipGenerationStatus.generating = false;\r\n      }\r\n    },\r\n    showUpdatePositionModal() {\r\n      this.selectedEmployeeForUpdate = '';\r\n      this.newPosition = '';\r\n      this.showUpdateModal = true;\r\n    },\r\n    async updateEmployeePosition() {\r\n      if (!this.selectedEmployeeForUpdate || !this.newPosition) return;\r\n      this.isLoading = true;\r\n      try {\r\n        const employee = this.employees.find(emp => emp.id === this.selectedEmployeeForUpdate);\r\n        const newPositionData = this.positions.find(pos => pos.name === this.newPosition);\r\n        const today = moment(this.currentDate).format('YYYY-MM-DD');\r\n\r\n        const updatedPositionHistory = employee.positionHistory.map(history => {\r\n          if (!history.endDate) {\r\n            return { ...history, endDate: today };\r\n          }\r\n          return history;\r\n        });\r\n        updatedPositionHistory.push({\r\n          position: newPositionData.name,\r\n          salary: newPositionData.salary,\r\n          startDate: today,\r\n          endDate: null\r\n        });\r\n\r\n        const response = await axios.put(`http://localhost:7777/api/employees/${employee.id}`, {\r\n          ...employee,\r\n          position: newPositionData.name,\r\n          salary: newPositionData.salary,\r\n          positionHistory: updatedPositionHistory\r\n        }, {\r\n          headers: { 'user-role': 'admin' }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          employee.position = newPositionData.name;\r\n          employee.salary = newPositionData.salary;\r\n          employee.positionHistory = updatedPositionHistory;\r\n          this.showSuccessMessage(`Position updated for ${employee.name} to ${newPositionData.name}!`);\r\n          this.showUpdateModal = false;\r\n\r\n          await this.showPayslipHistory(employee);\r\n          await this.generatePayslipNow(employee);\r\n          this.showHistoryModal = true;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating position:', error);\r\n        this.showErrorMessage(`Failed to update position: ${error.message}`);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    sortPreviousPayslips(field) {\r\n      if (this.sortPreviousField === field) {\r\n        this.sortPreviousAsc = !this.sortPreviousAsc;\r\n      } else {\r\n        this.sortPreviousField = field;\r\n        this.sortPreviousAsc = true;\r\n      }\r\n    },\r\n    sortNewPayslips(field) {\r\n      if (this.sortNewField === field) {\r\n        this.sortNewAsc = !this.sortNewAsc;\r\n      } else {\r\n        this.sortNewField = field;\r\n        this.sortNewAsc = true;\r\n      }\r\n    },\r\n    showPrintModal() {\r\n      this.employeesWithPayslips = [];\r\n      this.selectedEmployeesForPrint = [];\r\n      this.selectAll = false;\r\n\r\n      for (const employee of this.employees) {\r\n        const history = this.allPayslipHistories[employee.id] || [];\r\n        const generatedPayslips = history.filter(p => p.payslipDataUrl);\r\n\r\n        if (generatedPayslips.length > 0) {\r\n          const latestPayslip = generatedPayslips.reduce((latest, current) => {\r\n            const latestDate = moment(`${latest.salaryMonth}-${latest.paydayType === 'mid-month' ? '15' : moment(`${latest.salaryMonth}-01`).endOf('month').date()}`, 'YYYY-MM-DD');\r\n            const currentDate = moment(`${current.salaryMonth}-${current.paydayType === 'mid-month' ? '15' : moment(`${current.salaryMonth}-01`).endOf('month').date()}`, 'YYYY-MM-DD');\r\n            return currentDate.isAfter(latestDate) ? current : latest;\r\n          });\r\n          const latestDateStr = latestPayslip.paydayType === 'mid-month'\r\n            ? latestPayslip.expectedPaydays.midMonthPayday\r\n            : latestPayslip.expectedPaydays.endMonthPayday;\r\n\r\n          this.employeesWithPayslips.push({\r\n            id: employee.id,\r\n            name: employee.name,\r\n            latestPayslipDate: latestDateStr,\r\n            latestPayslip: latestPayslip,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (this.employeesWithPayslips.length === 0) {\r\n        this.showErrorMessage('No employees with generated payslips in history.');\r\n      } else {\r\n        this.showPrintAllModal = true;\r\n      }\r\n    },\r\n    toggleSelectAll() {\r\n      if (this.selectAll) {\r\n        this.selectedEmployeesForPrint = this.employeesWithPayslips.map(emp => emp.id);\r\n      } else {\r\n        this.selectedEmployeesForPrint = [];\r\n      }\r\n    },\r\n    async printSelectedPayslips() {\r\n      if (this.selectedEmployeesForPrint.length === 0) return;\r\n\r\n      this.isPrinting = true;\r\n      try {\r\n        const doc = new jsPDF({\r\n          orientation: 'portrait',\r\n          unit: 'mm',\r\n          format: [216, 279]\r\n        });\r\n\r\n        for (let i = 0; i < this.selectedEmployeesForPrint.length; i++) {\r\n          const empId = this.selectedEmployeesForPrint[i];\r\n          const empData = this.employeesWithPayslips.find(e => e.id === empId);\r\n          const employee = this.employees.find(e => e.id === empId);\r\n          const payslip = empData.latestPayslip;\r\n          const payDate = moment(`${payslip.salaryMonth}-${payslip.paydayType === 'mid-month' ? '15' : moment(payslip.salaryMonth).daysInMonth()}`, 'YYYY-MM-DD');\r\n          const activePosition = this.getActivePositionForDate(employee.positionHistory, payDate);\r\n          const updatedEmployee = { ...employee, position: activePosition.position, salary: activePosition.salary };\r\n\r\n          const payslipData = this.createPayslipData(updatedEmployee);\r\n          await this.generatePdf(payslipData, doc);\r\n\r\n          if (i < this.selectedEmployeesForPrint.length - 1) {\r\n            doc.addPage();\r\n          }\r\n        }\r\n\r\n        doc.autoPrint();\r\n        window.open(doc.output('bloburl'), '_blank');\r\n        this.showSuccessMessage('Payslips printed successfully!');\r\n        this.showPrintAllModal = false;\r\n      } catch (error) {\r\n        console.error('Error printing payslips:', error);\r\n        this.showErrorMessage(`Failed to print payslips: ${error.message}`);\r\n      } finally {\r\n        this.isPrinting = false;\r\n      }\r\n    },\r\n    selectPayslip(payslip) {\r\n      this.selectedPayslip = payslip.payslipDataUrl ? payslip : null;\r\n      this.iframeError = false;\r\n    },\r\n    async downloadPayslip() {\r\n      if (!this.selectedPayslip || !this.selectedPayslip.payslipDataUrl) return;\r\n      try {\r\n        const response = await fetch(this.selectedPayslip.payslipDataUrl);\r\n        if (!response.ok) throw new Error('Failed to fetch payslip PDF');\r\n        const blob = await response.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = `Payslip_${this.selectedEmployee.name}_${this.selectedPayslip.paydayType === 'mid-month' ? this.selectedPayslip.expectedPaydays.midMonthPayday : this.selectedPayslip.expectedPaydays.endMonthPayday}.pdf`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        window.URL.revokeObjectURL(url);\r\n      } catch (error) {\r\n        console.error('Error downloading payslip:', error);\r\n        this.showErrorMessage('Failed to download payslip.');\r\n      }\r\n    },\r\n    formatDate(date) {\r\n      return moment(date).isValid() ? moment(date).format('D MMMM YYYY') : 'Invalid Date';\r\n    },\r\n    calculateTotalEarnings(employee) {\r\n      const baseEarnings = (employee.earnings ? employee.earnings.travelExpenses : 0) + (employee.earnings ? employee.earnings.otherEarnings : 0);\r\n      const monthlySalary = employee.salary || 0;\r\n      const holidayPay = this.calculateHolidayPay(employee) || 0;\r\n      const overtimePay = this.calculateOvertimePay(employee) || 0;\r\n      const payheadEarnings = this.calculatePayheadEarnings(employee.payheads) || 0;\r\n      const taxableSupplementary = this.calculateSupplementaryIncome(employee) ? this.calculateSupplementaryIncome(employee).taxable : 0;\r\n      return monthlySalary + baseEarnings + holidayPay + overtimePay + payheadEarnings + taxableSupplementary || 0;\r\n    },\r\n    calculatePayheadEarnings(payheads) {\r\n      return payheads\r\n        .filter(p => p.type === 'Earnings')\r\n        .reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\r\n    },\r\n    calculatePayheadDeductions(payheads) {\r\n      return payheads\r\n        .filter(p => p.type === 'Deductions')\r\n        .reduce((sum, p) => sum + Number(p.amount || 0), 0) || 0;\r\n    },\r\n    calculateSupplementaryIncome(employee) {\r\n      const commission = employee.commission || 0;\r\n      const profitSharing = employee.profitSharing || 0;\r\n      const fees = employee.fees || 0;\r\n      const thirteenthMonthPay = employee.thirteenthMonthPay || 0;\r\n      const hazardPay = employee.hazardPay || 0;\r\n      const overtimePay = this.calculateOvertimePay(employee) || 0;\r\n      const otherTaxable = employee.otherTaxable || 0;\r\n\r\n      const totalSupplementary = commission + profitSharing + fees + thirteenthMonthPay + hazardPay + overtimePay + otherTaxable;\r\n      const exemptThirteenthMonth = Math.min(thirteenthMonthPay, 90000) || 0;\r\n      const taxableThirteenthMonth = Math.max(0, thirteenthMonthPay - 90000) || 0;\r\n\r\n      const taxableSupplementaryIncome = commission + profitSharing + fees + taxableThirteenthMonth + hazardPay + overtimePay + otherTaxable;\r\n\r\n      return {\r\n        taxable: taxableSupplementaryIncome || 0,\r\n        nonTaxable: exemptThirteenthMonth || 0,\r\n        totalSupplementary: totalSupplementary || 0\r\n      };\r\n    },\r\n    calculateNonTaxableIncome(employee) {\r\n      const isMWE = (employee.salary / 30) <= this.config.minimumWage;\r\n      const basicSalaryMWE = isMWE ? employee.salary : 0;\r\n      const holidayPayMWE = isMWE ? this.calculateHolidayPay(employee) : 0;\r\n      const overtimePayMWE = isMWE ? this.calculateOvertimePay(employee) : 0;\r\n      const nightShiftDiffMWE = isMWE ? (employee.nightShiftDiff || 0) : 0;\r\n      const hazardPayMWE = isMWE ? (employee.hazardPay || 0) : 0;\r\n      const thirteenthMonthExempt = Math.min(employee.thirteenthMonthPay || 0, 90000) || 0;\r\n      const deMinimis = Math.min(employee.deMinimis || 0, this.config.deMinimisLimit) || 0;\r\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0;\r\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0;\r\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0;\r\n\r\n      return {\r\n        totalNonTaxable: basicSalaryMWE + holidayPayMWE + overtimePayMWE + nightShiftDiffMWE + hazardPayMWE + thirteenthMonthExempt + deMinimis + sssContribution + philhealthContribution + pagibigContribution || 0\r\n      };\r\n    },\r\n    calculateTotalDeductions(employee) {\r\n      const sssContribution = this.calculateSSSContribution(employee.salary) || 0;\r\n      const philhealthContribution = this.calculatePhilHealthContribution(employee.salary) || 0;\r\n      const pagibigContribution = this.calculatePagIBIGContribution(employee.salary) || 0;\r\n      const withholdingTax = this.calculateWithholdingTax(employee) || 0;\r\n      const payheadDeductions = this.calculatePayheadDeductions(employee.payheads) || 0;\r\n\r\n      return sssContribution + philhealthContribution + pagibigContribution + withholdingTax + payheadDeductions || 0;\r\n    },\r\n    calculateNetSalary(employee) {\r\n      const totalEarnings = this.calculateTotalEarnings(employee) || 0;\r\n      const totalDeductions = this.calculateTotalDeductions(employee) || 0;\r\n      return totalEarnings - totalDeductions || 0;\r\n    },\r\n    calculateHolidayPay(employee) {\r\n      const dailyRate = (employee.salary / 30) || 0;\r\n      const salaryMonth = employee.salaryMonth \r\n        ? employee.salaryMonth.split('-')[0] + '-' + employee.salaryMonth.split('-')[1]\r\n        : moment(this.currentDate).format('YYYY-MM');\r\n      const regularHolidays = this.config.regularHolidays || [];\r\n      const specialNonWorkingDays = this.config.specialNonWorkingDays || [];\r\n      const isRegularHoliday = regularHolidays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('YYYY-MM') === salaryMonth);\r\n      const isSpecialHoliday = specialNonWorkingDays.some(holiday => moment(holiday, 'MM/DD/YYYY').format('YYYY-MM') === salaryMonth);\r\n      if (isRegularHoliday) return dailyRate * 2 || 0;\r\n      if (isSpecialHoliday) return dailyRate * 1.3 || 0;\r\n      return 0;\r\n    },\r\n    calculateOvertimePay(employee) {\r\n      const hourlyRate = employee.salary / (8 * 22) || 0;\r\n      const regularOTHours = employee.overtimeHours ? employee.overtimeHours.regular : 0;\r\n      const holidayOTHours = employee.overtimeHours ? employee.overtimeHours.holiday : 0;\r\n      const regularOTPay = regularOTHours * hourlyRate * 1.25 || 0;\r\n      const holidayOTPay = holidayOTHours * hourlyRate * 1.3 || 0;\r\n      return regularOTPay + holidayOTPay || 0;\r\n    },\r\n    calculateSSSContribution(salary) {\r\n      const monthlySalaryCredit = Math.min(Math.max(salary || 0, 5000), 35000) || 0;\r\n      const employeeShareRate = 0.045;\r\n      return Math.round(monthlySalaryCredit * employeeShareRate) || 0;\r\n    },\r\n    calculatePhilHealthContribution(salary) {\r\n      const rate = 0.05;\r\n      const monthlySalary = Math.min(salary || 0, 100000) || 0;\r\n      return Math.round((monthlySalary * rate) / 2) || 0;\r\n    },\r\n    calculatePagIBIGContribution(salary) {\r\n      const rate = 0.02;\r\n      const cappedSalary = Math.min(salary || 0, 10000) || 0;\r\n      return Math.round(cappedSalary * rate) || 0;\r\n    },\r\n    calculateWithholdingTax(employee) {\r\n      const nonTaxable = this.calculateNonTaxableIncome(employee).totalNonTaxable || 0;\r\n      const taxableIncome = (this.calculateTotalEarnings(employee) || 0) - nonTaxable || 0;\r\n      if (taxableIncome <= 20833) return 0;\r\n      if (taxableIncome <= 33333) return Math.round((taxableIncome - 20833) * 0.15) || 0;\r\n      if (taxableIncome <= 66667) return Math.round(1875 + (taxableIncome - 33333) * 0.20) || 0;\r\n      if (taxableIncome <= 166667) return Math.round(13541.80 + (taxableIncome - 66667) * 0.25) || 0;\r\n      if (taxableIncome <= 666667) return Math.round(90841.80 + (taxableIncome - 166667) * 0.30) || 0;\r\n      return Math.round(408841.80 + (taxableIncome - 666667) * 0.35) || 0;\r\n    },\r\n    getExpectedPayday(hireDate, salaryMonth) {\r\n      const [year, month] = salaryMonth.split('-').map(part => parseInt(part, 10));\r\n      const lastDay = new Date(year, month, 0).getDate();\r\n      let payday1 = new Date(year, month - 1, 15);\r\n      let payday2 = new Date(year, month - 1, lastDay);\r\n\r\n      const hireMoment = moment(hireDate);\r\n      if (hireMoment.isAfter(moment(`${year}-${month}-15`, 'YYYY-MM-DD'))) {\r\n        payday1 = hireMoment.toDate();\r\n      }\r\n      if (hireMoment.isAfter(moment(`${year}-${month}-${lastDay}`, 'YYYY-MM-DD'))) {\r\n        payday2 = hireMoment.toDate();\r\n      }\r\n\r\n      const isWeekend = (date) => date.getDay() === 0 || date.getDay() === 6;\r\n      while (isWeekend(payday1)) {\r\n        const nextDay = new Date(payday1);\r\n        nextDay.setDate(payday1.getDate() + 1);\r\n        if (nextDay.getMonth() !== payday1.getMonth()) break;\r\n        payday1 = nextDay;\r\n      }\r\n      while (isWeekend(payday2)) {\r\n        const prevDay = new Date(payday2);\r\n        prevDay.setDate(payday2.getDate() - 1);\r\n        if (prevDay.getMonth() !== payday2.getMonth()) break;\r\n        payday2 = prevDay;\r\n      }\r\n\r\n      return {\r\n        midMonthPayday: payday1.toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' }),\r\n        endMonthPayday: payday2.toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' })\r\n      };\r\n    },\r\n    createPayslipData(employee) {\r\n      const salaryDate = moment(employee.salaryMonth, 'YYYY-MM-DD').format('MM/DD/YYYY');\r\n      const basicSalary = employee.salary || 0;\r\n      const sss = this.calculateSSSContribution(basicSalary) || 0;\r\n      const philhealth = this.calculatePhilHealthContribution(basicSalary) || 0;\r\n      const pagibig = this.calculatePagIBIGContribution(basicSalary) || 0;\r\n      const totalDeductions = sss + philhealth + pagibig + (this.calculateWithholdingTax(employee) || 0) || 0;\r\n      const netSalary = this.calculateNetSalary(employee) || 0;\r\n      const paidLeavesDays = employee.paidLeaves ? employee.paidLeaves.days : 0;\r\n      const absencesDays = employee.absences ? employee.absences.days : 0;\r\n      const paidLeavesAmount = employee.paidLeaves ? employee.paidLeaves.amount : 0;\r\n      const absencesAmount = employee.absences ? -(employee.absences.amount) : 0;\r\n      const paydays = this.getExpectedPayday(employee.hireDate, employee.salaryMonth.split('-')[0] + '-' + employee.salaryMonth.split('-')[1]);\r\n\r\n      return {\r\n        salaryDate: salaryDate,\r\n        empNo: employee.empNo || 'N/A',\r\n        lastName: employee.lastName || 'N/A',\r\n        middleName: employee.middleName || 'N/A',\r\n        firstName: employee.firstName || 'N/A',\r\n        birthDate: moment(employee.birthDate).isValid() ? moment(employee.birthDate).format('MM/DD/YYYY') : 'N/A',\r\n        hireDate: moment(employee.hireDate).isValid() ? moment(employee.hireDate).format('MM/DD/YYYY') : 'N/A',\r\n        civilStatus: employee.civilStatus || 'SINGLE',\r\n        dependents: employee.dependents || 0,\r\n        sss: employee.sss || 'N/A',\r\n        tin: employee.tin || 'N/A',\r\n        philhealth: employee.philhealth || 'N/A',\r\n        pagibig: employee.pagibig || 'N/A',\r\n        position: this.getPositionName(employee.position) || 'N/A',\r\n        basicSalary: this.formatNumber(basicSalary),\r\n        totalDeductions: this.formatNumber(totalDeductions),\r\n        netSalary: this.formatNumber(netSalary),\r\n        sssDeduction: this.formatNumber(sss),\r\n        philhealthDeduction: this.formatNumber(philhealth),\r\n        pagibigDeduction: this.formatNumber(pagibig),\r\n        paidLeavesDays: paidLeavesDays,\r\n        absencesDays: absencesDays,\r\n        paidLeavesAmount: this.formatNumber(paidLeavesAmount),\r\n        absencesAmount: this.formatNumber(absencesAmount),\r\n        withholdingTax: this.formatNumber(this.calculateWithholdingTax(employee) || 0),\r\n        payheads: employee.payheads || [],\r\n        expectedPaydays: paydays\r\n      };\r\n    },\r\n    formatNumber(value) {\r\n      const num = Number(value) || 0;\r\n      return num.toFixed(2);\r\n    },\r\n    async generatePdf(payslipData, doc) {\r\n      const pdfDoc = doc || new jsPDF({\r\n        orientation: 'portrait',\r\n        unit: 'mm',\r\n        format: [216, 279]\r\n      });\r\n\r\n      pdfDoc.setFont('Helvetica');\r\n\r\n      const margin = 10;\r\n      const pageWidth = pdfDoc.internal.pageSize.getWidth();\r\n      const contentWidth = pageWidth - 2 * margin;\r\n      const columnWidth = (contentWidth - 20) / 2;\r\n      const lineHeight = 5;\r\n      const pageHeight = pdfDoc.internal.pageSize.getHeight();\r\n\r\n      function addText(doc, text, x, y, options) {\r\n        options = options || {};\r\n        text = text || 'N/A';\r\n        text = text.replace('₱', 'P');\r\n        doc.setFontSize(options.fontSize || 10);\r\n        doc.setFont(options.font || 'Helvetica', options.fontStyle || 'normal');\r\n        doc.setTextColor(\r\n          options.textColor ? options.textColor[0] : 0,\r\n          options.textColor ? options.textColor[1] : 0,\r\n          options.textColor ? options.textColor[2] : 0\r\n        );\r\n        doc.text(text, x, y, { align: options.align || 'left', maxWidth: options.maxWidth });\r\n      }\r\n\r\n      function addLabelValue(doc, label, value, x, y) {\r\n        addText(doc, label, x, y, { fontSize: 9, fontStyle: 'bold' });\r\n        addText(doc, value, x + 35, y, { fontSize: 9, maxWidth: columnWidth - 35 });\r\n      }\r\n\r\n      pdfDoc.setFillColor(0, 128, 0);\r\n      pdfDoc.rect(margin, margin, contentWidth, 10, 'F');\r\n      addText(pdfDoc, 'RIGHTJOB Solutions', margin + 5, margin + 7, { fontSize: 12, fontStyle: 'bold', textColor: [255, 255, 255] });\r\n      addText(pdfDoc, 'PAYSLIP', margin + contentWidth / 2, margin + 7, { fontSize: 12, fontStyle: 'bold', textColor: [255, 255, 255], align: 'center' });\r\n\r\n      let y = margin + 15;\r\n      addText(pdfDoc, 'Salary Date:', margin + contentWidth - 40, y, { fontSize: 9 });\r\n      addText(pdfDoc, payslipData.salaryDate, margin + contentWidth - 20, y, { fontSize: 9 });\r\n\r\n      y += 10;\r\n\r\n      addText(pdfDoc, 'Personal Information', margin, y, { fontSize: 11, fontStyle: 'bold' });\r\n      y += lineHeight;\r\n      const leftPersonalInfo = [\r\n        ['Emp No.', payslipData.empNo],\r\n        ['Last Name', payslipData.lastName],\r\n        ['Middle Name', payslipData.middleName],\r\n        ['First Name', payslipData.firstName],\r\n        ['Birth Date', payslipData.birthDate],\r\n        ['Hire Date', payslipData.hireDate],\r\n        ['Position', payslipData.position],\r\n        ['Basic Salary', `P${payslipData.basicSalary}`]\r\n      ];\r\n      leftPersonalInfo.forEach(([label, value], index) => {\r\n        addLabelValue(pdfDoc, label, value, margin, y + index * lineHeight);\r\n      });\r\n\r\n      let yRight = y;\r\n      addText(pdfDoc, 'Additional Info', margin + columnWidth + 10, yRight, { fontSize: 11, fontStyle: 'bold' });\r\n      yRight += lineHeight;\r\n      const rightPersonalInfo = [\r\n        ['Civil Status', payslipData.civilStatus],\r\n        ['Dependents', payslipData.dependents.toString()],\r\n        ['SSS', payslipData.sss],\r\n        ['TIN', payslipData.tin],\r\n        ['Philhealth', payslipData.philhealth],\r\n        ['PAG-IBIG', payslipData.pagibig]\r\n      ];\r\n      rightPersonalInfo.forEach(([label, value], index) => {\r\n        addLabelValue(pdfDoc, label, value, margin + columnWidth + 10, yRight + index * lineHeight);\r\n      });\r\n\r\n      y = Math.max(y + leftPersonalInfo.length * lineHeight, yRight + rightPersonalInfo.length * lineHeight) + 10;\r\n\r\n      addText(pdfDoc, 'Expected Paydays', margin, y, { fontSize: 11, fontStyle: 'bold' });\r\n      addText(pdfDoc, 'Mid-Month:', margin, y + lineHeight);\r\n      addText(pdfDoc, payslipData.expectedPaydays.midMonthPayday, margin + 35, y + lineHeight, { maxWidth: columnWidth - 35 });\r\n      addText(pdfDoc, 'End-of-Month:', margin + columnWidth + 10, y + lineHeight);\r\n      addText(pdfDoc, payslipData.expectedPaydays.endMonthPayday, margin + columnWidth + 45, y + lineHeight, { maxWidth: columnWidth - 35 });\r\n      y += 2 * lineHeight + 10;\r\n\r\n      addText(pdfDoc, 'Deductions', margin, y, { fontSize: 11, fontStyle: 'bold' });\r\n      y += lineHeight;\r\n      const leftDeductions = [\r\n        ['SSS', `P${payslipData.sssDeduction}`],\r\n        ['Philhealth', `P${payslipData.philhealthDeduction}`],\r\n        ['PAG-IBIG', `P${payslipData.pagibigDeduction}`]\r\n      ];\r\n      leftDeductions.forEach(([label, value], index) => {\r\n        addLabelValue(pdfDoc, label, value, margin, y + index * lineHeight);\r\n      });\r\n\r\n      const rightDeductions = [\r\n        ['Withholding Tax', `P${payslipData.withholdingTax}`]\r\n      ];\r\n      rightDeductions.forEach(([label, value], index) => {\r\n        addLabelValue(pdfDoc, label, value, margin + columnWidth + 10, y + index * lineHeight);\r\n      });\r\n      y += Math.max(leftDeductions.length, rightDeductions.length) * lineHeight + 10;\r\n\r\n      addText(pdfDoc, 'Summary', margin, y, { fontSize: 11, fontStyle: 'bold' });\r\n      y += lineHeight;\r\n      addText(pdfDoc, 'Total Deductions:', margin, y, { fontSize: 9, fontStyle: 'bold' });\r\n      addText(pdfDoc, `(P${payslipData.totalDeductions})`, margin + 35, y, { fontSize: 9 });\r\n      addText(pdfDoc, 'Net Salary:', margin + columnWidth + 10, y, { fontSize: 9, fontStyle: 'bold' });\r\n      addText(pdfDoc, `P${payslipData.netSalary}`, margin + columnWidth + 45, y, { fontSize: 9 });\r\n\r\n      const footerY = pageHeight - margin - 5;\r\n      addText(pdfDoc, 'This is a computer-generated payslip; no signature required.', margin + contentWidth / 2, footerY, { fontSize: 8, align: 'center' });\r\n\r\n      if (!doc) {\r\n        return pdfDoc.output('blob');\r\n      }\r\n    },\r\n    blobToBase64(blob) {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => resolve(reader.result);\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    },\r\n    prevPage() {\r\n      if (this.currentPage > 1) this.currentPage--;\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) this.currentPage++;\r\n    },\r\n    onIframeLoad() {\r\n      this.iframeError = false;\r\n    },\r\n    onIframeError() {\r\n      this.iframeError = true;\r\n      this.showErrorMessage('Error loading payslip preview.');\r\n    },\r\n    showSuccessMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => { this.statusMessage = ''; }, 3000);\r\n    },\r\n    showErrorMessage(message) {\r\n      this.statusMessage = message;\r\n      setTimeout(() => { this.statusMessage = ''; }, 5000);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url('https://fonts.googleapis.com/icon?family=Material+Icons|Material+Icons+Outlined');\r\n\r\nbutton:disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n.transition-colors {\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n.hover\\:bg-blue-50:hover {\r\n  background-color: #eff6ff;\r\n}\r\n@keyframes fade-in {\r\n  from { opacity: 0; transform: translateY(1rem); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n.animate-fade-in {\r\n  animation: fade-in 0.3s ease-out;\r\n}\r\n.animate-spin {\r\n  animation: spin 1s linear infinite;\r\n}\r\n@keyframes spin {\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n}\r\n.large-checkbox {\r\n  width: 1.25rem;\r\n  height: 1.25rem;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}